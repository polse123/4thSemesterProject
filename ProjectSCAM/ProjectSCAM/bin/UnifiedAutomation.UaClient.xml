<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UnifiedAutomation.UaClient</name>
    </assembly>
    <members>
        <member name="T:UnifiedAutomation.UaClient.BrowseContext">
            @ingroup UaClientLibraryHelper
             <summary>
             The context fr a browse operation.
             </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.BrowseContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.BrowseContext"/> class.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.BrowseContext.View">
            <summary>
            Gets or sets the view.
            </summary>
            <value>
            The view.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.BrowseContext.MaxReferencesToReturn">
            <summary>
            Gets or sets the max references to return.
            </summary>
            <value>
            The max references to return.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.BrowseContext.BrowseDirection">
            <summary>
            Gets or sets the browse direction.
            </summary>
            <value>
            The browse direction.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.BrowseContext.ReferenceTypeId">
            <summary>
            Gets or sets the reference type id.
            </summary>
            <value>
            The reference type id.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.BrowseContext.IncludeSubtypes">
            <summary>
            Gets or sets a value indicating whether include subtypes of the reference type.
            </summary>
            <value>
              <c>true</c> if subtypes of the reference type are included; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.BrowseContext.NodeClassMask">
            <summary>
            Gets or sets the node class mask.
            </summary>
            <value>
            The node class mask.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.BrowseContext.ResultMask">
            <summary>
            Gets or sets the result mask.
            </summary>
            <value>
            The result mask.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaClient.ClientUtils">
            @ingroup UaClientLibraryHelper
             <summary>
             Various utility functions for clients.
             </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.DataTypeManager">
            <summary>
            An object which manages access to the data type dictionaries exposed by a server.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.DataTypeManager.BlockSize">
            <summary>
            Gets or sets the size of the block used when reading dictionaries from the server.
            </summary>
            <value>
            The size of the block used when reading dictionaries from the server.
            </value>
        </member>
        <member name="M:UnifiedAutomation.UaClient.DataTypeManager.#ctor(UnifiedAutomation.UaBase.ApplicationInstance)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.DataTypeManager" /> class.
            </summary>
            <param name="application">The application.</param>
            <exception cref="T:System.ArgumentNullException">application</exception>
        </member>
        <member name="M:UnifiedAutomation.UaClient.DataTypeManager.#ctor(UnifiedAutomation.UaClient.Session)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.DataTypeManager" /> class.
            </summary>
            <param name="session">The session.</param>
            <exception cref="T:System.ArgumentNullException">session</exception>
        </member>
        <member name="M:UnifiedAutomation.UaClient.DataTypeManager.AddDictionaryToCache(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.ExpandedNodeId,System.Byte[])">
            <summary>
            Adds or replaces the dictionary in the local cache.
            </summary>
            <param name="typeSystemId">The type system identifier.</param>
            <param name="dictionaryId">The dictionary identifier.</param>
            <param name="schemaData">The schema data (an OPCBinary or XMLSchema document).</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.DataTypeManager.FindDictionaryInCache(UnifiedAutomation.UaBase.ExpandedNodeId)">
            <summary>
            Finds the data type dictionary in the local cache.
            </summary>
            <param name="dictionaryId">The data dictionary identifier.</param>
            <returns>The cached data type dictionary; null if not found.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.DataTypeManager.FindDescriptionInCache(UnifiedAutomation.UaBase.ExpandedNodeId)">
            <summary>
            Finds the data type description in the local cache.
            </summary>
            <param name="descriptionId">The data type description identifier.</param>
            <returns>The cached data type description; null if not found.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.DataTypeManager.FindEncodingInCache(UnifiedAutomation.UaBase.ExpandedNodeId)">
            <summary>
            Finds the data type description for the encoding in the local cache.
            </summary>
            <param name="encodingId">The encoding identifier.</param>
            <returns>The cached data type description; null if not found.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.DataTypeManager.NewTypeFromDataType(UnifiedAutomation.UaBase.ExpandedNodeId,UnifiedAutomation.UaBase.QualifiedName,System.Boolean)">
            <summary>
            Creates a new generic data type instance for an encoding.
            </summary>
            <param name="dataTypeId">The data type identifier.</param>
            <param name="encodingName">The name of the data type encoding.</param>
            <param name="doNotUseCache">If TRUE the information will be read from the server and the contents of the cache will be updated.</param>
            <returns>A new generic data type.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.DataTypeManager.NewTypeFromEncoding(UnifiedAutomation.UaBase.ExpandedNodeId,System.Boolean)">
            <summary>
            Creates a new generic data type instance for an encoding.
            </summary>
            <param name="encodingId">The encoding identifier.</param>
            <param name="doNotUseCache">If TRUE the information will be read from the server and the contents of the cache will be updated.</param>
            <returns>A new generic data type.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.DataTypeManager.GetDictionary(UnifiedAutomation.UaBase.ExpandedNodeId)">
            <summary>
            Reads the DataType Dictionary from the server and updates the local cache.
            </summary>
            <param name="dictionaryId">The data type dictionary identifier.</param>
            <returns>The data type dictionary.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.DataTypeManager.BeginGetDictionary(UnifiedAutomation.UaBase.ExpandedNodeId,System.AsyncCallback,System.Object)">
            <summary>
            Begins an operation to read the DataType Dictionary from the server and updates the local cache.
            </summary>
            <param name="dictionaryId">The data type dictionary identifier.</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <returns>The object used to manage the state of the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">dictionaryId</exception>
        </member>
        <member name="M:UnifiedAutomation.UaClient.DataTypeManager.EndGetDictionary(System.IAsyncResult)">
            <summary>
            Completes an operation to read the DataType Dictionary from the server and updates the local cache.
            </summary>
            <param name="result">The object used to manage the state of the asynchronous operation.</param>
            <returns>The data type Dictionary associated with the data type.</returns>
            <exception cref="T:System.ArgumentNullException">result</exception>
        </member>
        <member name="M:UnifiedAutomation.UaClient.DataTypeManager.GetDescriptionFromEncoding(UnifiedAutomation.UaBase.ExpandedNodeId,System.Boolean)">
            <summary>
            Gets the DataType Description from the DataType Encoding.
            </summary>
            <param name="encodingId">The data type encoding identifier.</param>
            <param name="doNotUseCache">If TRUE the information will be read from the server and the contents of the cache will be updated.</param>
            <returns>The data type description associated with the data type.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.DataTypeManager.BeginGetDescriptionFromEncoding(UnifiedAutomation.UaBase.ExpandedNodeId,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begins an operation to get the DataType Description from the DataType Encoding.
            </summary>
            <param name="encodingId">The data type encoding identifier.</param>
            <param name="doNotUseCache">If TRUE the information will be read from the server and the contents of the cache will be updated.</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <returns>The object used to manage the state of the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">dataTypeId</exception>
        </member>
        <member name="M:UnifiedAutomation.UaClient.DataTypeManager.EndGetDescriptionFromEncoding(System.IAsyncResult)">
            <summary>
            Completes an operation to gets the DataType Description from the DataType Encoding.
            </summary>
            <param name="result">The object used to manage the state of the asynchronous operation.</param>
            <returns>The data type description associated with the data type.</returns>
            <exception cref="T:System.ArgumentNullException">result</exception>
        </member>
        <member name="M:UnifiedAutomation.UaClient.DataTypeManager.GetDescriptionFromDataType(UnifiedAutomation.UaBase.ExpandedNodeId,UnifiedAutomation.UaBase.QualifiedName,System.Boolean)">
            <summary>
            Gets the DataType Description associated with a DataType.
            </summary>
            <param name="dataTypeId">The data type identifier.</param>
            <param name="encodingName">Name of the encoding to used when finding the description.</param>
            <param name="doNotUseCache">If TRUE the information will be read from the server and the contents of the cache will be updated.</param>
            <returns>
            The data type description associated with the data type.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.DataTypeManager.BeginGetDescriptionFromDataType(UnifiedAutomation.UaBase.ExpandedNodeId,UnifiedAutomation.UaBase.QualifiedName,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begins an operation to get the DataType Description associated with a DataType.
            </summary>
            <param name="dataTypeId">The data type identifier.</param>
            <param name="encodingName">Name of the encoding to used when finding the description.</param>
            <param name="doNotUseCache">If TRUE the information will be read from the server and the contents of the cache will be updated.</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <returns>The object used to manage the state of the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">dataTypeId</exception>
        </member>
        <member name="M:UnifiedAutomation.UaClient.DataTypeManager.EndGetDescriptionFromDataType(System.IAsyncResult)">
            <summary>
            Completes an operation to get the OPCBinary DataType Description associated with a DataType.
            </summary>
            <param name="result">The object used to manage the state of the asynchronous operation.</param>
            <returns>The data type description associated with the data type.</returns>
            <exception cref="T:System.ArgumentNullException">result</exception>
        </member>
        <member name="M:UnifiedAutomation.UaClient.DataTypeManager.ParseValue(UnifiedAutomation.UaBase.ExtensionObject)">
            <summary>
            Parses the value.
            </summary>
            <param name="value">The value.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.DataTypeManager.BeginParseValue(UnifiedAutomation.UaBase.ExtensionObject,System.AsyncCallback,System.Object)">
            <summary>
            Begins the parse value.
            </summary>
            <param name="value">The value.</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <returns>The parsed value.</returns>
            <exception cref="T:System.ArgumentNullException">value</exception>
        </member>
        <member name="M:UnifiedAutomation.UaClient.DataTypeManager.EndParseValue(System.IAsyncResult)">
            <summary>
            Begins the parse value.
            </summary>
            <param name="result">The object used to manage the state of the asynchronous operation.</param>
            <returns>The parsed value.</returns>
            <exception cref="T:System.ArgumentNullException">result</exception>
        </member>
        <member name="T:UnifiedAutomation.UaClient.DataTypeDictionary">
            <summary>
            The description of a data type.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.DataTypeDictionary.DictionaryId">
            <summary>
            Gets the dictionary identifier.
            </summary>
            <value>
            The dictionary identifier.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.DataTypeDictionary.TypeSystemId">
            <summary>
            Gets the type system identifier.
            </summary>
            <value>
            The type system identifier.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.DataTypeDictionary.SchemaData">
            <summary>
            Gets the schema data returned from the server.
            </summary>
            <value>
            The schema data returned from the server.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.DataTypeDictionary.NamespaceUri">
            <summary>
            Gets or sets the namespace URI.
            </summary>
            <value>
            The namespace URI.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.DataTypeDictionary.Schema">
            <summary>
            Gets or sets the object representing the parsed schema.
            </summary>
            <value>
            The parsed schema.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.DataTypeDictionary.UserData">
            <summary>
            Gets or sets user data that can be associated with the dictionary.
            </summary>
            <value>
            The user data that can be associated with the dictionary.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaClient.DataTypeDescription">
            <summary>
            The description of a data type.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.DataTypeDescription.DataTypeId">
            <summary>
            Gets the data type identifier.
            </summary>
            <value>
            The data type identifier.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.DataTypeDescription.EncodingId">
            <summary>
            The encoding identifier
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.DataTypeDescription.TypeName">
            <summary>
            The type name used to look up the type in the dictionary (syntax depends on the TypeSystem).
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.DataTypeDescription.Dictionary">
            <summary>
            The dictionary which defines the type.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.DataTypeDescription.UserData">
            <summary>
            Gets or sets user data that can be associated with the description.
            </summary>
            <value>
            The user data that can be associated with the description.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaClient.EventMonitoredItem">
            @ingroup UaClientLibraryHelper
             <summary>
             A data item being monitored.
             </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.EventMonitoredItem.#ctor(UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.DataMonitoredItem"/> class.
            </summary>
            <param name="nodeId">The node id.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.EventMonitoredItem.Initialize">
            <summary>
            Initializes this instance with the default values.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.EventMonitoredItem.Filter">
            <summary>
            Gets the filter.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.EventMonitoredItem.FilterErrors">
            <summary>
            Gets the last error.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.EventMonitoredItem.SaveAll(UnifiedAutomation.UaBase.IEncoder)">
            <summary>
            Saves the EventMonitoredItem using the specified encoder including
            the Filter and the FilerErrors.
            </summary>
            <param name="encoder">The encoder to save the EventMonitoredItem.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.EventMonitoredItem.LoadAll(UnifiedAutomation.UaBase.IDecoder)">
            <summary>
            Initializes the EventMonitoredItem using the specified decoder including
            the Filter and the FilerErrors.
            </summary>
            <param name="decoder">The decoder to load the EventMonitoredItem.</param>
        </member>
        <member name="T:UnifiedAutomation.UaClient.ItemEventFilter">
            @ingroup UaClientLibraryHelper
             <summary>
             A filter for an Event monitored item.
             </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ItemEventFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaBase.EventFilter"/> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ItemEventFilter.#ctor(UnifiedAutomation.UaBase.StringTable)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaBase.EventFilter"/> class.
            </summary>
            <param name="namespaceUris">The namespace uris.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ItemEventFilter.SetDefault">
            <summary>
            Sets the default filter.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ItemEventFilter.GetValue``1(UnifiedAutomation.UaBase.EventFieldList,UnifiedAutomation.UaBase.QualifiedName,``0)">
            <summary>
            Gets the field value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="e">The e.</param>
            <param name="browseName">Name of the browse.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ItemEventFilter.GetValue``1(UnifiedAutomation.UaBase.EventFieldList,UnifiedAutomation.UaBase.ExpandedNodeId,UnifiedAutomation.UaBase.QualifiedName,``0)">
            <summary>
            Gets the field value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="e">The e.</param>
            <param name="typeId">The type id.</param>
            <param name="browseName">Name of the browse.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ItemEventFilter.GetValue``1(UnifiedAutomation.UaBase.EventFieldList,UnifiedAutomation.UaBase.QualifiedName[],``0)">
            <summary>
            Gets the value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="e">The e.</param>
            <param name="browsePath">The browse path.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ItemEventFilter.GetValue``1(UnifiedAutomation.UaBase.EventFieldList,UnifiedAutomation.UaBase.ExpandedNodeId,UnifiedAutomation.UaBase.QualifiedName[],``0)">
            <summary>
            Gets the value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="e">The e.</param>
            <param name="typeId">The type id.</param>
            <param name="browsePath">The browse path.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ItemEventFilter.GetValue``1(UnifiedAutomation.UaBase.HistoryEventFieldList,UnifiedAutomation.UaBase.QualifiedName,``0)">
            <summary>
            Gets the field value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="e">The e.</param>
            <param name="browseName">Name of the browse.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ItemEventFilter.GetValue``1(UnifiedAutomation.UaBase.HistoryEventFieldList,UnifiedAutomation.UaBase.ExpandedNodeId,UnifiedAutomation.UaBase.QualifiedName,``0)">
            <summary>
            Gets the field value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="e">The e.</param>
            <param name="typeId">The type id.</param>
            <param name="browseName">Name of the browse.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ItemEventFilter.GetValue``1(UnifiedAutomation.UaBase.HistoryEventFieldList,UnifiedAutomation.UaBase.QualifiedName[],``0)">
            <summary>
            Gets the value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="e">The e.</param>
            <param name="browsePath">The browse path.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ItemEventFilter.GetValue``1(UnifiedAutomation.UaBase.HistoryEventFieldList,UnifiedAutomation.UaBase.ExpandedNodeId,UnifiedAutomation.UaBase.QualifiedName[],``0)">
            <summary>
            Gets the value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="e">The e.</param>
            <param name="typeId">The type id.</param>
            <param name="browsePath">The browse path.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ItemEventFilter.ToEventFilter">
            <summary>
            Returns an event filter that can be used in a call to the server.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.ItemEventFilter.SelectClauses">
            <summary>
            Gets or sets the select clauses.
            </summary>
            <value>
            The select clauses.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.ItemEventFilter.WhereClauses">
            <summary>
            Gets or sets the where clauses.
            </summary>
            <value>
            The where clauses.
            </value>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ItemEventFilter.ToString(UnifiedAutomation.UaClient.Session,UnifiedAutomation.UaBase.ContentFilterElement)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="session">The session.</param>
            <param name="element">The element.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ItemEventFilter.ToString(UnifiedAutomation.UaClient.Session,UnifiedAutomation.UaBase.ContentFilterElement,System.Int32)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="session">The session.</param>
            <param name="element">The element.</param>
            <param name="index">The index.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ItemEventFilter.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ItemEventFilter.SaveAll(UnifiedAutomation.UaBase.IEncoder)">
            <summary>
            Saves the EventFilter using the specified encoder.
            </summary>
            <param name="encoder">The encoder to save the EventFilter.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ItemEventFilter.LoadAll(UnifiedAutomation.UaBase.IDecoder)">
            <summary>
            Initializes the EventFilter using the specified decoder.
            </summary>
            <param name="decoder">The decoder to load the EventFilter.</param>
        </member>
        <member name="T:UnifiedAutomation.UaClient.SelectClauseCollection">
            <summary>
            A collection of select clauses.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SelectClauseCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.SelectClauseCollection"/> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SelectClauseCollection.#ctor(UnifiedAutomation.UaBase.StringTable)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.SelectClauseCollection"/> class.
            </summary>
            <param name="namespaceUris">The namespace uris.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SelectClauseCollection.GetDisplayText(System.Int32)">
            <summary>
            Gets the display text.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SelectClauseCollection.Find(UnifiedAutomation.UaBase.QualifiedName)">
            <summary>
            Finds the specified browse name.
            </summary>
            <param name="browseName">Name of the browse.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SelectClauseCollection.Find(UnifiedAutomation.UaBase.ExpandedNodeId,UnifiedAutomation.UaBase.QualifiedName)">
            <summary>
            Finds the specified type id.
            </summary>
            <param name="typeId">The type id.</param>
            <param name="browseName">Name of the browse.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SelectClauseCollection.Find(UnifiedAutomation.UaBase.QualifiedName[])">
            <summary>
            Finds the specified browse path.
            </summary>
            <param name="browsePath">The browse path.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SelectClauseCollection.Find(UnifiedAutomation.UaBase.ExpandedNodeId,UnifiedAutomation.UaBase.QualifiedName[])">
            <summary>
            Finds the specified browse path.
            </summary>
            <param name="typeId">The type id.</param>
            <param name="browsePath">The browse path.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SelectClauseCollection.Find(UnifiedAutomation.UaBase.ExpandedNodeId,UnifiedAutomation.UaBase.QualifiedName[],UnifiedAutomation.UaBase.NodeClass)">
            <summary>
            Finds the match selecting clause.
            </summary>
            <param name="typeId">The type id.</param>
            <param name="browsePath">The browse path.</param>
            <param name="nodeClass">The node class.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SelectClauseCollection.Add(UnifiedAutomation.UaClient.TypeFieldDescription)">
            <summary>
            Adds the specified field.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SelectClauseCollection.Add(UnifiedAutomation.UaClient.TypeFieldDescription,UnifiedAutomation.UaBase.NumericRange)">
            <summary>
            Adds the specified field.
            </summary>
            <param name="field">The field.</param>
            <param name="indexRange">The index range.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SelectClauseCollection.Add(UnifiedAutomation.UaBase.ExpandedNodeId,UnifiedAutomation.UaBase.QualifiedName[])">
            <summary>
            Adds the specified type id.
            </summary>
            <param name="typeId">The type id.</param>
            <param name="browsePath">The browse path.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SelectClauseCollection.Add(UnifiedAutomation.UaBase.ExpandedNodeId,UnifiedAutomation.UaBase.QualifiedName[],UnifiedAutomation.UaBase.NumericRange)">
            <summary>
            Adds the specified type id.
            </summary>
            <param name="typeId">The type id.</param>
            <param name="browsePath">The browse path.</param>
            <param name="indexRange">The index range.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SelectClauseCollection.Add(UnifiedAutomation.UaBase.ExpandedNodeId,UnifiedAutomation.UaBase.QualifiedName[],UnifiedAutomation.UaBase.NodeClass)">
            <summary>
            Adds the specified type id.
            </summary>
            <param name="typeId">The type id.</param>
            <param name="browsePath">The browse path.</param>
            <param name="nodeClass">The node class.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SelectClauseCollection.Add(UnifiedAutomation.UaBase.QualifiedName)">
            <summary>
            Adds the specified browse name.
            </summary>
            <param name="browseName">Name of the browse.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SelectClauseCollection.Add(UnifiedAutomation.UaBase.ExpandedNodeId,UnifiedAutomation.UaBase.QualifiedName)">
            <summary>
            Adds the specified type id.
            </summary>
            <param name="typeId">The type id.</param>
            <param name="browseName">Name of the browse.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SelectClauseCollection.Add(UnifiedAutomation.UaBase.ExpandedNodeId,UnifiedAutomation.UaBase.QualifiedName,UnifiedAutomation.UaBase.NumericRange)">
            <summary>
            Adds the specified type id.
            </summary>
            <param name="typeId">The type id.</param>
            <param name="browseName">Name of the browse.</param>
            <param name="indexRange">The index range.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SelectClauseCollection.Add(UnifiedAutomation.UaBase.ExpandedNodeId,UnifiedAutomation.UaBase.QualifiedName,UnifiedAutomation.UaBase.NodeClass)">
            <summary>
            Adds the specified type id.
            </summary>
            <param name="typeId">The type id.</param>
            <param name="browseName">Name of the browse.</param>
            <param name="nodeClass">The node class.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SelectClauseCollection.IndexOf(UnifiedAutomation.UaBase.SimpleAttributeOperand)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SelectClauseCollection.Insert(System.Int32,UnifiedAutomation.UaBase.SimpleAttributeOperand)">
             <summary>
             Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
             </summary>
             <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
             <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
             <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
               </exception>
            
             <exception cref="T:System.NotSupportedException">
             The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
               </exception>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SelectClauseCollection.RemoveAt(System.Int32)">
             <summary>
             Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
             </summary>
             <param name="index">The zero-based index of the item to remove.</param>
             <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
               </exception>
            
             <exception cref="T:System.NotSupportedException">
             The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
               </exception>
        </member>
        <member name="P:UnifiedAutomation.UaClient.SelectClauseCollection.Item(System.Int32)">
             <summary>
             Gets or sets the element at the specified index.
             </summary>
             <returns>
             The element at the specified index.
               </returns>
            
             <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
               </exception>
            
             <exception cref="T:System.NotSupportedException">
             The property is set and the <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
               </exception>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SelectClauseCollection.Add(UnifiedAutomation.UaBase.SimpleAttributeOperand)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
              </exception>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SelectClauseCollection.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
              </exception>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SelectClauseCollection.Contains(UnifiedAutomation.UaBase.SimpleAttributeOperand)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SelectClauseCollection.CopyTo(UnifiedAutomation.UaBase.SimpleAttributeOperand[],System.Int32)">
             <summary>
             Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
             </summary>
             <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
             <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
             <exception cref="T:System.ArgumentNullException">
               <paramref name="array"/> is null.
               </exception>
            
             <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="arrayIndex"/> is less than 0.
               </exception>
            
             <exception cref="T:System.ArgumentException">
               <paramref name="array"/> is multidimensional.
             -or-
               <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
             -or-
             The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
               </exception>
        </member>
        <member name="P:UnifiedAutomation.UaClient.SelectClauseCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
              </returns>
        </member>
        <member name="P:UnifiedAutomation.UaClient.SelectClauseCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
              </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SelectClauseCollection.Remove(UnifiedAutomation.UaBase.SimpleAttributeOperand)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
              </exception>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SelectClauseCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SelectClauseCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SelectClauseCollection.GetRemoteId(UnifiedAutomation.UaBase.ExpandedNodeId)">
            <summary>
            Gets the remote id.
            </summary>
            <param name="typeId">The type id.</param>
            <returns></returns>
        </member>
        <member name="T:UnifiedAutomation.UaClient.WhereClauseCollection">
            <summary>
            A collection of where clauses.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.WhereClauseCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.SelectClauseCollection"/> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.WhereClauseCollection.#ctor(UnifiedAutomation.UaBase.StringTable)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.SelectClauseCollection"/> class.
            </summary>
            <param name="namespaceUris">The namespace uris.</param>
        </member>
        <member name="P:UnifiedAutomation.UaClient.WhereClauseCollection.Count">
            <summary>
            Gets the count.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.WhereClauseCollection.NamespaceUris">
            <summary>
            Gets the NamespaceUris.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.WhereClauseCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:UnifiedAutomation.UaBase.ContentFilterElement"/> at the specified index.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.WhereClauseCollection.Add(UnifiedAutomation.UaBase.ContentFilterElement)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
              </exception>
        </member>
        <member name="M:UnifiedAutomation.UaClient.WhereClauseCollection.Add(UnifiedAutomation.UaBase.FilterOperator,UnifiedAutomation.UaBase.FilterOperand[])">
            <summary>
            Adds the specified op.
            </summary>
            <param name="op">The op.</param>
            <param name="operands">The operands.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.WhereClauseCollection.Add(UnifiedAutomation.UaBase.FilterOperator,UnifiedAutomation.UaBase.QualifiedName,UnifiedAutomation.UaBase.Variant)">
            <summary>
            Adds the specified op.
            </summary>
            <param name="op">The op.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.WhereClauseCollection.Add(UnifiedAutomation.UaBase.FilterOperator,UnifiedAutomation.UaBase.ExpandedNodeId,UnifiedAutomation.UaBase.QualifiedName,UnifiedAutomation.UaBase.Variant)">
            <summary>
            Adds the specified op.
            </summary>
            <param name="op">The op.</param>
            <param name="typeId">The type id.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.WhereClauseCollection.Add(UnifiedAutomation.UaBase.FilterOperator,UnifiedAutomation.UaBase.ExpandedNodeId,UnifiedAutomation.UaBase.QualifiedName,UnifiedAutomation.UaBase.NumericRange,UnifiedAutomation.UaBase.Variant)">
            <summary>
            Adds the specified op.
            </summary>
            <param name="op">The op.</param>
            <param name="typeId">The type id.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="indexRange">The index range.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.WhereClauseCollection.Add(UnifiedAutomation.UaBase.FilterOperator,System.Collections.Generic.IEnumerable{UnifiedAutomation.UaBase.QualifiedName},UnifiedAutomation.UaBase.Variant)">
            <summary>
            Adds the specified op.
            </summary>
            <param name="op">The op.</param>
            <param name="browsePath">The browse path.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.WhereClauseCollection.Add(UnifiedAutomation.UaBase.FilterOperator,UnifiedAutomation.UaBase.ExpandedNodeId,System.Collections.Generic.IEnumerable{UnifiedAutomation.UaBase.QualifiedName},UnifiedAutomation.UaBase.Variant)">
            <summary>
            Adds the specified op.
            </summary>
            <param name="op">The op.</param>
            <param name="typeId">The type id.</param>
            <param name="browsePath">The browse path.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.WhereClauseCollection.Add(UnifiedAutomation.UaBase.FilterOperator,UnifiedAutomation.UaBase.ExpandedNodeId,System.Collections.Generic.IEnumerable{UnifiedAutomation.UaBase.QualifiedName},UnifiedAutomation.UaBase.NumericRange,UnifiedAutomation.UaBase.Variant)">
            <summary>
            Adds the specified op.
            </summary>
            <param name="op">The op.</param>
            <param name="typeId">The type id.</param>
            <param name="browsePath">The browse path.</param>
            <param name="indexRange">The index range.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.WhereClauseCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.WhereClauseCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.WhereClauseCollection.GetRemoteId(UnifiedAutomation.UaBase.ExpandedNodeId)">
            <summary>
            Gets the remote id.
            </summary>
            <param name="typeId">The type id.</param>
            <returns></returns>
        </member>
        <member name="T:UnifiedAutomation.UaClient.EventFilterStatus">
            <summary>
            The status for an event filter.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.EventFilterStatus.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaBase.EventFilter"/> class.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.EventFilterStatus.SelectClauses">
            <summary>
            Gets the status for the select clauses.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.EventFilterStatus.WhereClauses">
            <summary>
            Gets the status for the wheer clauses.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Discovery">
            @ingroup UaClientApi
             <summary>
             The settings for a request.
             </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Discovery.#ctor">
            <summary>
            Create a session for the default client application.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Discovery.#ctor(UnifiedAutomation.UaBase.ApplicationInstance)">
            <summary>
            Create a session for the specified client application.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Discovery.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Discovery.Dispose">
            <summary>
            Frees any unmanaged resources.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Discovery.Dispose(System.Boolean)">
            <summary>
            An overrideable version of the Dispose.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Discovery.Application">
            <summary>
            Gets the application.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Discovery.DefaultRequestSettings">
            <summary>
            Gets or sets the default request settings.
            </summary>
            <value>
            The default request settings.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Discovery.SecureChannelTimeout">
            <summary>
            Gets or sets the secure channel timeout.
            </summary>
            <value>
            The secure channel timeout.
            </value>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Discovery.FindServers(System.String)">
            <summary>
            Finds the servers known to the discovery server.
            </summary>
            <param name="discoveryUrl">The discovery URL.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Discovery.FindServers(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Finds the servers known to the discovery server.
            </summary>
            <param name="discoveryUrl">The discovery URL.</param>
            <param name="localeIds">The locale ids.</param>
            <param name="applicationUris">The application uris.</param>
            <param name="settings">The request settings.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Discovery.FindServers(System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Finds the servers known to the discovery server.
            </summary>
            <param name="discoveryUrl">The discovery URL.</param>
            <param name="transportProfileUri">The transport profile URI.</param>
            <param name="localeIds">The locale ids.</param>
            <param name="applicationUris">The application uris.</param>
            <param name="settings">The request settings.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Discovery.BeginFindServers(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Finds the servers known to the discovery server.
            </summary>
            <param name="discoveryUrl">The discovery URL.</param>
            <param name="localeIds">The locale ids.</param>
            <param name="applicationUris">The application uris.</param>
            <param name="settings">The request settings.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>
            An object which must be passed to the EndFindServers() method.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Discovery.BeginFindServers(System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Finds the servers known to the discovery server.
            </summary>
            <param name="discoveryUrl">The discovery URL.</param>
            <param name="transportProfileUri">The transport profile URI.</param>
            <param name="localeIds">The locale ids.</param>
            <param name="applicationUris">The application uris.</param>
            <param name="settings">The request settings.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>
            An object which must be passed to the EndFindServers() method.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Discovery.BeginFindServers(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Finds the servers known to the discovery server.
            </summary>
            <param name="discoveryUrl">The discovery URL.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>
            An object which must be passed to the EndFindServers() method.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Discovery.EndFindServers(System.IAsyncResult)">
            <summary>
            Completes an asynchronous disconnect operation.
            </summary>
            <param name="result">The object returned from the BeginFindServers method.</param>
            <returns></returns>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Discovery.FindServersAsyncResult">
            <summary>
            Stores state information for asynchronous read operations.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Discovery.OnFindServersComplete(System.IAsyncResult)">
            <summary>
            Called when an asynchronous read operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Discovery.GetEndpoints(System.String)">
            <summary>
            Gets the endpoints.
            </summary>
            <param name="discoveryUrl">The discovery URL.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Discovery.GetEndpoints(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Gets the endpoints.
            </summary>
            <param name="discoveryUrl">The discovery URL.</param>
            <param name="localeIds">The locale ids.</param>
            <param name="profileUris">The profile uris.</param>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Discovery.GetEndpoints(System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Gets the endpoints.
            </summary>
            <param name="discoveryUrl">The discovery URL.</param>
            <param name="transportProfileUri">The transport profile URI.</param>
            <param name="localeIds">The locale ids.</param>
            <param name="profileUris">The profile uris.</param>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Discovery.BeginGetEndpoints(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Begins the get endpoints.
            </summary>
            <param name="discoveryUrl">The discovery URL.</param>
            <param name="localeIds">The locale ids.</param>
            <param name="profileUris">The application uris.</param>
            <param name="settings">The settings.</param>
            <param name="callback">The callback.</param>
            <param name="userData">The user data.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Discovery.BeginGetEndpoints(System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Begins the get endpoints.
            </summary>
            <param name="discoveryUrl">The discovery URL.</param>
            <param name="transportProfileUri">The transport profile URI.</param>
            <param name="localeIds">The locale ids.</param>
            <param name="profileUris">The application uris.</param>
            <param name="settings">The settings.</param>
            <param name="callback">The callback.</param>
            <param name="userData">The user data.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Discovery.BeginGetEndpoints(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins the get endpoints.
            </summary>
            <param name="discoveryUrl">The discovery URL.</param>
            <param name="callback">The callback.</param>
            <param name="userData">The user data.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Discovery.EndGetEndpoints(System.IAsyncResult)">
            <summary>
            Ends the get endpoints.
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Discovery.GetEndpointsAsyncResult">
             <summary>
            
             </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Discovery.OnGetEndpointsComplete(System.IAsyncResult)">
            <summary>
            Called when [get endpoints complete].
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Discovery.FindServersOnNetwork(System.String)">
            <summary>
            Finds the servers known to the discovery server.
            </summary>
            <param name="discoveryUrl">The discovery URL.</param>
            <returns>
            The first batch of servers known to the discovery server.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Discovery.FindServersOnNetwork(System.String,System.UInt32,System.UInt32,System.Collections.Generic.IList{System.String},UnifiedAutomation.UaClient.RequestSettings,System.DateTime@)">
            <summary>
            Finds the servers known to the discovery server.
            </summary>
            <param name="discoveryUrl">The discovery URL.</param>
            <param name="startingRecordId">The starting record identifier.</param>
            <param name="maxRecordsToReturn">The maximum records to return.</param>
            <param name="serverCapabilityFilter">The server capability filters.</param>
            <param name="settings">The request settings.</param>
            <param name="lastCounterResetTime">The last counter reset time.</param>
            <returns>
            The next batch of servers the known to the discovery server.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Discovery.FindServersOnNetwork(System.String,System.String,System.UInt32,System.UInt32,System.Collections.Generic.IList{System.String},UnifiedAutomation.UaClient.RequestSettings,System.DateTime@)">
            <summary>
            Finds the servers known to the discovery server.
            </summary>
            <param name="discoveryUrl">The discovery URL.</param>
            <param name="transportProfileUri">The transport profile URI.</param>
            <param name="startingRecordId">The starting record identifier.</param>
            <param name="maxRecordsToReturn">The maximum records to return.</param>
            <param name="serverCapabilityFilter">The server capability filter.</param>
            <param name="settings">The request settings.</param>
            <param name="lastCounterResetTime">The last counter reset time.</param>
            <returns>
            The next batch of servers the known to the discovery server.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Discovery.BeginFindServersOnNetwork(System.String,System.UInt32,System.UInt32,System.Collections.Generic.IList{System.String},UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Finds the servers known to the discovery server.
            </summary>
            <param name="discoveryUrl">The discovery URL.</param>
            <param name="startingRecordId">The starting record identifier.</param>
            <param name="maxRecordsToReturn">The maximum records to return.</param>
            <param name="serverCapabilityFilter">The server capability filter.</param>
            <param name="settings">The request settings.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>
            An object which must be passed to the EndFindServersOnNetwork() method.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Discovery.BeginFindServersOnNetwork(System.String,System.String,System.UInt32,System.UInt32,System.Collections.Generic.IList{System.String},UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Finds the servers known to the discovery server.
            </summary>
            <param name="discoveryUrl">The discovery URL.</param>
            <param name="transportProfileUri">The transport profile URI.</param>
            <param name="startingRecordId">The starting record identifier.</param>
            <param name="maxRecordsToReturn">The maximum records to return.</param>
            <param name="serverCapabilityFilter">The server capability filter.</param>
            <param name="settings">The request settings.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>
            An object which must be passed to the EndFindServersOnNetwork() method.
            </returns>
            <exception cref="T:System.ArgumentException">URL does not appear to be valid.;discoveryUrl</exception>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Discovery.BeginFindServersOnNetwork(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Finds the servers known to the discovery server.
            </summary>
            <param name="discoveryUrl">The discovery URL.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>
            An object which must be passed to the EndFindServersOnNetwork() method.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Discovery.EndFindServersOnNetwork(System.IAsyncResult,System.DateTime@)">
            <summary>
            Completes an asynchronous disconnect operation.
            </summary>
            <param name="result">The object returned from the BeginFindServersOnNetwork method.</param>
            <param name="lastCounterResetTime">The last counter reset time.</param>
            <returns>
            The next batch of servers the known to the discovery server.
            </returns>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Discovery.FindServersOnNetworkAsyncResult">
            <summary>
            Stores state information for asynchronous read operations.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Discovery.OnFindServersOnNetworkComplete(System.IAsyncResult)">
            <summary>
            Called when an asynchronous read operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Discovery.GetMostSecureEndpoint(System.String)">
            <summary>
            Returns the most secure endpoint supported by a server.
            </summary>
            <param name="discoveryUrl">The server's discovery URL.</param>
            <returns>The most secure endpoint.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Discovery.BeginGetMostSecureEndpoint(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins a request for the most secure endpoint supported by a server.
            </summary>
            <param name="discoveryUrl">The server's discovery URL.</param>
            <param name="callback">The callback.</param>
            <param name="userData">The user data.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Discovery.EndGetMostSecureEndpoint(System.IAsyncResult)">
            <summary>
            Ends the get endpoints.
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Discovery.SelectEndpoint(UnifiedAutomation.UaBase.ApplicationInstance,System.Uri,System.Boolean,System.String,System.Collections.Generic.List{UnifiedAutomation.UaBase.EndpointDescription})">
            <summary>
            Selects the endpoint.
            </summary>>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Discovery.GetEndpointConfiguration(UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Gets the endpoint configuration.
            </summary>
            <param name="settings">The settings.</param>
            <returns>The endpoint configuration to use.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Discovery.GetDiscoveryUrlFromUrl(System.Uri,System.String)">
            <summary>
            Gets the discovery URL from URL.
            </summary>
            <param name="endpointUrl">The endpoint URL.</param>
            <param name="transportProfileUri">The transport profile URI.</param>
            <returns>
            The discovery URL.
            </returns>
            <remarks>
            This method assumes that WS-* based endpoints use the '/discovery' suffix.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Discovery.GetRequestHeader(UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Gets the request header.
            </summary>
            <param name="settings">The request settings to use.</param>
            <returns>The request header.</returns>
        </member>
        <member name="T:UnifiedAutomation.UaClient.FileDirectoryModel">
            <summary>
            Used to access a File object on an OPC UA Server.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.FileDirectoryModel.#ctor(UnifiedAutomation.UaBase.ApplicationInstance)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.FileDirectoryModel"/> class.
            </summary>
            <param name="application">The application to use.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.FileDirectoryModel.#ctor(UnifiedAutomation.UaClient.Session)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.FileDirectoryModel"/> class.
            </summary>
            <param name="session">The session to use.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.FileDirectoryModel.CreateDirectory(UnifiedAutomation.UaBase.NodeId,System.String)">
            <summary>
            Creates a new directory.
            </summary>
            <param name="parentId">The identifier for the parent directory.</param>
            <param name="directoryName">Name of the new directory.</param>
            <returns>The NodeId for the new directory object.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.FileDirectoryModel.BeginCreateDirectory(UnifiedAutomation.UaBase.NodeId,System.String,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an operation to create a new directory.
            </summary>
            <param name="parentId">The identifier for the parent directory.</param>
            <param name="directoryName">Name of the new directory.</param>
            <param name="timeout">The timeout in milliseconds. Specify 0 to use the default timeout.</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <returns>
            The object used to manage the state of the asynchronous operation.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.FileDirectoryModel.EndCreateDirectory(System.IAsyncResult)">
            <summary>
            Completes an operation to CreateDirectory a file from the server.
            </summary>
            <param name="result">The object used to manage the state of the asynchronous operation.</param>
            <returns>The NodeId for the new directory object.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.FileDirectoryModel.CreateFile(UnifiedAutomation.UaBase.NodeId,System.String)">
            <summary>
            Creates a new file.
            </summary>
            <param name="parentId">The identifier for the parent directory.</param>
            <param name="fileName">Name of the new file.</param>
            <returns>The NodeId for the new file object.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.FileDirectoryModel.CreateFile(UnifiedAutomation.UaBase.NodeId,System.String,System.Boolean,System.Int32,System.UInt32@)">
            <summary>
            Creates a new directory.
            </summary>
            <param name="parentId">The identifier for the parent directory.</param>
            <param name="fileName">Name of the new file.</param>
            <param name="openFile">If TRUE the file is opened after it is created.</param>
            <param name="timeout">The timeout in milliseconds. Specify 0 to use the default timeout.</param>
            <param name="fileHandle">The file for the file if it was opened.</param>
            <returns>The NodeId for the new directory object.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.FileDirectoryModel.BeginCreateFile(UnifiedAutomation.UaBase.NodeId,System.String,System.Boolean,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an operation to create a new directory.
            </summary>
            <param name="parentId">The identifier for the parent directory.</param>
            <param name="fileName">Name of the new file.</param>
            <param name="openFile">If TRUE the file is opened after it is created.</param>
            <param name="timeout">The timeout in milliseconds. Specify 0 to use the default timeout.</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <returns>The object used to manage the state of the asynchronous operation.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.FileDirectoryModel.EndCreateFile(System.IAsyncResult,System.UInt32@)">
            <summary>
            Completes an operation to CreateFile a file from the server.
            </summary>
            <param name="result">The object used to manage the state of the asynchronous operation.</param>
            <param name="fileHandle">The file for the file if it was opened.</param>
            <returns>The NodeId for the new directory object.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.FileDirectoryModel.Delete(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Deletes a file or directory.
            </summary>
            <param name="parentId">The identifier for the parent directory.</param>
            <param name="fileOrDirectoryId">The file or directory identifier.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.FileDirectoryModel.BeginDelete(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an operation to create a new directory.
            </summary>
            <param name="parentId">The identifier for the parent directory.</param>
            <param name="fileOrDirectoryId">The file or directory identifier.</param>
            <param name="timeout">The timeout in milliseconds. Specify 0 to use the default timeout.</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <returns>The object used to manage the state of the asynchronous operation.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.FileDirectoryModel.EndDelete(System.IAsyncResult)">
            <summary>
            Completes an operation to delete a file or directory on the server.
            </summary>
            <param name="result">The object used to manage the state of the asynchronous operation.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.FileDirectoryModel.MoveOrCopy(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,System.String,System.Boolean)">
            <summary>
            Moves or copies a file or directory on the server.
            </summary>
            <param name="parentId">The identifier for the parent directory.</param>
            <param name="fileToMove">The file to move.</param>
            <param name="targetDirectory">The target directory.</param>
            <param name="newName">The new name.</param>
            <param name="createCopy">if set to <c>true</c> a copy is created.</param>
            <returns>The NodeId for the new file or directory object.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.FileDirectoryModel.BeginMoveOrCopy(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,System.String,System.Boolean,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an operation to create a new directory.
            </summary>
            <param name="parentId">The identifier for the parent directory.</param>
            <param name="fileToMove">The file to move.</param>
            <param name="targetDirectory">The target directory.</param>
            <param name="newName">The new name.</param>
            <param name="createCopy">if set to <c>true</c> a copy is created.</param>
            <param name="timeout">The timeout in milliseconds. Specify 0 to use the default timeout.</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <returns>The object used to manage the state of the asynchronous operation.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.FileDirectoryModel.EndMoveOrCopy(System.IAsyncResult)">
            <summary>
            Completes an operation to MoveOrCopy a file from the server.
            </summary>
            <param name="result">The object used to manage the state of the asynchronous operation.</param>
            <returns>The NodeId for the new file or directory object.</returns>
        </member>
        <member name="T:UnifiedAutomation.UaClient.FileObjectStream">
            <summary>
            Used to access a File object on an OPC UA Server.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.FileObjectStream.#ctor(UnifiedAutomation.UaClient.FileModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.FileObjectStream"/> class.
            </summary>
            <param name="model">The model to use when accessing the server.</param>
            <exception cref="T:System.ArgumentNullException">model</exception>
        </member>
        <member name="M:UnifiedAutomation.UaClient.FileObjectStream.#ctor(UnifiedAutomation.UaBase.ApplicationInstance,System.String,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.FileObjectStream" /> class.
            </summary>
            <param name="application">The application.</param>
            <param name="endpointUrl">The URL for the server to use.</param>
            <param name="fileId">The file object node identifier.</param>
            <exception cref="T:System.ArgumentNullException">application</exception>
        </member>
        <member name="M:UnifiedAutomation.UaClient.FileObjectStream.#ctor(UnifiedAutomation.UaBase.ApplicationInstance,System.String,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.FileAccessModes)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.FileObjectStream" /> class.
            </summary>
            <param name="application">The application.</param>
            <param name="endpointUrl">The URL for the server to use.</param>
            <param name="fileId">The file object node identifier.</param>
            <param name="accessMode">The access mode to use when opening the file.</param>
            <exception cref="T:System.ArgumentNullException">application</exception>
        </member>
        <member name="M:UnifiedAutomation.UaClient.FileObjectStream.#ctor(UnifiedAutomation.UaClient.Session,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.FileObjectStream"/> class.
            </summary>
            <param name="session">The session.</param>
            <param name="fileId">The file object node identifier.</param>
            <exception cref="T:System.ArgumentNullException">session</exception>
        </member>
        <member name="M:UnifiedAutomation.UaClient.FileObjectStream.#ctor(UnifiedAutomation.UaClient.Session,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.FileAccessModes)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.FileObjectStream"/> class.
            </summary>
            <param name="session">The session.</param>
            <param name="fileId">The file object node identifier.</param>
            <param name="accessMode">The access mode to use when opening the file.</param>
            <exception cref="T:System.ArgumentNullException">session</exception>
        </member>
        <member name="P:UnifiedAutomation.UaClient.FileObjectStream.CanRead">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports reading.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.FileObjectStream.CanSeek">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports seeking.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.FileObjectStream.CanTimeout">
            <summary>
            Gets a value that determines whether the current stream can time out.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.FileObjectStream.CanWrite">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports writing.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.FileObjectStream.Length">
            <summary>
            When overridden in a derived class, gets the length in bytes of the stream.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.FileObjectStream.Position">
            <summary>
            When overridden in a derived class, gets or sets the position within the current stream.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.FileObjectStream.ReadTimeout">
            <summary>
            Gets or sets a value, in miliseconds, that determines how long the stream will attempt to read before timing out.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.FileObjectStream.WriteTimeout">
            <summary>
            Gets or sets a value, in miliseconds, that determines how long the stream will attempt to write before timing out.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.FileObjectStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset" /> and (<paramref name="offset" /> + <paramref name="count" /> - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.FileObjectStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous read operation. (Consider using <see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" /> instead; see the Remarks section.)
            </summary>
            <param name="buffer">The buffer to read the data into.</param>
            <param name="offset">The byte offset in <paramref name="buffer" /> at which to begin writing data read from the stream.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <param name="callback">An optional asynchronous callback, to be called when the read is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>
            An <see cref="T:System.IAsyncResult" /> that represents the asynchronous read, which could still be pending.
            </returns>
            <exception cref="T:System.ArgumentNullException">buffer</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            offset
            or
            count
            </exception>
        </member>
        <member name="M:UnifiedAutomation.UaClient.FileObjectStream.EndRead(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous read to complete. (Consider using <see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" /> instead; see the Remarks section.)
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish.</param>
            <returns>
            The number of bytes read from the stream, between zero (0) and the number of bytes you requested. Streams return zero (0) only at the end of the stream, otherwise, they should block until at least one byte is available.
            </returns>
            <exception cref="T:System.ArgumentNullException">asyncResult</exception>
        </member>
        <member name="M:UnifiedAutomation.UaClient.FileObjectStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count" /> bytes from <paramref name="buffer" /> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.FileObjectStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous write operation. (Consider using <see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" /> instead; see the Remarks section.)
            </summary>
            <param name="buffer">The buffer to write data from.</param>
            <param name="offset">The byte offset in <paramref name="buffer" /> from which to begin writing.</param>
            <param name="count">The maximum number of bytes to write.</param>
            <param name="callback">An optional asynchronous callback, to be called when the write is complete.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous write request from other requests.</param>
            <returns>
            An IAsyncResult that represents the asynchronous write, which could still be pending.
            </returns>
            <exception cref="T:System.ArgumentNullException">buffer</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            offset
            or
            count
            </exception>
        </member>
        <member name="M:UnifiedAutomation.UaClient.FileObjectStream.EndWrite(System.IAsyncResult)">
            <summary>
            Ends an asynchronous write operation. (Consider using <see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" /> instead; see the Remarks section.)
            </summary>
            <param name="asyncResult">A reference to the outstanding asynchronous I/O request.</param>
            <exception cref="T:System.ArgumentNullException">asyncResult</exception>
        </member>
        <member name="M:UnifiedAutomation.UaClient.FileObjectStream.Close">
            <summary>
            Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream. Instead of calling this method, ensure that the stream is properly disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">FileObjectStream</exception>
        </member>
        <member name="M:UnifiedAutomation.UaClient.FileObjectStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.IO.Stream" /> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.FileObjectStream.Flush">
            <summary>
            When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.ObjectDisposedException">FileObjectStream</exception>
        </member>
        <member name="M:UnifiedAutomation.UaClient.FileObjectStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            When overridden in a derived class, sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the <paramref name="origin" /> parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin" /> indicating the reference point used to obtain the new position.</param>
            <returns>
            The new position within the current stream.
            </returns>
            <exception cref="T:System.ObjectDisposedException">FileObjectStream</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            offset
            or
            offset
            </exception>
            <exception cref="T:System.ArgumentException">origin</exception>
        </member>
        <member name="M:UnifiedAutomation.UaClient.FileObjectStream.SetLength(System.Int64)">
            <summary>
            When overridden in a derived class, sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.ObjectDisposedException">FileObjectStream</exception>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="T:UnifiedAutomation.UaClient.FileModel">
            <summary>
            Used to access a File object on an OPC UA Server.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.FileModel.FileNodeId">
            <summary>
            Gets or sets the NodeId of the file object.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.FileModel.FileLengthNodeId">
            <summary>
            Gets or sets the file length node identifier.
            </summary>
            <value>
            The file length node identifier.
            </value>
        </member>
        <member name="M:UnifiedAutomation.UaClient.FileModel.#ctor(UnifiedAutomation.UaBase.ApplicationInstance)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.FileModel"/> class.
            </summary>
            <param name="application">The application to use.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.FileModel.#ctor(UnifiedAutomation.UaClient.Session)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.FileModel"/> class.
            </summary>
            <param name="session">The session to use.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.FileModel.Open(UnifiedAutomation.UaBase.FileAccessModes)">
            <summary>
            Opens a file from the server.
            </summary>
            <param name="mode">How the file should be opened.</param>
            <returns>The handle object which must be passed to subsequent calls.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.FileModel.Open(UnifiedAutomation.UaBase.FileAccessModes,System.Int32)">
            <summary>
            Opens a file from the server.
            </summary>
            <param name="mode">How the file should be opened.</param>
            <param name="timeout">The timeout in milliseconds. Specify 0 to use the default timeout.</param>
            <returns>The handle object which must be passed to subsequent calls.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.FileModel.BeginOpen(UnifiedAutomation.UaBase.FileAccessModes,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an operation to Open a file from the server.
            </summary>
            <param name="mode">How the file should be opened.</param>
            <param name="timeout">The timeout in milliseconds. Specify 0 to use the default timeout.</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <returns>The object used to manage the state of the asynchronous operation.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.FileModel.EndOpen(System.IAsyncResult)">
            <summary>
            Completes an operation to Open a file from the server.
            </summary>
            <param name="result">The object used to manage the state of the asynchronous operation.</param>
            <returns>The number of bytes Open from the server.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.FileModel.Close(System.UInt32)">
            <summary>
            Closes a file from the server.
            </summary>
            <param name="fileHandle">The handle of the file to close.</param>
            <returns>The handle object which must be passed to subsequent calls.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.FileModel.Close(System.UInt32,System.Int32)">
            <summary>
            Closes a file from the server.
            </summary>
            <param name="fileHandle">The handle of the file to close.</param>
            <param name="timeout">The timeout in milliseconds. Specify 0 to use the default timeout.</param>
            <returns>The handle object which must be passed to subsequent calls.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.FileModel.BeginClose(System.UInt32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an operation to Close a file from the server.
            </summary>
            <param name="fileHandle">The handle of the file to close.</param>
            <param name="timeout">The timeout in milliseconds. Specify 0 to use the default timeout.</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <returns>The object used to manage the state of the asynchronous operation.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.FileModel.EndClose(System.IAsyncResult)">
            <summary>
            Completes an operation to Close a file from the server.
            </summary>
            <param name="result">The object used to manage the state of the asynchronous operation.</param>
            <returns>The number of bytes Close from the server.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.FileModel.GetLength">
            <summary>
            Gets the current length of a file on the server.
            </summary>
            <returns>The length. -1 if an error occurred.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.FileModel.GetLength(System.Int32)">
            <summary>
            Gets the current length of a file on the server.
            </summary>
            <param name="timeout">The timeout in milliseconds. Specify 0 to use the default timeout.</param>
            <returns>The length. -1 if an error occurred.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.FileModel.BeginGetLength(System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an operation to get the current length of a file on the server.
            </summary>
            <param name="timeout">The timeout in milliseconds. Specify 0 to use the default timeout.</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <returns>The object used to manage the state of the asynchronous operation.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.FileModel.EndGetLength(System.IAsyncResult)">
            <summary>
            Completes an operation to get the current position in a file on the server.
            </summary>
            <param name="result">The object used to manage the state of the asynchronous operation.</param>
            <returns>The length. -1 if an error occurred.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.FileModel.GetPosition(System.UInt32)">
            <summary>
            Gets the current position in a file on the server.
            </summary>
            <param name="fileHandle">The handle of the file to read.</param>
            <returns>The current position.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.FileModel.GetPosition(System.UInt32,System.Int32)">
            <summary>
            Gets the current position in a file on the server.
            </summary>
            <param name="fileHandle">The handle of the file to read.</param>
            <param name="timeout">The timeout in milliseconds. Specify 0 to use the default timeout.</param>
            <returns>The current position.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.FileModel.BeginGetPosition(System.UInt32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an operation to get the current position in a file on the server.
            </summary>
            <param name="fileHandle">The handle of the file to modify.</param>
            <param name="timeout">The timeout in milliseconds. Specify 0 to use the default timeout.</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <returns>The object used to manage the state of the asynchronous operation.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.FileModel.EndGetPosition(System.IAsyncResult)">
            <summary>
            Completes an operation to get the current position in a file on the server.
            </summary>
            <param name="result">The object used to manage the state of the asynchronous operation.</param>
            <returns>The current position.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.FileModel.SetPosition(System.UInt32,System.UInt64)">
            <summary>
            Sets the position in a file on the server.
            </summary>
            <param name="fileHandle">The handle of the file to modify.</param>
            <param name="position">The new position.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.FileModel.SetPosition(System.UInt32,System.UInt64,System.Int32)">
            <summary>
            Sets the position in a file on the server.
            </summary>
            <param name="fileHandle">The handle of the file to modify.</param>
            <param name="position">The new position.</param>
            <param name="timeout">The timeout in milliseconds. Specify 0 to use the default timeout.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.FileModel.BeginSetPosition(System.UInt32,System.UInt64,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an operation to change the position in a file on the server.
            </summary>
            <param name="fileHandle">The handle of the file to modify.</param>
            <param name="position">The new position.</param>
            <param name="timeout">The timeout in milliseconds. Specify 0 to use the default timeout.</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <returns>The object used to manage the state of the asynchronous operation.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.FileModel.EndSetPosition(System.IAsyncResult)">
            <summary>
            Completes an operation to SetPosition a file from the server.
            </summary>
            <param name="result">The object used to manage the state of the asynchronous operation.</param>
            <returns>The number of bytes SetPosition from the server.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.FileModel.Read(System.UInt32,System.Int32,System.Int32)">
            <summary>
            Reads a block of data from a the server.
            </summary>
            <param name="fileHandle">The file handle.</param>
            <param name="bytesToRead">The number of bytes to read.</param>
            <param name="timeout">The timeout in milliseconds. Specify 0 to use the default timeout.</param>
            <returns>
            The bytes returned. null or empty of at the end of file.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.FileModel.BeginRead(System.UInt32,System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an operation to read a block from a file on the server.
            </summary>
            <param name="fileHandle">The file handle.</param>
            <param name="bytesToRead">The number of bytes to read.</param>
            <param name="timeout">The timeout in milliseconds. Specify 0 to use the default timeout.</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <returns>The object used to manage the state of the asynchronous operation.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.FileModel.EndRead(System.IAsyncResult)">
            <summary>
            Completes an operation to read a block from a file on the server.
            </summary>
            <param name="result">The object used to manage the state of the asynchronous operation.</param>
            <returns>
            The bytes returned. null or empty of at the end of file. 
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.FileModel.Write(System.UInt32,System.Byte[],System.Int32)">
            <summary>
            Writes a block of data from to the server.
            </summary>
            <param name="fileHandle">The file handle.</param>
            <param name="bytesToWrite">The bytes to write.</param>
            <param name="timeout">The timeout in milliseconds. Specify 0 to use the default timeout.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.FileModel.BeginWrite(System.UInt32,System.Byte[],System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an operation to Write a block from a file on the server.
            </summary>
            <param name="fileHandle">The file handle.</param>
            <param name="bytesToWrite">The bytes to write.</param>
            <param name="timeout">The timeout in milliseconds. Specify 0 to use the default timeout.</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <returns>The object used to manage the state of the asynchronous operation.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.FileModel.EndWrite(System.IAsyncResult)">
            <summary>
            Completes an operation to Write a block from a file on the server.
            </summary>
            <param name="result">The object used to manage the state of the asynchronous operation.</param>
            <returns>
            The bytes returned. null or empty of at the end of file. 
            </returns>
        </member>
        <member name="T:UnifiedAutomation.UaClient.HistoryDataReadResult">
            @ingroup UaClientLibraryHelper
             <summary>
             A result for a history data read operation.
             </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.HistoryDataReadResult.StatusCode">
            <summary>
            Gets or sets the status code.
            </summary>
            <value>
            The status code.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.HistoryDataReadResult.ContinuationPoint">
            <summary>
            Gets or sets the continuation point.
            </summary>
            <value>
            The continuation point.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.HistoryDataReadResult.DataValues">
            <summary>
            Gets or sets the data values.
            </summary>
            <value>
            The data values.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.HistoryDataReadResult.ModificationInfo">
            <summary>
            Gets or sets the modification info.
            </summary>
            <value>
            The modification info.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaClient.HistoryDataUpdateResult">
            @ingroup UaClientLibraryHelper
             <summary>
             A result for a history data update operation.
             </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.HistoryDataUpdateResult.StatusCode">
            <summary>
            Gets or sets the status code.
            </summary>
            <value>
            The status code.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.HistoryDataUpdateResult.OperationResults">
            <summary>
            Gets or sets the results for the individual values.
            </summary>
            <value>
            The results for the individual values.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaClient.HistoryEventReadResult">
            @ingroup UaClientLibraryHelper
             <summary>
             A result for a history event read operation.
             </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.HistoryEventReadResult.StatusCode">
            <summary>
            Gets or sets the status code.
            </summary>
            <value>
            The status code.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.HistoryEventReadResult.ContinuationPoint">
            <summary>
            Gets or sets the continuation point.
            </summary>
            <value>
            The continuation point.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.HistoryEventReadResult.Events">
            <summary>
            Gets or sets the events
            </summary>
            <value>
            The events.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaClient.HistoryEventUpdateResult">
            @ingroup UaClientLibraryHelper
             <summary>
             A result for a history event update operation.
             </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.HistoryEventUpdateResult.StatusCode">
            <summary>
            Gets or sets the status code.
            </summary>
            <value>
            The status code.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.HistoryEventUpdateResult.OperationResults">
            <summary>
            Gets or sets the results for the individual values.
            </summary>
            <value>
            The results for the individual values.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaClient.ModelManager">
            @ingroup UaClientApi
             <summary>
             Provides access to a UA information model using classes with special attributes defined.
             </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.#ctor(UnifiedAutomation.UaBase.ApplicationInstance)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.ModelManager" /> class.
            </summary>
            <param name="application">The application.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.#ctor(UnifiedAutomation.UaClient.Session)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.ModelManager"/> class.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.#ctor(UnifiedAutomation.UaClient.Subscription)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.ModelManager"/> class.
            </summary>
            <param name="subscription">The subscription.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.Read(UnifiedAutomation.UaBase.NodeId,System.Object)">
            <summary>
            Reads the properties of instance of type which has a model mapping.
            </summary>
            <param name="rootId">The NodeId for the root of the instance in the Server address space.</param>
            <param name="instanceOrHandle">The instance or handle (an instance of the ModelHandle class).</param>
            <returns>The handle (the same as instanceOrHandle parameter if it was a ModelHandle).</returns>
            <remarks>
            When the method completes the properties of the instance are updated with the current values from the Server.
            If any error occurs for individual properties the LastErrors array in the handle is updated with the error code.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.BeginRead(UnifiedAutomation.UaBase.NodeId,System.Object,System.AsyncCallback,System.Object)">
            <summary>
            Begins an operation to read the properties of instance of type which has a model mapping.
            </summary>
            <param name="rootId">The NodeId for the root of the instance in the Server address space.</param>
            <param name="instanceOrHandle">The instance or handle (an instance of the ModelHandle class).</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <returns>The object used to manage the state of the asynchronous operation.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.EndRead(System.IAsyncResult)">
            <summary>
            Completes an operation to read properties of instance of type which has a model mapping.
            </summary>
            <param name="result">The object used to manage the state of the asynchronous operation.</param>
            <returns>The handle (the same as instanceOrHandle parameter if it was a ModelHandle).</returns>
            <remarks>
            When the method completes the properties of the instance are updated with the current values from the Server.
            If any error occurs for individual properties the LastErrors array in the handle is updated with the error code.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.Write(UnifiedAutomation.UaBase.NodeId,System.Object)">
            <summary>
            Writes the properties of instance of type which has a model mapping.
            </summary>
            <param name="rootId">The NodeId for the root of the instance in the Server address space.</param>
            <param name="instanceOrHandle">The instance or handle (an instance of the ModelHandle class).</param>
            <returns>The handle (the same as instanceOrHandle parameter if it was a ModelHandle).</returns>
            <remarks>
            This method updates the mapped properties on the Server with the current values stored in the instance.
            If any error occurs for individual properties the LastErrors array in the handle is updated with the error code.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.BeginWrite(UnifiedAutomation.UaBase.NodeId,System.Object,System.AsyncCallback,System.Object)">
            <summary>
            Begins an operation to write the properties of instance of type which has a model mapping.
            </summary>
            <param name="rootId">The NodeId for the root of the instance in the Server address space.</param>
            <param name="instanceOrHandle">The instance or handle (an instance of the ModelHandle class).</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <returns>The object used to manage the state of the asynchronous operation.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.EndWrite(System.IAsyncResult)">
            <summary>
            Completes an operation to write the properties of instance of type which has a model mapping.
            </summary>
            <param name="result">The object used to manage the state of the asynchronous operation.</param>
            <returns>The handle (the same as instanceOrHandle parameter if it was a ModelHandle).</returns>
            <remarks>
            This method updates the mapped properties on the Server with the current values stored in the instance.
            If any error occurs for individual properties the LastErrors array in the handle is updated with the error code.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.Subscribe(UnifiedAutomation.UaBase.NodeId,System.Object,System.Double)">
            <summary>
            Subscribes the properties of instance of type which has a model mapping.
            </summary>
            <param name="rootId">The NodeId for the root of the instance in the Server address space.</param>
            <param name="instanceOrHandle">The instance or handle (an instance of the ModelHandle class).</param>
            <param name="samplingInterval">The sampling interval in milliseconds.</param>
            <returns>
            The handle for the newly created subscription.
            </returns>
            <remarks>
            When the method completes the properties of the instance are updated whenever the Server reports a data change.
            These data changes are reported with the ObjectChanged event.
            If any error occurs creating MonitoredItems for individual properties the LastErrors array in the handle is updated with the error code.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.BeginSubscribe(UnifiedAutomation.UaBase.NodeId,System.Object,System.Double,System.AsyncCallback,System.Object)">
            <summary>
            Begins an operation to Subscribe the properties of instance of type which has a model mapping.
            </summary>
            <param name="rootId">The NodeId for the root of the instance in the Server address space.</param>
            <param name="instanceOrHandle">The instance or handle (an instance of the ModelHandle class).</param>
            <param name="samplingInterval">The sampling interval in milliseconds.</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <returns>The object used to manage the state of the asynchronous operation.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.EndSubscribe(System.IAsyncResult)">
            <summary>
            Completes an operation to Subscribe properties of instance of type which has a model mapping.
            </summary>
            <param name="result">The object used to manage the state of the asynchronous operation.</param>
            <returns>The handle for the newly created subscription.</returns>
            <remarks>
            When the method completes the properties of the instance are updated whenever the Server reports a data change.
            These data changes are reported with the ObjectChanged event.
            If any error occurs creating MonitoredItems for individual properties the LastErrors array in the handle is updated with the error code.
            </remarks>
        </member>
        <member name="E:UnifiedAutomation.UaClient.ModelManager.ObjectChanged">
            <summary>
            Raised when the value of one or more components of an object changes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.Unsubscribe(UnifiedAutomation.UaClient.ModelSubscription)">
            <summary>
            Unsubscribes the properties of instance of type which has a model mapping.
            </summary>
            <param name="subscriptionHandle">The handle returned from the Subscribe method.</param>
            <returns>
            The errors for the individual monitored items created for mapped object.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.BeginUnsubscribe(UnifiedAutomation.UaClient.ModelSubscription,System.AsyncCallback,System.Object)">
            <summary>
            Begins an operation to unsubscribe the properties of instance of type which has a model mapping.
            </summary>
            <param name="subscriptionHandle">The handle returned from the Subscribe method.</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <returns>The object used to manage the state of the asynchronous operation.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.EndUnsubscribe(System.IAsyncResult)">
            <summary>
            Completes an operation to unsubscribe to properties of instance of type which has a model mapping.
            </summary>
            <param name="result">The object used to manage the state of the asynchronous operation.</param>
            <returns>
            The errors for the individual monitored items created for mapped object.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.GetTypeDescription(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaClient.TypeDescriptionSelection,UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Begins the get method description.
            </summary>
            <param name="typeId">The type id.</param>
            <param name="selection">The selection.</param>
            <param name="settings">The settings.</param>
            <returns>
            The async results.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.BeginGetTypeDescription(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaClient.TypeDescriptionSelection,UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Begins the get method description.
            </summary>
            <param name="typeId">The type id.</param>
            <param name="selection">The selection.</param>
            <param name="settings">The settings.</param>
            <param name="callback">The callback.</param>
            <param name="userData">The user data.</param>
            <returns>
            The async results.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.EndGetTypeDescription(System.IAsyncResult)">
            <summary>
            Ends the get method description.
            </summary>
            <param name="result">The result.</param>
            <returns>The method description.</returns>
        </member>
        <member name="T:UnifiedAutomation.UaClient.ModelManager.GetTypeDescriptionAsyncResult">
            <summary>
            Stores state information for asynchronous read operations.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.BeginBrowseSuperTypes(UnifiedAutomation.UaClient.ModelManager.GetTypeDescriptionAsyncResult)">
            <summary>
            Called when an asynchronous read operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.OnBrowseSuperTypesComplete(System.IAsyncResult)">
            <summary>
            Called when an asynchronous read operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.ConstructType(UnifiedAutomation.UaClient.ModelManager.GetTypeDescriptionAsyncResult)">
            <summary>
            Called when an asynchronous read operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.OnBrowseReadTypeAttributesComplete(System.IAsyncResult)">
            <summary>
            Called when an asynchronous read operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.BeginBrowseInstanceDeclarationsForType(UnifiedAutomation.UaClient.ModelManager.GetTypeDescriptionAsyncResult)">
            <summary>
            Called when an asynchronous read operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.BeginBrowseInstanceDeclarations(UnifiedAutomation.UaClient.ModelManager.GetTypeDescriptionAsyncResult)">
            <summary>
            Called when an asynchronous read operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.OnBrowseInstanceDeclarationsComplete(System.IAsyncResult)">
            <summary>
            Called when an asynchronous read operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.BeginBrowseModellingRules(UnifiedAutomation.UaClient.ModelManager.GetTypeDescriptionAsyncResult)">
            <summary>
            Called when an asynchronous read operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.OnBrowseModellingRulesComplete(System.IAsyncResult)">
            <summary>
            Called when an asynchronous read operation completes.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.GetMethodDescription(UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Begins the get method description.
            </summary>
            <param name="methodId">The method id.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.GetMethodDescription(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Begins the get method description.
            </summary>
            <param name="methodId">The method id.</param>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.GetMethodDescription(UnifiedAutomation.UaBase.NodeId,System.Collections.Generic.IList{UnifiedAutomation.UaBase.QualifiedName},UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Begins the get method description.
            </summary>
            <param name="objectId">The object id.</param>
            <param name="browsePath">The browse path.</param>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.BeginGetMethodDescription(UnifiedAutomation.UaBase.NodeId,System.AsyncCallback,System.Object)">
            <summary>
            Begins the get method description.
            </summary>
            <param name="methodId">The method id.</param>
            <param name="callback">The callback.</param>
            <param name="userData">The user data.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.BeginGetMethodDescription(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Begins the get method description.
            </summary>
            <param name="methodId">The method id.</param>
            <param name="settings">The settings.</param>
            <param name="callback">The callback.</param>
            <param name="userData">The user data.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.BeginGetMethodDescription(UnifiedAutomation.UaBase.NodeId,System.Collections.Generic.IList{UnifiedAutomation.UaBase.QualifiedName},UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Begins the get method description.
            </summary>
            <param name="startingNodeId">The starting node id.</param>
            <param name="browsePath">The browse path.</param>
            <param name="settings">The settings.</param>
            <param name="callback">The callback.</param>
            <param name="userData">The user data.</param>
            <returns>
            The async results.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.EndGetMethodDescription(System.IAsyncResult)">
            <summary>
            Ends the get method description.
            </summary>
            <param name="result">The result.</param>
            <returns>The method description.</returns>
        </member>
        <member name="T:UnifiedAutomation.UaClient.ModelManager.GetMethodDescriptionAsyncResult">
            <summary>
            Stores state information for asynchronous read operations.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.OnGetMethodDescriptionsTranslateComplete(System.IAsyncResult)">
            <summary>
            Called when an asynchronous read operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelManager.OnGetMethodDescriptionsReadComplete(System.IAsyncResult)">
            <summary>
            Called when an asynchronous read operation completes.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.ModelSubscription">
            <summary>
            A class that represents a subscription to a model mapped object.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.ModelSubscription.ModelHandle">
            <summary>
            The handle for the model mapped object.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.ModelSubscription.MonitoredItems">
            <summary>
            The monitored items that were created.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.ModelObjectChangedEventArgs">
            <summary>
            A class that stores the argument passed to an ObjectChanged event.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ModelObjectChangedEventArgs.#ctor(UnifiedAutomation.UaBase.ModelHandle,System.Collections.Generic.IList{UnifiedAutomation.UaClient.MonitoredItem})">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.ModelObjectChangedEventArgs"/> class.
            </summary>
            <param name="handle">The handle.</param>
            <param name="monitoredItems">The monitored items.</param>
        </member>
        <member name="P:UnifiedAutomation.UaClient.ModelObjectChangedEventArgs.ModelHandle">
            <summary>
            Gets the handle for the model mapped object.
            </summary>
            <value>
            The handle for the model mapped object.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.ModelObjectChangedEventArgs.MonitoredItems">
            <summary>
            Gets the monitored items for the components that changed.
            </summary>
            <value>
            The monitored items for the components that changed.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaClient.CertificateDirectoryClient">
            <summary>
            Used to access the CertificateDirectoryClient features of a GDS.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CertificateDirectoryClient.#ctor(UnifiedAutomation.UaBase.ApplicationInstance)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.CertificateDirectoryClient"/> class.
            </summary>
            <param name="application">The application to use.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CertificateDirectoryClient.#ctor(UnifiedAutomation.UaClient.Session)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.CertificateDirectoryClient"/> class.
            </summary>
            <param name="session">The session to use.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CertificateDirectoryClient.FindApplications(System.String)">
            <summary>
            Finds the application records in the GDS with the specified Application URI.
            </summary>
            <param name="applicationUri">The application URI.</param>
            <returns>All records in the GDS which have the specified Application URI.</returns>
            <exception cref="T:System.ArgumentNullException">applicationUri</exception>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CertificateDirectoryClient.BeginFindApplications(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an operation to finds the application records in the GDS with the specified Application URI.
            </summary>
            <param name="applicationUri">The application URI.</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <returns>The object used to manage the state of the asychronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">applicationUri</exception>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CertificateDirectoryClient.EndFindApplications(System.IAsyncResult)">
            <summary>
            Completes an operation to finds the application records in the GDS with the specified Application URI.
            </summary>
            <param name="result">The object used to manage the state of the asychronous operation.</param>
            <returns>All records in the GDS which have the specified Application URI.</returns>
            <exception cref="T:System.ArgumentNullException">result</exception>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CertificateDirectoryClient.GetApplication(UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Registers an application with the GDS.
            </summary>
            <param name="applicationId">The application identifier.</param>
            <returns>
            The unique identifier for the record.
            </returns>
            <exception cref="T:System.ArgumentNullException">applicationId</exception>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CertificateDirectoryClient.BeginGetApplication(UnifiedAutomation.UaBase.NodeId,System.AsyncCallback,System.Object)">
            <summary>
            Begins an operation to register an application with the GDS.
            </summary>
            <param name="applicationId">The application identifier.</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <returns>
            The object used to manage the state of the asychronous operation.
            </returns>
            <exception cref="T:System.ArgumentNullException">applicationId</exception>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CertificateDirectoryClient.EndGetApplication(System.IAsyncResult)">
            <summary>
            Completes  an operation to register an application with the GDS.
            </summary>
            <param name="result">The object used to manage the state of the asychronous operation..</param>
            <returns>The unique identifier assigned by the GDS to the application.</returns>
            <exception cref="T:System.ArgumentNullException">result</exception>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CertificateDirectoryClient.RegisterApplication(UnifiedAutomation.UaGds.ApplicationRecordDataType)">
            <summary>
            Registers an application with the GDS.
            </summary>
            <param name="application">The application information to store in the GDS.</param>
            <returns>The unique identifier assigned by the GDS to the application.</returns>
            <exception cref="T:System.ArgumentNullException">application</exception>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CertificateDirectoryClient.BeginRegisterApplication(UnifiedAutomation.UaGds.ApplicationRecordDataType,System.AsyncCallback,System.Object)">
            <summary>
            Begins an operation to register an application with the GDS.
            </summary>
            <param name="application">The application information to store in the GDS.</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <returns>The object used to manage the state of the asychronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">application</exception>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CertificateDirectoryClient.EndRegisterApplication(System.IAsyncResult)">
            <summary>
            Completes  an operation to register an application with the GDS.
            </summary>
            <param name="result">The object used to manage the state of the asychronous operation..</param>
            <returns>The unique identifier assigned by the GDS to the application.</returns>
            <exception cref="T:System.ArgumentNullException">result</exception>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CertificateDirectoryClient.UpdateApplication(UnifiedAutomation.UaGds.ApplicationRecordDataType)">
            <summary>
            Updates the application information stored in the GDS.
            </summary>
            <param name="application">The application information to store in the GDS.</param>
            <exception cref="T:System.ArgumentNullException">application</exception>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CertificateDirectoryClient.BeginUpdateApplication(UnifiedAutomation.UaGds.ApplicationRecordDataType,System.AsyncCallback,System.Object)">
            <summary>
            Begins an operation to update the application in the GDS.
            </summary>
            <param name="application">The application information to store in the GDS.</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <returns>The object used to manage the state of the asychronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">application</exception>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CertificateDirectoryClient.EndUpdateApplication(System.IAsyncResult)">
            <summary>
            Completes an operation to update the application in the GDS.
            </summary>
            <param name="result">The object used to manage the state of the asychronous operation..</param>
            <exception cref="T:System.ArgumentNullException">result</exception>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CertificateDirectoryClient.UnregisterApplication(UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Unegisters an application with the GDS.
            </summary>
            <param name="applicationId">The unique identifier assigned by the HDS to the application.</param>
            <exception cref="T:System.ArgumentNullException">applicationId</exception>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CertificateDirectoryClient.BeginUnregisterApplication(UnifiedAutomation.UaBase.NodeId,System.AsyncCallback,System.Object)">
            <summary>
            Begins an operation to unregister an application with the GDS.
            </summary>
            <param name="applicationId">The unique identifier assigned by the HDS to the application.</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <returns>The object used to manage the state of the asychronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">applicationId</exception>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CertificateDirectoryClient.EndUnregisterApplication(System.IAsyncResult)">
            <summary>
            Completes an operation to unregister the application in the GDS.
            </summary>
            <param name="result">The object used to manage the state of the asychronous operation..</param>
            <exception cref="T:System.ArgumentNullException">result</exception>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CertificateDirectoryClient.StartSigningRequest(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,System.Byte[])">
            <summary>
            Requests that the GDS create a new certificate based on the old one which is signed by a CA managed by the GDS.
            </summary>
            <param name="applicationId">The application identifier assigned by the GDS to the application.</param>
            <param name="certificateGroupId">The certificate group used to create the new certificate. If null the DefaultApplicationGroup is used</param>
            <param name="certificateTypeId">The subtype of Id which indicates the kind of certificate to create (e.g. Application Instance or HTTPS). If null the default for the certificate group is used.</param>
            <param name="certificateRequest">The certificate signing request (a PKCS#10 blob).</param>
            <returns>
            The NodeId assigned to the request. It must be passed to FinishRequest method to retrieve the Certificate.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CertificateDirectoryClient.BeginStartSigningRequest(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,System.Byte[],System.AsyncCallback,System.Object)">
            <summary>
            Begins a requests that the GDS create a new certificate based on the old one which is signed by a CA managed by the GDS.
            </summary>
            <param name="applicationId">The application identifier assigned by the GDS to the application.</param>
            <param name="certificateGroupId">The certificate group used to create the new certificate. If null the DefaultApplicationGroup is used</param>
            <param name="certificateTypeId">The subtype of Id which indicates the kind of certificate to create (e.g. Application Instance or HTTPS). If null the default for the certificate group is used.</param>
            <param name="certificateRequest">The certificate which is used as a template for the new certificate. The public key is copied from this certificate.</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <returns>The object used to manage the state of the asychronous operation.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CertificateDirectoryClient.EndStartSigningRequest(System.IAsyncResult)">
            <summary>
            Completes a request that the GDS create a new certificate based on the old one which is signed by a CA managed by the GDS.
            </summary>
            <param name="result">The object used to manage the state of the asychronous operation.</param>
            <returns>
            The NodeId assigned to the request. It must be passed to FinishRequest method to retrieve the Certificate.
            </returns>
            <remarks>This overload must be called if the PollingInterval passed to the begin method is 0.</remarks>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CertificateDirectoryClient.StartNewKeyPairRequest(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Requests that the GDS create a new certificate.
            </summary>
            <param name="applicationId">The application identifier assigned by the GDS to the application.</param>
            <param name="certificateGroupId">The certificate group used to create the new certificate. If null the DefaultApplicationGroup is used</param>
            <param name="certificateTypeId">The subtype of Id which indicates the kind of certificate to create (e.g. Application Instance or HTTPS). If null the default for the certificate group is used.</param>
            <returns>
            The NodeId assigned to the request. It must be passed to FinishRequest method to retrieve the Certificate.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CertificateDirectoryClient.StartNewKeyPairRequest(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,System.String,System.Collections.Generic.IList{System.String},System.String,System.String)">
            <summary>
            Requests that the GDS create a new certificate.
            </summary>
            <param name="applicationId">The application identifier assigned by the GDS to the application.</param>
            <param name="certificateGroupId">The certificate group used to create the new certificate. If null the DefaultApplicationGroup is used</param>
            <param name="certificateTypeId">The subtype of Id which indicates the kind of certificate to create (e.g. Application Instance or HTTPS). If null the default for the certificate group is used.</param>
            <param name="subjectName">The subject name for the certificate. The format is a distingushed name with '/' seperating the fields. e.g. 'CN=MyApp/O=MyCompany/DC=MyMachine'. If null a suitable default is created.</param>
            <param name="domainNames">The list of domains to embed in the certificate. If null the URL registered with GDS are used.</param>
            <param name="privateKeyFormat">The format of the private key. Most GDS implementations should support PFX and PEM.</param>
            <param name="privateKeyPassword">The password used to encrypt the private key. If null no encryption is done.</param>
            <returns>
            The NodeId assigned to the request. It must be passed to FinishRequest method to retrieve the Certificate.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CertificateDirectoryClient.BeginStartNewKeyPairRequest(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,System.AsyncCallback,System.Object)">
            <summary>
            Begins a request that the GDS create a new certificate.
            </summary>
            <param name="applicationId">The application identifier assigned by the GDS to the application.</param>
            <param name="certificateGroupId">The certificate group used to create the new certificate. If null the DefaultApplicationGroup is used</param>
            <param name="certificateTypeId">The subtype of Id which indicates the kind of certificate to create (e.g. Application Instance or HTTPS). If null the default for the certificate group is used.</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <returns>The object used to manage the state of the asychronous operation.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CertificateDirectoryClient.BeginStartNewKeyPairRequest(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,System.String,System.Collections.Generic.IList{System.String},System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins a request that the GDS create a new certificate.
            </summary>
            <param name="applicationId">The application identifier assigned by the GDS to the application.</param>
            <param name="certificateGroupId">The certificate group used to create the new certificate. If null the DefaultApplicationGroup is used</param>
            <param name="certificateTypeId">The subtype of Id which indicates the kind of certificate to create (e.g. Application Instance or HTTPS). If null the default for the certificate group is used.</param>
            <param name="subjectName">The subject name for the certificate. The format is a distingushed name with '/' seperating the fields. e.g. 'CN=MyApp/O=MyCompany/DC=MyMachine'. If null a suitable default is created.</param>
            <param name="domainNames">The list of domains to embed in the certificate. If null the URL registered with GDS are used.</param>
            <param name="privateKeyFormat">The format of the private key. Most GDS implementations should support PFX and PEM.</param>
            <param name="privateKeyPassword">The password used to encrypt the private key. If null no encryption is done.</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <returns>The object used to manage the state of the asychronous operation.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CertificateDirectoryClient.EndStartNewKeyPairRequest(System.IAsyncResult)">
            <summary>
            Completes a request that the GDS create a new certificate.
            </summary>
            <param name="result">The object used to manage the state of the asychronous operation.</param>
            <returns>
            The NodeId assigned to the request. It must be passed to FinishRequest method to retrieve the Certificate.
            </returns>
            <remarks>This overload must be called if the PollingInterval passed to the begin method is 0.</remarks>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CertificateDirectoryClient.FinishRequest(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,System.Int32,System.Byte[]@,UnifiedAutomation.UaBase.ICertificate[]@)">
            <summary>
            Checks the status of a request created by StartSigningRequest, StartNewKeyPairRequest or RenewCertificate.
            </summary>
            <param name="applicationId">The application identifier assigned by the GDS to the application.</param>
            <param name="requestId">The request identifier return from the StartSigningRequest, StartNewKeyPairRequest or RenewCertificate call.</param>
            <param name="pollingInterval">How frequently to check for a response. 0 means no check is done.</param>
            <param name="privateKey">The private key associated with the certificate (if one was requested).</param>
            <param name="issuerCertificates">The CA certificates necessary to validate the new certificate.</param>
            <returns>The new certificate.</returns>
            <remarks>
            This method returns null if the certificate is not ready. The caller must wait and call this method again.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CertificateDirectoryClient.BeginFinishRequest(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins a check of the status of a request created by StartSigningRequest, StartNewKeyPairRequest or RenewCertificate.
            </summary>
            <param name="applicationId">The application identifier assigned by the GDS to the application.</param>
            <param name="requestId">The request identifier return from the StartSigningRequest, StartNewKeyPairRequest or RenewCertificate call.</param>
            <param name="pollingInterval">How frequently to check for a response. 0 means no check is done.</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <returns>
            The object used to manage the state of the asychronous operation.
            </returns>
            <remarks>
            This method returns null if the certificate is not ready. The caller must wait and call this method again.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CertificateDirectoryClient.EndFinishRequest(System.IAsyncResult,System.Byte[]@,UnifiedAutomation.UaBase.ICertificate[]@)">
            <summary>
            Completes a check of the status of a request created by StartSigningRequest, StartNewKeyPairRequest or RenewCertificate.
            </summary>
            <param name="result">The object used to manage the state of the asychronous operation.</param>
            <param name="privateKey">The private key associated with the certificate (if one was requested).</param>
            <param name="issuerCertificates">The CA certificates necessary to validate the new certificate.</param>
            <returns>The new certificate.</returns>
            <remarks>
            This method returns null if the certificate is not ready. The caller must wait and call the BeginFinishRequest method again.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CertificateDirectoryClient.GetCertificateGroups(UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Gets the certificate groups assigned to the application by the GDS.
            </summary>
            <param name="applicationId">The application identifier assigned by the GDS to the application.</param>
            <returns>The list of certificate group ids.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CertificateDirectoryClient.BeginGetCertificateGroups(UnifiedAutomation.UaBase.NodeId,System.AsyncCallback,System.Object)">
            <summary>
            Begins a request to get the id of the trust list assigned to the application by the GDS.
            </summary>
            <param name="applicationId">The application identifier assigned by the GDS to the application.</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <returns>
            The object used to manage the state of the asychronous operation.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CertificateDirectoryClient.EndGetCertificateGroups(System.IAsyncResult)">
            <summary>
            Completes a request to get the id of the trust list assigned to the application by the GDS.
            </summary>
            <param name="result">The object used to manage the state of the asychronous operation.</param>
            <returns>The trust list id.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CertificateDirectoryClient.GetTrustListId(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Gets the id of the trust list assigned to the application by the GDS.
            </summary>
            <param name="applicationId">The application identifier assigned by the GDS to the application.</param>
            <param name="certificateGroupId">The certificate group which owns the trust list to return. If null the DefaultApplicationGroup is used.</param>
            <returns>The trust list id.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CertificateDirectoryClient.BeginGetTrustListId(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,System.AsyncCallback,System.Object)">
            <summary>
            Begins a request to get the id of the trust list assigned to the application by the GDS.
            </summary>
            <param name="applicationId">The application identifier assigned by the GDS to the application.</param>
            <param name="certificateGroupId">The certificate group which owns the trust list to return. If null the DefaultApplicationGroup is used.</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <returns>
            The object used to manage the state of the asychronous operation.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CertificateDirectoryClient.EndGetTrustListId(System.IAsyncResult)">
            <summary>
            Completes a request to get the id of the trust list assigned to the application by the GDS.
            </summary>
            <param name="result">The object used to manage the state of the asychronous operation.</param>
            <returns>The trust list id.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CertificateDirectoryClient.GetTrustList(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.TrustListMasks)">
            <summary>
            Gets the trust list assigned to the application by the GDS.
            </summary>
            <param name="applicationId">The application identifier assigned by the GDS to the application.</param>
            <param name="certificateGroupId">The certificate group which owns the trust list to return. If null the DefaultApplicationGroup is used.</param>
            <param name="masks">The masks which specify what parts of the trust list should be returned.</param>
            <returns>The trust list.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CertificateDirectoryClient.BeginGetTrustList(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.TrustListMasks,System.AsyncCallback,System.Object)">
            <summary>
            Begins a request to get the trust list assigned to the application by the GDS.
            </summary>
            <param name="applicationId">The application identifier assigned by the GDS to the application.</param>
            <param name="certificateGroupId">The certificate group which owns the trust list to return. If null the DefaultApplicationGroup is used.</param>
            <param name="masks">The masks which specify what parts of the trust list should be returned.</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <returns>
            The object used to manage the state of the asychronous operation.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CertificateDirectoryClient.EndGetTrustList(System.IAsyncResult)">
            <summary>
            Completes a request to get the trust list assigned to the application by the GDS.
            </summary>
            <param name="result">The object used to manage the state of the asychronous operation.</param>
            <returns>The trust list.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CertificateDirectoryClient.GetCertificateStatus(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Gets the status of the certificate.
            </summary>
            <param name="applicationId">The application identifier assigned by the GDS to the application.</param>       
            <param name="certificateGroupId">The certificate group used to create the new certificate. If null the DefaultApplicationGroup is used</param>
            <param name="certificateTypeId">The subtype of Id which indicates the kind of certificate to create (e.g. Application Instance or HTTPS). If null the default for the certificate group is used.</param>
            <returns>TRUE if the certificate needs to be updated; FALSE otherwise.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CertificateDirectoryClient.BeginGetCertificateStatus(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,System.AsyncCallback,System.Object)">
            <summary>
            Begins a request the status of the certificate.
            </summary>
            <param name="applicationId">The application identifier assigned by the GDS to the application.</param>
            <param name="certificateGroupId">The certificate group used to create the new certificate. If null the DefaultApplicationGroup is used</param>
            <param name="certificateTypeId">The subtype of Id which indicates the kind of certificate to create (e.g. Application Instance or HTTPS). If null the default for the certificate group is used.</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <returns>
            The object used to manage the state of the asychronous operation.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CertificateDirectoryClient.EndGetCertificateStatus(System.IAsyncResult)">
            <summary>
            Completes a request to get the id of the trust list assigned to the application by the GDS.
            </summary>
            <param name="result">The object used to manage the state of the asychronous operation.</param>
            <returns>TRUE if the certificate needs to be updated; FALSE otherwise.</returns>
        </member>
        <member name="T:UnifiedAutomation.UaClient.CertificateRequestPollingIntervals">
            <summary>
            The polling intervals (in seconds) that can be used when requesting certificates.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.CertificateRequestPollingIntervals.NoPolling">
            <summary>
            The no polling. Means the FinishRequest must be called explicitly.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.CertificateRequestPollingIntervals.Default">
            <summary>
            Uses the default request polling interval (1s).
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.ServerConfigurationClient">
            <summary>
            Used to access the ServerConfigurationClient features of an OPC UA Server.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ServerConfigurationClient.#ctor(UnifiedAutomation.UaBase.ApplicationInstance)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.ServerConfigurationClient"/> class.
            </summary>
            <param name="application">The application to use.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ServerConfigurationClient.#ctor(UnifiedAutomation.UaClient.Session)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.ServerConfigurationClient"/> class.
            </summary>
            <param name="session">The session to use.</param>
        </member>
        <member name="P:UnifiedAutomation.UaClient.ServerConfigurationClient.Endpoint">
            <summary>
            Gets the endpoint of the server being managed.
            </summary>
            <value>
            The endpoint.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.ServerConfigurationClient.ApplicationRecord">
            <summary>
            Gets the application record.
            </summary>
            <value>
            The application record.
            </value>
            <remarks>
            This property is updated when ReadServerInfo is called.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaClient.ServerConfigurationClient.SupportedPrivateKeyFormats">
            <summary>
            Gets the supported private key formats.
            </summary>
            <value>
            The supported private key formats.
            </value>
            <remarks>
            This property is updated when ReadServerInfo is called.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ServerConfigurationClient.ReadServerInfo">
            <summary>
            Reads the application metadata from the server.
            </summary>
            <returns>
            The application metadata in a structure that can be passed to a GDS.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ServerConfigurationClient.BeginReadServerInfo(System.AsyncCallback,System.Object)">
            <summary>
            Begins an operation to read the application metadata from the server.
            </summary>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <returns>The object used to manage the state of the asychronous operation.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ServerConfigurationClient.EndReadServerInfo(System.IAsyncResult)">
            <summary>
            Completes an operation to read the application metadata from the server.
            </summary>
            <param name="result">The object used to manage the state of the asychronous operation.</param>
            <returns>
            The application metadata in a structure that can be passed to a GDS.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ServerConfigurationClient.UpdateCertificate(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.ICertificate,UnifiedAutomation.UaBase.ICertificate[],System.String,System.Byte[])">
            <summary>
            Updates the certificate used by the server.
            </summary>
            <param name="certificateGroupId">The id of the certificate group.</param>
            <param name="certificateTypeId">The id of the certificate type in the certificate group.</param>
            <param name="certificate">The certificate.</param>
            <param name="issuerCertificates">The issuer certificates.</param>
            <param name="privateKeyFormat">The private key format. Must be one of the formats specified by SupportedPrivateKeyFormats. Set to null if the private key is not provided.</param>
            <param name="privateKey">The private key associated with the certificate. If null the server must keep using the private key it already has.</param>
            <returns>
            True if the ApplyChanges method must be called to apply the changes.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ServerConfigurationClient.BeginUpdateCertificate(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.ICertificate,UnifiedAutomation.UaBase.ICertificate[],System.String,System.Byte[],System.AsyncCallback,System.Object)">
            <summary>
            Begins an operation to update the certificate used by the server.
            </summary>
            <param name="certificateGroupId">The id of the certificate group.</param>
            <param name="certificateTypeId">The id of the certificate type in the certificate group.</param>
            <param name="certificate">The certificate.</param>
            <param name="issuerCertificates">The issuer certificates.</param>
            <param name="privateKeyFormat">The private key format. Must be one of the formats specified by SupportedPrivateKeyFormats. Set to null if the private key is not provided.</param>
            <param name="privateKey">The private key associated with the certificate. If null the server must keep using the private key it already has.</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <returns>
            The object used to manage the state of the asychronous operation.
            </returns>
            <exception cref="T:System.ArgumentNullException">certificate</exception>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ServerConfigurationClient.EndUpdateCertificate(System.IAsyncResult)">
            <summary>
            Completes an operation to update the certificate used by the server.
            </summary>
            <param name="result">The object used to manage the state of the asychronous operation.</param>
            <returns>True if the ApplyChanges method must be called to apply the changes.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ServerConfigurationClient.ApplyChanges">
             <summary>
             ApplyChangess the server.
             </summary>
             <remarks>
             The exact effect of this method depends on the server.
             Some server may simply close and re-open their endpoints which means any Sessions are still alive.
             Other servers will close all Sessions and ApplyChanges.
            
             This method disconnects from the server before returning since the server is supposed to be ApplyChangesing.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ServerConfigurationClient.BeginApplyChanges(System.AsyncCallback,System.Object)">
            <summary>
            Begins an operation to ApplyChanges the server.
            </summary>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <returns>The object used to manage the state of the asychronous operation.</returns>
            <remarks>
            The exact effect of this method depends on the server.
            Some server may simply close and re-open their endpoints which means any Sessions are still alive.
            Other servers will close all Sessions and ApplyChanges.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ServerConfigurationClient.EndApplyChanges(System.IAsyncResult)">
            <summary>
            Completes an operation to ApplyChanges the server.
            </summary>
            <param name="result">The object used to manage the state of the asychronous operation.</param>
            <remarks>
            This method disconnects from the server before returning since the server is supposed to be ApplyChangesing.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ServerConfigurationClient.CreateSigningRequest(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,System.String,System.Boolean,System.Byte[])">
            <summary>
            Create a new certificate request.
            </summary>
            <param name="certificateGroupId">The id of the certificate group.</param>
            <param name="certificateTypeId">The id of the certificate type in the certificate group.</param>
            <param name="subjectName">Name of the subject.</param>
            <param name="regeneratePrivateKey">if set to <c>true</c> then regenerate the private key.</param>
            <param name="nonce">The nonce.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ServerConfigurationClient.BeginCreateSigningRequest(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,System.String,System.Boolean,System.Byte[],System.AsyncCallback,System.Object)">
            <summary>
            Begins an operation to CreateSigningRequest the server.
            </summary>
            <param name="certificateGroupId">The id of the certificate group.</param>
            <param name="certificateTypeId">The id of the certificate type in the certificate group.</param>
            <param name="subjectName">Name of the subject.</param>
            <param name="regeneratePrivateKey">if set to <c>true</c> then regenerate the private key.</param>
            <param name="nonce">The nonce.</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <returns>
            The object used to manage the state of the asychronous operation.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ServerConfigurationClient.EndCreateSigningRequest(System.IAsyncResult)">
            <summary>
            Ends the create CSR.
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">result</exception>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ServerConfigurationClient.UpdateTrustList(UnifiedAutomation.UaBase.TrustListDataType)">
            <summary>
            Updates the application certificate trust list used by the server.
            </summary>
            <param name="trustList">The trust list.</param>
            <returns>True if the ApplyChanges method must be called to apply the changes.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ServerConfigurationClient.BeginUpdateTrustList(UnifiedAutomation.UaBase.TrustListDataType,System.AsyncCallback,System.Object)">
            <summary>
            Begins an operation to update the application certificate trust list used by the server.
            </summary>
            <param name="trustList">The trust list.</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <returns>The object used to manage the state of the asychronous operation.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ServerConfigurationClient.EndUpdateTrustList(System.IAsyncResult)">
            <summary>
            Completes an operation to update the application certificate trust list used by the server.
            </summary>
            <param name="result">The object used to manage the state of the asychronous operation.</param>
            <returns>True if the ApplyChanges method must be called to apply the changes.</returns>
        </member>
        <member name="T:UnifiedAutomation.UaClient.SessionMethodHelper">
            <summary>
            This is a base class that manages a session used to call methods on the server.
            </summary>
            <remarks>
            It can be used to create subclasses that provide a proper API for method calls.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SessionMethodHelper.#ctor(UnifiedAutomation.UaBase.ApplicationInstance)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.SessionMethodHelper" /> class.
            </summary>
            <param name="application">The application.</param>
            <exception cref="T:System.ArgumentNullException">application</exception>
            <remarks>Any session created will be disposed when the FileModel is disposed.</remarks>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SessionMethodHelper.#ctor(UnifiedAutomation.UaClient.Session)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.SessionMethodHelper" /> class.
            </summary>
            <param name="session">The session.</param>
            <exception cref="T:System.ArgumentNullException">session</exception>
            <remarks>The session will not be disposed when the FileModel is disposed.</remarks>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SessionMethodHelper.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SessionMethodHelper.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and---optionally---managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:UnifiedAutomation.UaClient.SessionMethodHelper.EndpointUrl">
            <summary>
            Gets or sets the endpoint URL.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.SessionMethodHelper.Session">
            <summary>
            Gets the session.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.SessionMethodHelper.DefaultRequestSettings">
            <summary>
            Gets or sets the default request settings.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.SessionMethodHelper.DefaultTimeout">
            <summary>
            Gets the default timeout.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.SessionMethodHelper.AdminCredentials">
            <summary>
            Gets or sets the administrator credentials.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.SessionMethodHelper.IsConnected">
            <summary>
            Gets a value indicating whether a connection to the server is active.
            </summary>
            <value>
            <c>true</c> if a connection to the server is active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:UnifiedAutomation.UaClient.SessionMethodHelper.ServerStatusChanged">
            <summary>
            Occurs when the server status changes.
            </summary>
        </member>
        <member name="E:UnifiedAutomation.UaClient.SessionMethodHelper.AdminCredentialsRequired">
            <summary>
            Raised when admin credentials are required.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SessionMethodHelper.Connect(System.Int32)">
            <summary>
            Connects to the server.
            </summary>
            <param name="timeout">How long (in milliseconds) to wait for the connection to be established. 0 means wait forever.</param>
            <exception cref="T:System.TimeoutException">Thrown if the timeout expires before the connection is made.</exception>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SessionMethodHelper.BeginConnect(System.AsyncCallback,System.Object)">
            <summary>
            Connects to the server.
            </summary>
            <exception cref="T:System.ArgumentNullException">An endpoint must be provided before connecting.</exception>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SessionMethodHelper.Disconnect">
            <summary>
            Disconnects from the server.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.SessionMethodHelper.MustCloseSession">
            <summary>
            A flag indicating that the object created the session and therefore must close it.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SessionMethodHelper.RequestAdminCredentials">
            <summary>
            Gets the admin credentials.
            </summary>
            <returns>The administrator credentials.</returns>
            <exception cref="T:System.InvalidOperationException">The operation requires administrator credentials.</exception>
        </member>
        <member name="T:UnifiedAutomation.UaClient.CredentialsRequiredEventArgs">
            <summary>
            The arguments passed with a CredentialsRequiredEventArgs event.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CredentialsRequiredEventArgs.#ctor(UnifiedAutomation.UaClient.UserIdentity)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.CredentialsRequiredEventArgs"/> class.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.CredentialsRequiredEventArgs.Credentials">
            <summary>
            Gets or sets the credentials.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.CredentialsRequiredEventArgs.SingleUse">
            <summary>
            Gets or sets a flag indicating whether the credentials can only be used once.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.CredentialsRequiredEventArgs.CancelConnect">
            <summary>
            Gets or sets a flag indicating whether the attempt to connect should be aborted.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.TrustListManagement">
            <summary>
            Used to access a TrustList object in an OPC UA Server.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.TrustListManagement.#ctor(UnifiedAutomation.UaBase.ApplicationInstance)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.TrustListManagement"/> class.
            </summary>
            <param name="application">The application to use.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.TrustListManagement.#ctor(UnifiedAutomation.UaClient.Session)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.TrustListManagement"/> class.
            </summary>
            <param name="session">The session to use.</param>
        </member>
        <member name="P:UnifiedAutomation.UaClient.TrustListManagement.TrustListId">
            <summary>
            Gets or sets the NodeId of the trust list object.
            </summary>
            <value>
            The NodeId of the trust list object.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.TrustListManagement.DefaultBlockSize">
            <summary>
            Gets or sets the default size of the block.
            </summary>
            <value>
            The default size of the block.
            </value>
        </member>
        <member name="M:UnifiedAutomation.UaClient.TrustListManagement.Read(UnifiedAutomation.UaBase.TrustListMasks,System.Int32)">
            <summary>
            Reads the trust list from the server.
            </summary>
            <param name="masks">The masks which specify the components of the trust list to return.</param>
            <param name="blockSize">Size of the block to use when reading the the trust list. If 0 then the DefaultBlockSize is used.</param>
            <returns>The trust list.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.TrustListManagement.BeginRead(UnifiedAutomation.UaBase.TrustListMasks,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an operation to read the trust list from the server.
            </summary>
            <param name="masks">The masks which specify the components of the trust list to return.</param>
            <param name="blockSize">Size of the block to use when reading the the trust list. If 0 then the DefaultBlockSize is used.</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <returns>The object used to manage the state of the asychronous operation.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.TrustListManagement.EndRead(System.IAsyncResult)">
            <summary>
            Completes an operation to read the trust list from the server.
            </summary>
            <param name="result">The object used to manage the state of the asychronous operation.</param>
            <returns>The trust list.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.TrustListManagement.Write(UnifiedAutomation.UaBase.TrustListDataType,System.Int32)">
            <summary>
            Writes the trust list to the server.
            </summary>
            <param name="trustList">The trust list.</param>
            <param name="blockSize">Size of the block to use when writing the the trust list. If 0 then the DefaultBlockSize is used.</param>
            <returns>True if the ApplyChanges method must be called to apply the changes.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.TrustListManagement.BeginWrite(UnifiedAutomation.UaBase.TrustListDataType,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an operation to write the trust list to the server.
            </summary>
            <param name="trustList">The trust list.</param>
            <param name="blockSize">Size of the block to use when writing the the trust list. If 0 then the DefaultBlockSize is used.</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <returns>The object used to manage the state of the asychronous operation.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.TrustListManagement.EndWrite(System.IAsyncResult)">
            <summary>
            Completes an operation to write the trust list to the server.
            </summary>
            <param name="result">The object used to manage the state of the asychronous operation.</param>
            <returns>The trust list.</returns>
            <returns>True if the ApplyChanges method must be called to apply the changes.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.TrustListManagement.AddCertificate(System.Byte[],System.Boolean)">
            <summary>
            Adds a certificate to the trust list.
            </summary>
            <param name="certificate">The certificate to add.</param>
            <param name="isTrustedCertificate">if set to <c>true</c> the certificate is placed in the trusted certificate store.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.TrustListManagement.BeginAddCertificate(System.Byte[],System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begins an operation to add a certificate to the trust list.
            </summary>
            <param name="certificate">The certificate to add.</param>
            <param name="isTrustedCertificate">if set to <c>true</c> the certificate is placed in the trusted certificate store.</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <returns>The object used to manage the state of the asychronous operation.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.TrustListManagement.EndAddCertificate(System.IAsyncResult)">
            <summary>
            Completes an operation to add a certificate to the trust list.
            </summary>
            <param name="result">The object used to manage the state of the asychronous operation.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.TrustListManagement.RemoveCertificate(System.String,System.Boolean)">
            <summary>
            Removes a certificate from the trust list.
            </summary>
            <param name="thumbprint">The thumbprint of the certificate to remove.</param>
            <param name="isTrustedCertificate">if set to <c>true</c> the certificate is removed from the trusted certificate store.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.TrustListManagement.BeginRemoveCertificate(System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begins an operation to remove a certificate to the trust list.
            </summary>
            <param name="thumbprint">The thumbprint of the certificate to remove.</param>
            <param name="isTrustedCertificate">if set to <c>true</c> the certificate is removed from the trusted certificate store.</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <returns>The object used to manage the state of the asychronous operation.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.TrustListManagement.EndRemoveCertificate(System.IAsyncResult)">
            <summary>
            Completes an operation to remove a certificate from the trust list.
            </summary>
            <param name="result">The object used to manage the state of the asychronous operation.</param>
        </member>
        <member name="T:UnifiedAutomation.UaClient.TypeDescription">
            @ingroup UaClientLibraryHelper
             <summary>
             The description of a type.
             </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.TypeDescription.TypeId">
            <summary>
            Gets or sets the type id.
            </summary>
            <value>
            The type id.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.TypeDescription.BrowseName">
            <summary>
            Gets or sets the name of the browse.
            </summary>
            <value>
            The name of the browse.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.TypeDescription.DisplayName">
            <summary>
            Gets or sets the display name.
            </summary>
            <value>
            The display name.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.TypeDescription.NodeClass">
            <summary>
            Gets or sets the node class.
            </summary>
            <value>
            The node class.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.TypeDescription.BaseTypeId">
            <summary>
            Gets or sets the base type id.
            </summary>
            <value>
            The base type id.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.TypeDescription.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.TypeDescription.Fields">
            <summary>
            Gets or sets the fields.
            </summary>
            <value>
            The fields.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.TypeDescription.UserData">
            <summary>
            Gets or sets the user data.
            </summary>
            <value>
            The user data.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.TypeDescription.BaseType">
            <summary>
            Gets or sets the base type.
            </summary>
            <value>
            The base type.
            </value>
        </member>
        <member name="M:UnifiedAutomation.UaClient.TypeDescription.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.TypeDescription.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:UnifiedAutomation.UaClient.TypeFieldDescription">
            @ingroup UaClientLibraryHelper
             <summary>
             The description of a type field.
             </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.TypeFieldDescription.FieldId">
            <summary>
            Gets or sets the field id.
            </summary>
            <value>
            The node id of the field belonging to a type.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.TypeFieldDescription.BrowseName">
            <summary>
            Gets or sets the name of the browse.
            </summary>
            <value>
            The name of the browse.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.TypeFieldDescription.DisplayName">
            <summary>
            Gets or sets the display name.
            </summary>
            <value>
            The display name.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.TypeFieldDescription.NodeClass">
            <summary>
            Gets or sets the node class.
            </summary>
            <value>
            The node class.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.TypeFieldDescription.TypeDefinitionId">
            <summary>
            Gets or sets the type definition id.
            </summary>
            <value>
            The type definition id.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.TypeFieldDescription.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.TypeFieldDescription.DataTypeId">
            <summary>
            Gets or sets the data type id.
            </summary>
            <value>
            The data type id.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.TypeFieldDescription.ValueRank">
            <summary>
            Gets or sets the value rank.
            </summary>
            <value>
            The value rank.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.TypeFieldDescription.UserData">
            <summary>
            Gets or sets the user data.
            </summary>
            <value>
            The user data.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.TypeFieldDescription.DeclaringType">
            <summary>
            Gets or sets the type of the declaring.
            </summary>
            <value>
            The type of the declaring.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.TypeFieldDescription.ParentField">
            <summary>
            Gets or sets the parent field.
            </summary>
            <value>
            The parent field.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.TypeFieldDescription.OverriddenField">
            <summary>
            Gets or sets the overridden field.
            </summary>
            <value>
            The overridden field.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.TypeFieldDescription.BrowsePath">
            <summary>
            Gets the browse path.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.TypeFieldDescription.DisplayPath">
            <summary>
            Gets the display path.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.TypeFieldDescription.GetBrowsePath">
            <summary>
            Gets the browse path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.TypeFieldDescription.UpdatePaths">
            <summary>
            Updates the paths.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.TypeFieldDescription.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.TypeFieldDescription.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:UnifiedAutomation.UaClient.MethodDescription">
            @ingroup UaClientLibraryHelper
             <summary>
             Stores the information used to call a method.
             </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MethodDescription.MethodId">
            <summary>
            Gets or sets the method id.
            </summary>
            <value>
            The method id.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MethodDescription.BrowseName">
            <summary>
            Gets or sets the browse name.
            </summary>
            <value>
            The browse name.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MethodDescription.DisplayName">
            <summary>
            Gets or sets the display name.
            </summary>
            <value>
            The display name.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MethodDescription.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MethodDescription.InputArguments">
            <summary>
            Gets or sets the input arguments.
            </summary>
            <value>
            The input arguments.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MethodDescription.OutputArguments">
            <summary>
            Gets or sets the output arguments.
            </summary>
            <value>
            The output arguments.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MethodDescription.UserData">
            <summary>
            Gets or sets the user data.
            </summary>
            <value>
            The user data.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaClient.MethodInvocation">
            @ingroup UaClientLibraryHelper
             <summary>
             The method invocation.
             </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MethodInvocation.ObjectId">
            <summary>
            Gets or sets the object id.
            </summary>
            <value>
            The object id.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MethodInvocation.MethodId">
            <summary>
            Gets or sets the method id.
            </summary>
            <value>
            The method id.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MethodInvocation.Error">
            <summary>
            Gets or sets the error for the method invocation.
            </summary>
            <value>
            The error the method invocation.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MethodInvocation.InputArguments">
            <summary>
            Gets or sets the input arguments.
            </summary>
            <value>
            The input arguments.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MethodInvocation.InputArgumentErrors">
            <summary>
            Gets or sets the input argument errors.
            </summary>
            <value>
            The input argument errors.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MethodInvocation.OutputArguments">
            <summary>
            Gets or sets the output arguments.
            </summary>
            <value>
            The output arguments.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MethodInvocation.UserData">
            <summary>
            Gets or sets the user data.
            </summary>
            <value>
            The user data.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaClient.PersistentStore">
            @ingroup UaClientLibraryHelper
             <summary>
             The settings to use when saving or restoring data in a persistent store.
             </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.PersistentStore.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.PersistentStore"/> class.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.PersistentStore.ServerNamespaceUris">
            <summary>
            Gets or sets the server namespace uris.
            </summary>
            <value>
            The server namespace uris.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.PersistentStore.StorageNamespaceUris">
            <summary>
            Gets or sets the storage namespace uris.
            </summary>
            <value>
            The storage namespace uris.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaClient.DataMonitoredItem">
            @ingroup UaClientLibraryHelper
             <summary>
             A data item being monitored.
             </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.DataMonitoredItem.#ctor(UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.DataMonitoredItem"/> class.
            </summary>
            <param name="nodeId">The node id.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.DataMonitoredItem.#ctor(UnifiedAutomation.UaBase.NodeId,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.DataMonitoredItem"/> class.
            </summary>
            <param name="nodeId">The node id.</param>
            <param name="attributeId">The attribute id.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.DataMonitoredItem.#ctor(UnifiedAutomation.UaBase.NodeId,System.String,UnifiedAutomation.UaBase.QualifiedName)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.DataMonitoredItem"/> class.
            </summary>
            <param name="nodeId">The node id.</param>
            <param name="indexRange">The index range.</param>
            <param name="dataEncoding">The data encoding.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.DataMonitoredItem.#ctor(UnifiedAutomation.UaBase.ReadValueId)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.DataMonitoredItem"/> class.
            </summary>
            <param name="nodeToRead">The node to read.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.DataMonitoredItem.#ctor(UnifiedAutomation.UaBase.ReferenceDescription)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.DataMonitoredItem"/> class.
            </summary>
            <param name="reference">The reference.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.DataMonitoredItem.#ctor(UnifiedAutomation.UaClient.DataMonitoredItem)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.DataMonitoredItem"/> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.DataMonitoredItem.Initialize">
            <summary>
            Initializes this instance with the default values.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.DataMonitoredItem.IndexRange">
            <summary>
            Gets the index range.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.DataMonitoredItem.DataEncoding">
            <summary>
            Gets the data encoding.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.DataMonitoredItem.DeadbandType">
            <summary>
            Gets or sets the type of the deadband.
            </summary>
            <value>
            The type of the deadband.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.DataMonitoredItem.CurrentDeadbandType">
            <summary>
            Gets the type of the current deadband.
            </summary>
            <value>
            The type of the current deadband.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.DataMonitoredItem.Deadband">
            <summary>
            Gets or sets the deadband.
            </summary>
            <value>
            The deadband.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.DataMonitoredItem.CurrentDeadband">
            <summary>
            Gets or sets the current deadband.
            </summary>
            <value>
            The current deadband.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.DataMonitoredItem.DataChangeTrigger">
            <summary>
            Gets or sets the data change trigger.
            </summary>
            <value>
            The data change trigger.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.DataMonitoredItem.CurrentDataChangeTrigger">
            <summary>
            Gets or sets the current data change trigger.
            </summary>
            <value>
            The current data change trigger.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.DataMonitoredItem.LastValue">
            <summary>
            Gets the last value.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.DataMonitoredItem.Save(UnifiedAutomation.UaBase.IEncoder)">
            <summary>
            Saves DataMonitoredItem using the specified encoder.
            </summary>
            <param name="encoder">The encoder.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.DataMonitoredItem.SaveAll(UnifiedAutomation.UaBase.IEncoder)">
            <summary>
            Saves the DataMonitoredItem using the specified encoder including
            the parameters that are revised by the server.
            </summary>
            <param name="encoder">The encoder to save the MonitoredItem.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.DataMonitoredItem.Load(UnifiedAutomation.UaBase.IDecoder)">
            <summary>
            Initializes the DataMonitoredItem using the specified decoder.
            </summary>
            <param name="decoder">The decoder.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.DataMonitoredItem.LoadAll(UnifiedAutomation.UaBase.IDecoder)">
            <summary>
            Initialializes the DataMonitoredItem using the specified decoder including
            the parameters that are revised by the server.
            </summary>
            <param name="decoder">The decoder to initialize the DataMonitoredItem.</param>
        </member>
        <member name="T:UnifiedAutomation.UaClient.MonitoredItem">
            @ingroup UaClientLibraryHelper
             <summary>
             An item being monitored.
             </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.MonitoredItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.MonitoredItem"/> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.MonitoredItem.#ctor(UnifiedAutomation.UaClient.MonitoredItem)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.MonitoredItem"/> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MonitoredItem.NodeId">
            <summary>
            Gets or sets the node id.
            </summary>
            <value>
            The node id.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MonitoredItem.AttributeId">
            <summary>
            Gets or sets the attribute id.
            </summary>
            <value>
            The attribute id.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MonitoredItem.Subscription">
            <summary>
            Gets the subscription.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MonitoredItem.UserData">
            <summary>
            Gets or sets the user data.
            </summary>
            <value>
            The user data.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MonitoredItem.ServerHandle">
            <summary>
            Gets the server handle.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MonitoredItem.ClientHandle">
            <summary>
            Gets the client handle.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MonitoredItem.SamplingInterval">
            <summary>
            Gets or sets the sampling interval.
            </summary>
            <value>
            The sampling interval.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MonitoredItem.CurrentSamplingInterval">
            <summary>
            Gets the current sampling interval.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MonitoredItem.QueueSize">
            <summary>
            Gets or sets the size of the queue.
            </summary>
            <value>
            The size of the queue.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MonitoredItem.CurrentQueueSize">
            <summary>
            Gets the size of the current queue.
            </summary>
            <value>
            The size of the current queue.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MonitoredItem.DiscardOldest">
            <summary>
            Gets or sets a value indicating whether to discard the oldest entries when the queue overflows.
            </summary>
            <value>
              <c>true</c> if whether to discard the oldest entries when the queue overflows; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MonitoredItem.CurrentDiscardOldest">
            <summary>
            Gets a value indicating whether discard the oldest entries when the queue overflows.
            </summary>
            <value>
            <c>true</c> if discard the oldest entries when the queue overflows; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MonitoredItem.MonitoringMode">
            <summary>
            Gets or sets the monitoring mode.
            </summary>
            <value>
            The monitoring mode.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MonitoredItem.CurrentMonitoringMode">
            <summary>
            Gets the current monitoring mode.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MonitoredItem.LastError">
            <summary>
            Gets the last error.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MonitoredItem.LastFilterError">
            <summary>
            Gets the last error for the monitoring filter.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.MonitoredItem.Save(UnifiedAutomation.UaBase.IEncoder)">
            <summary>
            Saves MonitoredItem using the specified encoder.
            </summary>
            <param name="encoder">The encoder.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.MonitoredItem.SaveAll(UnifiedAutomation.UaBase.IEncoder)">
            <summary>
            Saves the MonitoredItem using the specified encoder including the assigned handles
            and the parameters that are revised by the server.
            </summary>
            <param name="encoder">The encoder to save the MonitoredItem.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.MonitoredItem.Load(UnifiedAutomation.UaBase.IDecoder)">
            <summary>
            Initializes the MonitoredItem using the specified decoder.
            </summary>
            <param name="decoder">The decoder.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.MonitoredItem.LoadAll(UnifiedAutomation.UaBase.IDecoder)">
            <summary>
            Initialializes the MonitoredItem using the specified decoder including the assigned handles
            and the parameters that are revised by the server.
            </summary>
            <param name="decoder">The decoder to initialize the MonitoredItem.</param>
        </member>
        <member name="T:UnifiedAutomation.UaClient.CacheManager">
            @ingroup UaClientApi
             <summary>
             Maintains a local cache of nodes and their attribute values.
             </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CacheManager.#ctor(UnifiedAutomation.UaClient.Session)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.CacheManager"/> class.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="P:UnifiedAutomation.UaClient.CacheManager.DefaultRequestSettings">
            <summary>
            Gets or sets the default request settings.
            </summary>
            <value>
            The default request settings.
            </value>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CacheManager.GetDisplayText(UnifiedAutomation.UaBase.ExpandedNodeId)">
            <summary>
            Gets the display text.
            </summary>
            <param name="nodeId">The node id.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CacheManager.GetDisplayText(UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Gets the display text.
            </summary>
            <param name="nodeId">The node id.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CacheManager.GetDisplayText(UnifiedAutomation.UaBase.NodeId,System.String)">
            <summary>
            Gets the node id which is the target of the browse path.
            </summary>
            <param name="rootId">The root id.</param>
            <param name="browsePath">The browse path.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CacheManager.GetNodeId(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.QualifiedName[])">
            <summary>
            Gets the node id which is the target of the browse path (follows hierarchical references).
            </summary>
            <param name="rootId">The root id.</param>
            <param name="browsePath">The browse path.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CacheManager.GetEnumerationText(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.DataValue)">
            <summary>
            Gets the display text for the enumerated value.
            </summary>
            <param name="nodeId">The variable or data type node id.</param>
            <param name="value">The value.</param>
            <returns>
            The text for the enumerated value.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CacheManager.GetEnumerationText(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.Variant)">
            <summary>
            Gets the display text for the enumerated value.
            </summary>
            <param name="nodeId">The variable or data type node id.</param>
            <param name="value">The value.</param>
            <returns>
            The text for the enumerated value.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CacheManager.GetEnumerationText(UnifiedAutomation.UaBase.NodeId,System.Int32,System.String)">
            <summary>
            Gets the display text for the enumerated value.
            </summary>
            <param name="nodeId">The variable or data type node id.</param>
            <param name="enumValue">The enum value.</param>
            <param name="defaultText">The default text.</param>
            <returns>
            The text for the enumerated value.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CacheManager.GetAvailableDataEncodings(UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Gets the available data encodings.
            </summary>
            <param name="nodeId">The variable or data type node id.</param>
            <returns>The available encodings. Null if none are available.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CacheManager.GetAttribute``1(UnifiedAutomation.UaBase.NodeId,System.UInt32,``0)">
            <summary>
            Gets the attribute.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="nodeId">The node id.</param>
            <param name="attributeId">The attribute id.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The attribute value, the defaultValue if the attribute is not found.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CacheManager.Clear">
            <summary>
            Clears the cache.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CacheManager.Clear(UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Clears the cached information for the specified node.
            </summary>
            <param name="nodeId">The node id.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CacheManager.IsKnown(UnifiedAutomation.UaBase.ExpandedNodeId)">
            <summary>
            Determines whether a node id is a known type id.
            </summary>
            <param name="typeId">The type extended identifier.</param>
            <returns>
              <c>true</c> if the specified type id is known; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CacheManager.IsKnown(UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Determines whether a node id is a known type id.
            </summary>
            <param name="typeId">The type identifier.</param>
            <returns>
              <c>true</c> if the specified type id is known; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CacheManager.FindSuperType(UnifiedAutomation.UaBase.ExpandedNodeId)">
            <summary>
            Returns the immediate supertype for the type.
            </summary>
            <param name="typeId">The extended type identifier.</param>
            <returns>
            A type identifier of the <paramref name="typeId "/>
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CacheManager.FindSuperType(UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Returns the immediate supertype for the type.
            </summary>
            <param name="typeId">The type identifier.</param>
            <returns>
            The immediate supertype identifier for <paramref name="typeId"/>
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CacheManager.IsTypeOf(UnifiedAutomation.UaBase.ExpandedNodeId,UnifiedAutomation.UaBase.ExpandedNodeId)">
            <summary>
            Determines whether a type is a subtype of another type.
            </summary>
            <param name="subTypeId">The subtype identifier.</param>
            <param name="superTypeId">The supertype identifier.</param>
            <returns>
              <c>true</c> if <paramref name="superTypeId"/> is supertype of <paramref name="subTypeId"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CacheManager.IsTypeOf(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Determines whether a type is a subtype of another type.
            </summary>
            <param name="subTypeId">The subtype identifier.</param>
            <param name="superTypeId">The supertype identyfier.</param>
            <returns>
              <c>true</c> if <paramref name="superTypeId"/> is supertype of <paramref name="subTypeId"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CacheManager.FindReferenceTypeName(UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Returns the node identifier for the reference type with the specified browse name.
            </summary>
            <param name="referenceTypeId">The reference type id.</param>
            <returns>
            A name qualified with a namespace for the reference <paramref name="referenceTypeId"/>.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CacheManager.FindReferenceType(UnifiedAutomation.UaBase.QualifiedName)">
            <summary>
            Returns the qualified name for the reference type id.
            </summary>
            <param name="referenceTypeName">Name of the reference type.</param>
            <returns>
            The identifier for the <paramref name="referenceTypeName"/>
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CacheManager.FindDataTypeId(UnifiedAutomation.UaBase.ExpandedNodeId)">
            <summary>
            Returns the data type for the specified encoding.
            </summary>
            <param name="encodingId">The encoding id.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CacheManager.FindDataTypeId(UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Returns the data type for the specified encoding.
            </summary>
            <param name="encodingId">The encoding id.</param>
            <returns>
            The data type for the <paramref name="encodingId"/>
            </returns>
        </member>
        <member name="T:UnifiedAutomation.UaClient.CacheManager.CacheItem">
            <summary>
            An item in the cache.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CacheManager.GetEnumerationText(UnifiedAutomation.UaBase.NodeId,System.Int32)">
            <summary>
            Gets the enumeration text.
            </summary>
            <param name="propertyId">The property id.</param>
            <param name="enumValue">The enum value.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CacheManager.Translate(UnifiedAutomation.UaClient.CacheManager.CacheItem,UnifiedAutomation.UaBase.QualifiedName[])">
            <summary>
            Finds node which is the target of multiple hierarchical references from the cache item.
            </summary>
            <param name="item">The item.</param>
            <param name="browsePath">The browse path.</param>
            <returns>The target id. Null if it does not exist.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CacheManager.Translate(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.QualifiedName[])">
            <summary>
            Finds node which is the target of multiple hierarchical references from the root.
            </summary>
            <param name="rootId">The root id.</param>
            <param name="browsePath">The browse path.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CacheManager.FindTarget(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.QualifiedName[])">
            <summary>
            Finds the node id at the end of specified path.
            </summary>
            <param name="rootId">The root id.</param>
            <param name="browsePath">The browse path.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CacheManager.Find(UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Finds the specified node id.
            </summary>
            <param name="nodeId">The node id.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CacheManager.Find(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,System.Boolean)">
            <summary>
            Finds the specified node id.
            </summary>
            <param name="nodeId">The node id.</param>
            <param name="referenceTypeId">The reference type id.</param>
            <param name="isInverse">Set to <c>true</c> if the reference is an inverse reference.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CacheManager.FindChildren(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,System.Boolean)">
            <summary>
            Finds the children.
            </summary>
            <param name="nodeId">The node id.</param>
            <param name="referenceTypeId">The reference type id.</param>
            <param name="isInverse">Set to <c>true</c> if the reference is an inverse reference.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.CacheManager.FindReferenceTypes(System.Collections.Generic.Dictionary{UnifiedAutomation.UaBase.QualifiedName,UnifiedAutomation.UaClient.CacheManager.CacheItem},UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Finds the reference types.
            </summary>
            <param name="referenceTypeNames">The reference type names.</param>
            <param name="parentId">The parent id.</param>
        </member>
        <member name="T:UnifiedAutomation.UaClient.RequestSettings">
            @ingroup UaClientLibraryHelper
             <summary>
             The settings for a request.
             </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.RequestSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.RequestSettings"/> class.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.RequestSettings.OperationTimeout">
            <summary>
            Gets or sets the operation timeout.
            </summary>
            <value>
            The timeout for the service call in milliseconds. The default setting is 30 seconds..
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.RequestSettings.DiagnosticsMasks">
            <summary>
            Gets or sets the diagnostics masks.
            </summary>
            <value>
            Bit mask that defines the diagnostic information to be returned from the server. The default setting is SymbolicIdAndText.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.RequestSettings.RequestId">
            <summary>
            Gets or sets the request id.
            </summary>
            <value>
            The request id. The default value is 0.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.RequestSettings.MaxOperationsPerRequest">
            <summary>
            Gets or sets the max operations per request.
            </summary>
            <value>
            The maximum number of operations per service request sent to the OPC UA server. The SDK splits the calls if necessary. The default value is UInt16.MaxValue.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session">
            @ingroup UaClientApi
             <summary>
             A class that manages a session with an OPC UA server.
             </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.#ctor">
            <summary>
            Create a session for the default client application.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.#ctor(UnifiedAutomation.UaBase.ApplicationInstance)">
            <summary>
            Create a session for the specified client application.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing,
            releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and---optionally---managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and
            unmanaged resources; <c>false</c> to release only unmanaged
            resources.</param>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.Application">
            <summary>
            Gets the application.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.SessionId">
            <summary>
            Gets the session id.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.Cache">
            <summary>
            Gets the cache manager.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.Model">
            <summary>
            Gets the model manager.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.UserData">
            <summary>
            Gets or sets the user data.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.DefaultRequestSettings">
            <summary>
            Gets or sets the default settings used as fallback for OPC UA
            service calls.
            </summary>
            <value>
            The default request settings include a timeout, diagnostic
            settings, request id, and maximum number of operations per request.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.SessionName">
            <summary>
            Gets or sets the name of the session.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.UserIdentity">
            <summary>
            Gets or sets the user identity. Can be set to use other authentifications than Anonymous.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.PreferredLocales">
            <summary>
            Gets or sets the preferred locales.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.SecureChannelLifetime">
            <summary>
            Gets or sets the secure channel lifetime.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.SecureChannelTimeout">
            <summary>
            Gets or sets the secure channel timeout.
            </summary>
            <remarks>
            The SecureChannelTimeout is the timeout used by the SecureChannel
            created for the Session. It places an upper limit on the \ref
            UnifiedAutomation.UaClient.RequestSettings.OperationTimeout
            "OperationTimeout", which can be set individually for any single
            request. Clients that want to increase the PublishTimeout will
            likely have to increase the SecureChannelTimeout at the same time.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.SessionTimeout">
            <summary>
            Gets or sets the session timeout.
            </summary>
            <remarks>
            The SessionTimeout specifies when the Server will close a Session
            due to inactivity. When a Session closes, the resources associated
            with the Session are freed (e.g. browse continuation points,
            outstanding publish requests, etc.). However, any associated
            Subscriptions will live on until they reach the end of their own
            lifetime. Keeping a Session alive can be done with any request
            sent to the Server. This is done automatically by the Client SDK
            if the #WatchdogCycleTime is less than the SessionTimeout.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.RevicedSessionTimeout">
            <summary>
            Gets the session timeout that is reviced by the server.
            </summary>
            <remarks>
            The server can revice another value than requested by the client. See
            #SessionTimeout for more details.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.WatchdogCycleTime">
            <summary>
            Gets or sets the watchdog cycle time used for connection check and
            reconnect after connection errors.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.WatchdogTimeout">
            <summary>
            Gets or sets the watchdog service call timeout used for watchdog
            read calls.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.AutomaticReconnect">
            <summary>
            Gets or sets a value indicating whether the session should
            automatically reconnect on error.
            </summary>
            <value>
            <c>true</c> if the session should automatically reconnect;
            otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.RetryInitialConnect">
            <summary>
            Gets or sets a value indicating whether the session should
            automatically retry to connect if connect fails.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.ReconnectDelay">
            <summary>
            Gets or sets the delay between reconnect attempts.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.ReconnectTimeout">
            <summary>
            Gets or sets the timeout for the reconnect procedure in milliseconds.
            </summary>
            <remarks>
            The default value is ReconnectDelay / 2.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.ReconnectCreateSubscriptionsDelay">
            <summary>
            Gets or sets the time been the recreation of a Session on reconnect and
            the recreation of Subscriptions.
            </summary>
            <remarks>
            The default value is 0.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.PublishPipelineDepth">
            <summary>
            Gets or sets the publish pipeline depth.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.PublishTimeout">
            <summary>
            Gets or sets the publish request timeout.
            </summary>
            <remarks>
            The PublishTimeout is the timeout for Publish requests. If this
            value is 0, then the default timeout for Requests is used
            instead. It is often necessary to set a higher PublishTimeout
            because Clients need to make sure that Publish requests are used
            before they time out. As a rule of thumb the PublishTimeout should
            be twice as long as the longest \ref
            UnifiedAutomation.UaClient.Subscription.MaxKeepAliveTime
            "MaxKeepAliveTime".
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.UseDnsNameAndPortFromDiscoveryUrl">
            <summary>
            Gets or sets a value indicating whether to use DNS name and port
            from discovery URL when connecting to a server.
            </summary>
            <value>
            <c>true</c> if the DNS name and port from discovery URL should be
            used when connecting to a server; otherwise, <c>false</c>.
            </value>
            <remarks>
            Sometimes the DNS name of the server is not accessible to the
            Client. Setting this flag will automatically use the DNS name of the
            URL passed to the Connect method when connecting to the server. Note
            that setting this flag to true makes it easier for hackers to trick
            clients into revealing confidential information (such as passwords) by
            redirecting clients to a rogue gateway.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.AllowInsecureCredentials">
            <summary>
            Gets or sets a value indicating whether a password can be sent over an insecure connection.
            </summary>
            <value>
            <c>true</c> if a password can be sent over an insecure connection; otherwise, <c>false</c>.
            </value>
            <remarks>
            Sometimes a Server has no ability to handle encrypted passwords. This property bypasses the checks used to prevent applications 
            from accidentally exposing sensitive data to evesdroppers. 
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.EndpointDescription">
            <summary>
            Gets or sets the endpoint description.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.ConnectionStatus">
            <summary>
            Gets the server connection status.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.AlternativeEndpointUrls">
             <summary>
             Gets or sets the alternative endpoint urls.
            
             The AlternativeEndpointUrls are used for connecting if the inital connect fails and
             retryInitialConnect is set to RetryInitialConnet.Yes.
             Once a connection could be created, only the Endpoint that worked is used for reconnecting.
             So AlternativeEndpointUrls are not evaluated for reconnect.
             </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.DefaultTimestampToReturn">
            <summary>
            Gets or sets the default timestamp to return.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.MessageContext">
            <summary>
            Gets the message context.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.NamespaceUris">
            <summary>
            Gets the namespace uris.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.ServerUris">
            <summary>
            Gets the server uris.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.Factory">
            <summary>
            Gets the dictionary of data types known to the stack.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.InternalSession">
            <summary>
            Gets the internal session.
            </summary>
            <value>
            The internal session.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.SubscriptionCount">
            <summary>
            Gets the number of subscriptions.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.Subscriptions">
            <summary>
            Gets the Subscriptions of the Session
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.PublishRequestCount">
            <summary>
            Gets the number of outstanding publish requests.
            </summary>
        </member>
        <member name="E:UnifiedAutomation.UaClient.Session.ConnectionStatusUpdate">
            <summary>
            Raised when the connection status has been updated.
            </summary>
            <remarks>
            This event is raised from a background thread and BeginInvoke may need to be called if being handled by a UI.
            Handlers that block before returning could cause timeouts or other communication failures.
            </remarks>
        </member>
        <member name="E:UnifiedAutomation.UaClient.Session.SessionValidationError">
            <summary>
            No longer used.
            </summary>
            <remarks>
            The SDK automatically detects if the target is a GUI control and
            ensures that the callback is invoked on the correct thread.
            </remarks>
        </member>
        <member name="E:UnifiedAutomation.UaClient.Session.UpdateEndpoint">
            <summary>
            Raised before connecting to the server and it allows the
            application to modify the endpoint used to connect.
            </summary>
            <remarks>
            This event is raised from a background thread and Invoke may need to be called if being handled by a UI.
            This event has return parameters so BeginInvoke cannot be used.
            Displaying a modal dialog in the callback will not work if the synchronous version of Connect is used.
            This problem can be avoided by using BeginConnect.
            </remarks>
        </member>
        <member name="E:UnifiedAutomation.UaClient.Session.InsecureCredentials">
            <summary>
            Raised before sending a plaintext user credentials over an insecure connection.
            </summary>
            <remarks>
            This event is raised from a background thread and Invoke may need to be called if being handled by a UI.
            This event has return parameters so BeginInvoke cannot be used.
            Displaying a modal dialog in the callback will not work if the synchronous version of Connect is used.
            This problem can be avoided by using BeginConnect.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.Connect(System.String,UnifiedAutomation.UaClient.SecuritySelection)">
            <summary>
            Establish a connection to the OPC UA server.</summary>
            <remarks>
            <para>Calling this function creates a secure channel to the discovery url and calls
            GetEndpoints. Depending on the securitySelection a server endpoint is chosen.
            Then the function creates a secure channel to the server endpoint and it creates
            and activates a session in the server application.</para>
            <para>The SDK is managing the connection to the server by</para>
             - Monitoring the status of the session with read calls to the
               server status variable. The frequency of the read calls can be
               controlled with the property #WatchdogCycleTime
             - Reconnect on TCP/IP or SecureChannel level if the connection
               was lost
             - Recreation of the session if the session timed out or the
               server was restarted
             - The callback #ConnectionStatusUpdate provides information about
               the current status of the session
            <para>Following EventHandlers can be called by this method:</para>
             - ApplicationInstace.UntrustedCertificate
             - ConnectionStatusUpdate
             - UpdateEndpoint
             - InsecureCredentials
            <para> The EventHandlers may be called by other threads than the main thread.
            If an EventHander will be synchronized to the gui thread with InvokeRequired
            and Invoke, the method call could block. In these cases you should use the
            asynchronous API.</para>
            </remarks>
            <param name="discoveryUrl"><para>The URL of the server endpoint to connect to.<br/></para>
            <para>UA TCP: opc.tcp://networknode:4840<br/></para>
            <para>WebService: https://networknode/ServerName</para></param>
            <param name="securitySelection">The requested security level. The
             option None disables security. The option BestAvailable selects the
             highest security level suported by the server. </param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.Connect(System.String,UnifiedAutomation.UaClient.SecuritySelection,UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Establish a connection to the OPC UA server.</summary>
            <remarks>
            This is an overloaded function. See #Connect for more details.
            </remarks>
            <param name="discoveryUrl"><para>The URL of the server endpoint to
            connect to.<br/></para>
            <para>UA TCP: opc.tcp://networknode:4840<br/></para>
            <para>WebService: https://networknode/ServerName</para></param>
            <para>Following EventHandlers can be called by this method:</para>
             - ApplicationInstace.UntrustedCertificate
             - ConnectionStatusUpdate
             - UpdateEndpoint
             - InsecureCredentials
            <para> The EventHandlers may be called by other threads than the main thread.
            If an EventHander will be synchronized to the gui thread with InvokeRequired
            and Invoke, the method call could block. In these cases you should use the
            asynchronous API.</para>
            <param name="securitySelection">The requested security level. The
            option None disables security. The option BestAvailable selects the
            highest security level suported by the server. </param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.Connect(System.String,UnifiedAutomation.UaClient.SecuritySelection,System.String,UnifiedAutomation.UaClient.RetryInitialConnect,UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Establish a connection to the OPC UA server.</summary>
            <remarks>
            This is an overloaded function. See #Connect for more details.
            </remarks>
            <param name="discoveryUrl"><para>The URL of the server endpoint to
            connect to.<br/></para>
            <para>UA TCP: opc.tcp://networknode:4840<br/></para>
            <para>WebService: https://networknode/ServerName</para></param>
            <param name="securitySelection">The requested security level. The
            option None disables security. The option BestAvailable selects the
            highest security level suported by the server. </param>
            <param name="transportProfileUri">The transport profile URI to use
            (if null the default for the URL scheme is used).</param>
            <param name="retryInitialConnect">Whether to retry a failed
            connect in the background.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginConnect(System.String,UnifiedAutomation.UaClient.SecuritySelection,System.String,UnifiedAutomation.UaClient.RetryInitialConnect,UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
             <summary>
             Asynchronously establish a connection to the OPC UA server.</summary>
             <remarks>
             <para>Calling this function creates a secure channel to the discovery url and calls
             GetEndpoints. Depending on the securitySelection a server endpoint is chosen.
             Then the function creates a secure channel to the server endpoint and it creates
             and activates a session in the server application.</para>
            
              The SDK is managing the connection to the server by
             - Monitoring the status of the session with read calls to the
               server status variable. The frequency of the read calls can be
               controlled with the property WatchdogCycleTime
             - Reconnect on TCP/IP or SecureChannel level if the connection was lost
             - Recreation of the session if the session timed out or the server
               was restarted
             - The callback ConnectionStatusUpdate provides information about
               the current status of the session
             </remarks>
             <param name="discoveryUrl"><para>The URL of the server endpoint to
             connect to.<br/></para>
             <para>UA TCP: opc.tcp://networknode:4840<br/></para>
             <para>WebService: https://networknode/ServerName</para></param>
             <param name="securitySelection">The requested security level. The
             option None disables security. The option BestAvailable selects the
             highest security level suported by the server.</param>
             <param name="transportProfileUri">The transport profile URI to use
             (if null the default for the URL scheme is used).</param>
             <param name="retryInitialConnect">Whether to retry a failed
             connect in the background.</param>
             <param name="settings">The general settings for the request. If
             null, the default settings from the property
             #DefaultRequestSettings are used.</param>
             <param name="callback">The callback to use when the async call completes.</param>
             <param name="userData">The user data that is passed to the callback.</param>
             <returns>
             An object which must be passed to the #EndConnect method.
             </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.Connect(UnifiedAutomation.UaBase.EndpointDescription,UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Establish a connection to the OPC UA server.
            </summary>
            <remarks>
            Connects to the specified endpoint provided by a server or stored
            in configuration. The available endpoints can be requested through
            Discovery.GetEndpoints.
            </remarks>
            <param name="endpoint">The full definition of an OPC UA server endpoint.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.Connect(UnifiedAutomation.UaBase.EndpointDescription,UnifiedAutomation.UaClient.RetryInitialConnect,UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Establish a connection to the OPC UA server.
            </summary>
            <remarks>
            Connects to the specified endpoint provided by a server or stored
            in configuration. The available endpoints can be requested through
            Discovery.GetEndpoints.
            </remarks>
            <param name="endpoint">The full definition of an OPC UA server endpoint.</param>
            <param name="retryInitialConnect">Whether to retry a failed
            connect in the background.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginConnect(UnifiedAutomation.UaBase.EndpointDescription,UnifiedAutomation.UaClient.RetryInitialConnect,UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously establish a connection to the OPC UA server.
            </summary>
            <remarks>
            Connects to the specified endpoint provided by a server or stored
            in configuration. The available endpoints can be requested through
            Discovery.GetEndpoints.
            </remarks>
            <param name="endpoint">The full definition of an OPC UA server endpoint.
            The supported security policies are None, Basic128Rsa15, Basic256 and Basic256Sha256.
            </param>
            <param name="retryInitialConnect">Whether to retry a failed
            connect in the background.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>
            An object which must be passed to the EndConnect() method.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndConnect(System.IAsyncResult)">
            <summary>
            Completes an asynchronous connect operation.
            </summary>
            <param name="result">The object returned from the #BeginConnect method.</param>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.SessionAsyncResult">
            <summary>
            Stores state information for asynchronous connect operations.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.SessionAsyncResult.#ctor(System.AsyncCallback,System.Object,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.Session.SessionAsyncResult"/> class.
            </summary>
            <param name="callback">The callback.</param>
            <param name="userData">The user data.</param>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.SessionAsyncResult.Session">
            <summary>
            Gets or sets the session.
            </summary>
            <value>
            The session.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Session.SessionAsyncResult.RequestSettings">
            <summary>
            Gets or sets the request settings.
            </summary>
            <value>
            The request settings.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.ConnectAsyncResult">
            <summary>
            Stores state information for asynchronous connect operations.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnGetEndpointsComplete(System.IAsyncResult)">
            <summary>
            Called when an asynchronous get endpoints operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnCreateSessionComplete(System.IAsyncResult)">
            <summary>
            Called when an asynchronous create session operation completes.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnActivateSessionComplete(System.IAsyncResult)">
            <summary>
            Called when an asynchronous activate session operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnReadNamespaceArrayComplete(System.IAsyncResult)">
            <summary>
            Called when an asynchronous call to update the namespace tables completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.ReconnectRequired(System.Exception,UnifiedAutomation.UaClient.Session.ConnectAsyncResult)">
            <summary>
            Determines whether a reconnect is required.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.Disconnect">
            <summary>
            Disconnect client application from OPC UA server.
            </summary>
            <remarks>
            Calling this function closes the session and the secure channel
            connection to the server. The subscriptions assigned to the session
            are also deleted.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.Disconnect(UnifiedAutomation.UaClient.SubscriptionCleanupPolicy)">
            <summary>
            Disconnect client application from OPC UA server.
            </summary>
            <remarks>
            Calling this function closes the session and the secure channel
            connection to the server. The subscriptions assigned to the
            session are also deleted if the cleanupPolicy is set to <c>Delete</c>.
            </remarks>
            <param name="cleanupPolicy">The cleanup policy for the
            subscription. The option <c>Delete</c> removes the subscription
            together with the session. The subscriptions are not deleted when
            option <c>Keep</c> is used.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.Disconnect(UnifiedAutomation.UaClient.SubscriptionCleanupPolicy,UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Disconnect client application from OPC UA server.
            </summary>
            <remarks>
            Calling this function closes the session and the secure channel
            connection to the server. The subscriptions assigned to the
            session are also deleted if the cleanupPolicy is set to <c>Delete</c>.
            </remarks>
            <param name="cleanupPolicy">The cleanup policy for the
            subscription. The option <c>Delete</c> removes the subscription
            together with the session. The subscriptions are not deleted when
            option <c>Keep</c> is used.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property #DefaultRequestSettings are used.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginDisconnect(System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously disconnect client application from OPC UA server.
            </summary>
            <remarks>
            Calling this function closes the session and the secure channel
            connection to the server. The subscriptions assigned to the session
            are also deleted.
            </remarks>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>
            An object which must be passed to the #EndDisconnect method.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginDisconnect(UnifiedAutomation.UaClient.SubscriptionCleanupPolicy,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously disconnect client application from OPC UA server.
            </summary>
            <remarks>
            Calling this function closes the session and the secure channel
            connection to the server. The subscriptions assigned the session are
            also deleted if the cleanupPolicy is set to <c>Delete</c>.
            </remarks>
            <param name="cleanupPolicy">The cleanup policy for the
            subscription. The option <c>Delete</c> removes the subscription
            together with the session. The subscriptions are not deleted when
            option <c>Keep</c> is used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>
            An object which must be passed to the #EndDisconnect method.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginDisconnect(UnifiedAutomation.UaClient.SubscriptionCleanupPolicy,UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously disconnect client application from OPC UA server.
            </summary>
            <remarks>
            Calling this function closes the session and the secure channel
            connection to the server. The subscriptions assigned the session are
            also deleted if the cleanupPolicy is set to <c>Delete</c>.
            </remarks>
            <param name="cleanupPolicy">The cleanup policy for the
            subscription. The option <c>Delete</c> removes the subscription
            together with the session. The subscriptions are not deleted when
            option <c>Keep</c> is used.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the #EndDisconnect method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndDisconnect(System.IAsyncResult)">
            <summary>
            Completes an asynchronous disconnect operation.
            </summary>
            <param name="result">The object returned from the #BeginDisconnect method.</param>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.DisconnectAsyncResult">
            <summary>
            Stores state information for asynchronous disconnect operations.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnCloseSessionComplete(System.IAsyncResult)">
            <summary>
            Called when an asynchronous close session operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.Cancel(System.UInt32,UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Cancels outstanding service requests on the OPC UA server.
            </summary>
            <param name="requestHandle">Request handle used for the
            outstanding service requests to cancel.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <returns>The number of requests that were cancelled.</returns>
            <remarks>
            Using this service requires that the caller explicitly specifies a
            RequestId in the RequestSettings for each request that it thinks it
            might like to cancel.
            To avoid conflicts with the SDK the request ID should be be less
            than 1,000,000.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginCancel(System.UInt32,UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously cancels outstanding service requests on the OPC UA server.
            </summary>
            <param name="requestHandle">Request handle used for the
            outstanding service requests to cancel.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the #EndCancel method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndCancel(System.IAsyncResult)">
            <summary>
            Completes a cancel operation.
            </summary>
            <param name="result">The object returned from the BeginCancel method.</param>
            <returns>The number of requests that were cancelled.</returns>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.CancelAsyncResult">
            <summary>
            Stores state information for asynchronous cancel operations.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnCancelComplete(System.IAsyncResult)">
            <summary>
            Called when an asynchronous cancel operation completes.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.Read(System.Collections.Generic.IList{UnifiedAutomation.UaBase.ReadValueId},System.UInt32,UnifiedAutomation.UaBase.TimestampsToReturn,UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Reads attribute values synchronously from OPC server.
            </summary>
            <remarks>
            The Read Service is used to read one or more attributes of one or
            more nodes. It allows also reading subsets or single elements of array
            values and to define a valid age of values to be returned to reduce
            the need for device reads. Like most other services, the read is
            optimized for bulk read operations and not for reading single
            Attribute values. Typically, all Node Attributes are readable. For the
            Value Attribute, the Read rights are indicated by the AccessLevel and
            UserAccessLevel Attribute of the Variable.
            </remarks>
            <param name = "nodesToRead">List of nodes and attributes to read. </param>
            <param name = "maxAge">The maximum age of the value to be read in milliseconds.<br/>
            This parameter allows clients to reduce the communication between
            server and data source by allowing the server to return a cached value
            that is not older than the defined time period. Setting a value of 0
            forces the server to obtain the current value. This is similar to a
            device read in Classic OPC. </param>
            <param name = "timestampsToReturn">OPC UA defines two timestamps,
            the source and the server timestamp. This parameter allows the client
            to define which timestamps the server should return with the
            value.<br/>
            The source timestamp is only available for Value Attributes. The
            source timestamp is used to reflect the timestamp that was applied to
            a Variable value by the data source. It should indicate the last
            change of the value or status code. The source timestamp must be
            always generated by the same physical clock. This timestamp type was
            added for OPC UA to cover the use case to get the timestamp of the
            last value change which is different than the server timestamp
            definition.<br/>
            The server timestamp is used to reflect the time that the server
            received a Variable value or knew it to be accurate if the changes are
            reported by exception and the connection to the data source is
            operating. This is the behavior expected by Classic OPC<br/>
            Possible values are
            - TimestampsToReturn.Source
            - TimestampsToReturn.Server
            - TimestampsToReturn.Both </param>
            <param name = "settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <returns>List of read results. </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.Read(System.Collections.Generic.IList{UnifiedAutomation.UaBase.ReadValueId})">
            <summary>
            Reads attribute values synchronously from OPC server.
            </summary>
            <remarks>
             This is an overloaded function. See #Read for more details.
            </remarks>
            <param name = "nodesToRead">List of nodes and attributes to read. </param>
            <returns>List of read results. </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginRead(System.Collections.Generic.IList{UnifiedAutomation.UaBase.ReadValueId},System.UInt32,UnifiedAutomation.UaBase.TimestampsToReturn,UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Reads values and attributes asynchronously from OPC server.
            </summary>
            <remarks>
            The Read Service is used to read one or more attributes of one or
            more nodes. It allows also reading subsets or single elements of array
            values and to define a valid age of values to be returned to reduce
            the need for device reads. Like most other services, the read is
            optimized for bulk read operations and not for reading single
            Attribute values. Typically all Node Attributes are readable. For the
            Value Attribute the Read rights are indicated by the AccessLevel and
            UserAccessLevel Attribute of the Variable.
            </remarks>
            <param name="nodesToRead">List of nodes and attributes to read.</param>
            <param name="maxAge">The maximum age for any value.</param>
            <param name = "timestampsToReturn">OPC UA defines two timestamps,
            the source and the server timestamp. This parameter allows the client
            to define which timestamps the server should return with the
            value.<br/>
            The source timestamp is only available for Value Attributes. The
            source timestamp is used to reflect the timestamp that was applied to
            a Variable value by the data source. It should indicate the last
            change of the value or status code. The source timestamp must be
            always generated by the same physical clock. This timestamp type was
            added for OPC UA to cover the use case to get the timestamp of the
            last value change which is different than the server timestamp
            definition.<br/>
            The server timestamp is used to reflect the time that the server
            received a Variable value or knew it to be accurate if the changes are
            reported by exception and the connection to the data source is
            operating. This is the behavior expected by Classic OPC<br/>
             Possible values are
            - TimestampsToReturn.Source
            - TimestampsToReturn.Server
            - TimestampsToReturn.Both </param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>
            An object which must be passed to the #EndRead method.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginRead(System.Collections.Generic.IList{UnifiedAutomation.UaBase.ReadValueId},System.UInt32,UnifiedAutomation.UaBase.TimestampsToReturn,System.AsyncCallback,System.Object)">
            <summary>
            This is an overloaded function. See #BeginRead for more details.
            </summary>
            <param name="nodesToRead">List of nodes and attributes to read.</param>
            <param name="maxAge">The maximum age for any value.</param>
            <param name = "timestampsToReturn">OPC UA defines two timestamps,
            the source and the server timestamp. This parameter allows the client
            to define which timestamps the server should return with the
            value.<br/>
            The source timestamp is only available for Value Attributes. The
            source timestamp is used to reflect the timestamp that was applied to
            a Variable value by the data source. It should indicate the last
            change of the value or status code. The source timestamp must be
            always generated by the same physical clock. This timestamp type was
            added for OPC UA to cover the use case to get the timestamp of the
            last value change which is different than the server timestamp
            definition.<br/>
            The server timestamp is used to reflect the time that the server
            received a Variable value or knew it to be accurate if the changes are
            reported by exception and the connection to the data source is
            operating. This is the behavior expected by Classic OPC<br/>
             Possible values are
            - TimestampsToReturn.Source
            - TimestampsToReturn.Server
            - TimestampsToReturn.Both </param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the #EndRead method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginRead(System.Collections.Generic.IList{UnifiedAutomation.UaBase.ReadValueId},System.UInt32,System.AsyncCallback,System.Object)">
            <summary>
            This is an overloaded function. See #BeginRead for more details.
            </summary>
            <param name="nodesToRead">List of nodes and attributes to read.</param>
            <param name="maxAge">The maximum age for any value.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the #EndRead method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndRead(System.IAsyncResult)">
            <summary>
            Completes an asynchronous read operation.
            </summary>
            <param name="result">The object returned from the #BeginRead method.</param>
            <returns>List of read results.</returns>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.ReadAsyncResult">
            <summary>
            Stores state information for asynchronous read operations.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginRead(UnifiedAutomation.UaClient.Session.ReadAsyncResult)">
            <summary>
            Begins the read.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnReadComplete(System.IAsyncResult)">
            <summary>
            Called when an asynchronous read operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.Write(System.Collections.Generic.IList{UnifiedAutomation.UaBase.WriteValue},UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Writes attributes synchronously to OPC server.
            </summary>
            <remarks>
            The Write Service is used to write one or more attributes of one
            or more nodes. For the Value Attribute the Write rights are indicated
            by the AccessLevel and UserAccessLevel Attribute of the Variable.
            </remarks>
            <param name="nodesToWrite">List of nodes and attributes to write.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <returns>A list of StatusCodes that indicate for each node whether the
            write operation has been successful.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.Write(System.Collections.Generic.IList{UnifiedAutomation.UaBase.WriteValue})">
            <summary>
            Writes attributes synchronously to OPC server.
            </summary>
            <remarks>
            The Write Service is used to write one or more attributes of one
            or more nodes. For the Value Attribute the Write rights are indicated
            by the AccessLevel and UserAccessLevel Attribute of the Variable.
            </remarks>
            <param name="nodesToWrite">The nodes to write.</param>
            <returns>A list of StatusCodes that indicate for each node whether the
            write operation has been successful.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginWrite(System.Collections.Generic.IList{UnifiedAutomation.UaBase.WriteValue},UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Writes attributes asynchronously to a OPC UA server.
            </summary>
            <remarks>
            The Write Service is used to write one or more attributes of one
            or more nodes. For the Value Attribute the Write rights are indicated
            by the AccessLevel and UserAccessLevel Attribute of the Variable.
            </remarks>
            <param name="nodesToWrite">List of nodes and attributes to write.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the #EndWrite method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginWrite(System.Collections.Generic.IList{UnifiedAutomation.UaBase.WriteValue},System.AsyncCallback,System.Object)">
            <summary>
            Writes attributes asynchronously to a OPC UA server.
            </summary>
            <remarks>
            This is an overloaded function. See #BeginWrite for more details.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndWrite(System.IAsyncResult)">
            <summary>
            Ends an asynchronous write operation.
            </summary>
            <param name="result">The result returned from #BeginWrite method.</param>
            <returns>A list of StatusCodes that indicates for each node
            whether the write operation has been successful.</returns>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.WriteAsyncResult">
            <summary>
            Stores state information for asynchronous write operations.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginWrite(UnifiedAutomation.UaClient.Session.WriteAsyncResult)">
            <summary>
            Begins the write.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnWriteComplete(System.IAsyncResult)">
            <summary>
            Called when an asynchronous write operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.ChangeUser">
            <summary>
            Change user for the connection to the OPC UA server.
            </summary>
            <remarks>
            Calling this function changes the user of the session by calling
            ActivateSession with the new user identity.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.ChangeUser(UnifiedAutomation.UaClient.UserIdentity)">
            <summary>
            Change user for the connection to the OPC UA server.
            </summary>
            <remarks>
            Calling this function changes the user of the session by calling
            ActivateSession with the new user identity.
            </remarks>
            <param name="userIdentity">The user identity.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.ChangeUser(UnifiedAutomation.UaClient.UserIdentity,UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Change user for the connection to the OPC UA server.
            </summary>
            <remarks>
            Calling this function changes the user of the session by calling
            ActivateSession with the new user identity.
            </remarks>
            <param name="userIdentity">The user identity.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginChangeUser(System.AsyncCallback,System.Object)">
            <summary>
            Change user for the connection to the OPC UA server asynchronously.
            </summary>
            <remarks>
            Calling this function changes the user of the session by calling
            ActivateSession with the new user identity.
            </remarks>
            <param name = "callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the #EndChangeUser method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginChangeUser(UnifiedAutomation.UaClient.UserIdentity,UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Change user for the connection to the OPC UA server asynchronously.
            </summary>
            <remarks>
            Calling this function changes the user of the session by calling
            ActivateSession with the new user identity.
            </remarks>
            <param name="userIdentity">The user identity.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the #EndChangeUser method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndChangeUser(System.IAsyncResult)">
            <summary>
            Completes an asynchronous change user request.
            </summary>
            <param name="result">The result returned from #BeginChangeUser method</param>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.ChangeUserAsyncResult">
            <summary>
            Stores state information for asynchronous change user operations.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnChangeUserComplete(System.IAsyncResult)">
            <summary>
            Called when an asynchronous change user operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.Browse(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaClient.BrowseContext,UnifiedAutomation.UaClient.RequestSettings,System.Byte[]@)">
             <summary>
             Browse the OPC UA server’s address space with a single starting node.
             </summary>
             <remarks>
             The Browse Service is used by a client to navigate through the
             Address Space by passing a starting Node and browse filters. The
             server returns the list of referenced nodes matching the filter
             criteria.
            
             The Browse Service takes a list of starting Nodes and returns a list
             of connected Nodes for each starting Node. Nevertheless, most clients
             will only pass one starting Node for the main purpose of building a
             tree hierarchy. Since the OPC UA Address Space can be a full-meshed
             network and is not limited to a pure hierarchy, the capability to pass
             in a list of starting Nodes is mainly used to browse metadata like the
             Properties of a list of Variables. The client SDK provides different
             browse methods, one for a single starting Node and one for a list of
             starting Nodes.
            
             This simplified browse method is used for a single starting node.
             </remarks>
             <param name = "nodeToBrowse">NodeId of the starting Node.</param>
             <param name = "browseContext">Filter settings for the browse
             call. See BrowseContext for more details.</param>
             <param name = "settings">The general settings for the request. If
             null, the default settings from the property
             #DefaultRequestSettings are used.</param>
             <param name = "continuationPoint">A continuation point that can be
             passed to browseNext to get the remaining results.<br/>
             A continuation point is returned when the server was not able to
             deliver all results in the Browse response. The limitation can be set
             by the client in the request or by the server during Browse
             processing.</param>
             <returns>List of references and target Node information for the
             Nodes passing the filter criteria set in the request.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.Browse(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaClient.BrowseContext,System.Byte[]@)">
            <summary>
            Browse the OPC UA server’s address space with a single starting node.
            </summary>
            <remarks>
            This is an overloaded function. See #Browse for more details.
            </remarks>
            <param name="nodeToBrowse">NodeId of the starting node.</param>
            <param name = "browseContext">Filter settings for the browse
            call. See BrowseContext for more details.</param>
            <param name = "continuationPoint">A continuation point that can be
            passed to browseNext to get the remaining results.<br/>
            A continuation point is returned when the server was not able to
            deliver all results in the Browse response. The limitation can be set
            by the client in the request or by the server during Browse
            processing.</param>
            <returns>List of references and target Node information for the
            Nodes passing the filter criteria set in the request.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.Browse(UnifiedAutomation.UaBase.NodeId,System.Byte[]@)">
            <summary>
            Browse the OPC UA server’s address space with a single starting node.
            </summary>
            <remarks>
            This is an overloaded function. See #Browse for more details.
            </remarks>
            <param name="nodeToBrowse">NodeId of the starting node.</param>
            <param name = "continuationPoint">A continuation point that can be
            passed to browseNext to get the remaining results.<br/>
            A continuation point is returned when the server was not able to
            deliver all results in the Browse response. The limitation can be set
            by the client in the request or by the server during Browse
            processing.</param>
            <returns>List of references and target Node information. This
            method returns only forward hierarchial references.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginBrowse(UnifiedAutomation.UaBase.NodeId,System.AsyncCallback,System.Object)">
             <summary>
             Asynchronously browse the OPC UA server’s address space with a
             single starting node.
             </summary>
             <remarks>
             The Browse Service is used by a client to navigate through the
             Address Space by passing a starting Node and browse filters. The
             server returns the list of referenced nodes matching the filter
             criteria.
            
             The Browse Service takes a list of starting Nodes and returns a
             list of connected Nodes for each starting Node. Nevertheless, most
             clients will only pass one starting Node for the main purpose of
             building a tree hierarchy. Since the OPC UA Address Space can be a
             full-meshed network and is not limited to a pure hierarchy, the
             capability to pass in a list of starting Nodes is mainly used to
             browse metadata like the Properties of a list of Variables. The client
             SDK provides different browse methods, one for a single starting Node
             and one for a list of starting Nodes.
            
             This simplified browse method is used for a single starting node.
             </remarks>
             <param name="nodeToBrowse">NodeId of the starting node.</param>
             <param name="callback">The callback to use when the async call completes.</param>
             <param name="userData">The user data that is passed to the callback.</param>
             <remarks>
             This method returns only forward hierarchial references.
             </remarks>
             <returns>An object which must be passed to the #EndBrowse
             method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginBrowse(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaClient.BrowseContext,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously browse the OPC UA server’s address space with a
            single starting node.
            </summary>
            <remarks>
            This is an overloaded function. See #BeginBrowse for more details.
            </remarks>
            <param name="nodeToBrowse">NodeId of the starting node.</param>
            <param name="browseContext">Filter settings for the browse
            call. See BrowseContext for more details.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the #EndBrowse method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginBrowse(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaClient.BrowseContext,UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously browse the OPC UA server’s address space with a
            single starting node.
            </summary>
            <remarks>
            This is an overloaded function. See #BeginBrowse for more details.
            </remarks>
            <param name="nodeToBrowse">NodeId of the starting node.</param>
            <param name="browseContext">Filter settings for the browse
            call. See BrowseContext for more details.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property #DefaultRequestSettings
            are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the #EndBrowse method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndBrowse(System.IAsyncResult,System.Byte[]@)">
            <summary>
            Completes an ansynchronous browse operation.
            </summary>
            <param name="result">The object returned from the #BeginBrowse method.</param>
            <param name = "continuationPoint">A continuation point that can be
            passed to browseNext to get the remaining results.<br/>
            A continuation point is returned when the server was not able to
            deliver all results in the Browse response. The limitation can be set
            by the client in the request or by the server during Browse
            processing.</param>
            <returns>List of references and target Node information for the
            Nodes passing the filter criteria set in the request. </returns>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.BrowseAsyncResult">
            <summary>
            Stores state information for asynchronous browse operations.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnBrowseComplete(System.IAsyncResult)">
            <summary>
            Called when an asynchronous browse operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BrowseNext(System.Byte[]@)">
            <summary>
            Continues a previous Browse request.
            </summary>
            <remarks>
            This method is only used to continue a browse started with the
            browse method if not all results could be returned by the browse or a
            following browseNext call. The number of Nodes to return can be
            limited by the client in the browse request or by the Server during
            processing the Browse Service call. `continuationPoint` is overwritten
            to indicate whether there are still results remaining which haven’t
            been returned yet. This `continuationPoint` can be passed to another
            BrowseNext call.
            </remarks>
            <param name="continuationPoint">Continuation points returned from
            a previous browse or browseNext call.</param>
            <returns>List of references and target Node information for the
            Nodes passing the filter criteria set in the request. </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BrowseNext(UnifiedAutomation.UaClient.RequestSettings,System.Byte[]@)">
            <summary>
            Continues a previous Browse request.
            </summary>
            <remarks>This is an overloaded function. See #BrowseNext for more details.</remarks>
            <param name = "settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <param name = "continuationPoint">Continuation points returned
            from a previous browse or browseNext call. A continuation point is
            returned when the server was not able to deliver all results in the
            BrowseNext response.</param>
            <returns>List of references and target Node information for the
            Nodes passing the filter criteria set in the first browse call
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginBrowseNext(System.Byte[],System.AsyncCallback,System.Object)">
            <summary>
            Continues a previous Browse request asynchronously.
            </summary>
            <remarks>
            This method is only used to continue a browse started with the
            browse method if not all results could be returned by the browse or a
            following browseNext call. The number of Nodes to return can be
            limited by the client in the browse request or by the Server during
            processing the Browse Service call.
            </remarks>
            <param name="continuationPoint">Continuation points returned from
            a previous browse or browseNext call. A continuation point is returned
            when the server was not able to deliver all results in the BrowseNext
            response.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the #EndBrowse method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginBrowseNext(System.Byte[],UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Continues a previous Browse request asynchronously.
            </summary>
            <remarks>This is an overloaded function. See #BeginBrowseNext
            for more details.</remarks>
            <param name="continuationPoint">Continuation points returned from
            a previous browse or browseNext call. A continuation point is returned
            when the server was not able to deliver all results in the BrowseNext
            response.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the #EndBrowse method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnBrowseNextComplete(System.IAsyncResult)">
            <summary>
            Called when an asynchronous browse next operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BrowseList(System.Collections.Generic.List{UnifiedAutomation.UaBase.BrowseDescription})">
             <summary>
             Browse the OPC UA server’s address space with a list of starting nodes.
             </summary>
             <remarks>
             The Browse Service is used by a client to navigate through the Address
             Space by passing a starting Node and browse filters. The server
             returns the list of referenced nodes matching the filter criteria.
            
             The Browse Service takes a list of starting Nodes and
             returns a list of connected Nodes for each starting
             Node. Nevertheless, most clients will only pass one starting Node for
             the main purpose of building a tree hierarchy. Since the OPC UA
             Address Space can be a full-meshed network and is not limited to a
             pure hierarchy, the capability to pass in a list of starting Nodes is
             mainly used to browse metadata like the Properties of a list of
             Variables. The client SDK provides different browse methods, one for a
             single starting Node and one for a list of starting Nodes.
            
             This browse method is used for a list of starting nodes.
             </remarks>
             <param name="nodesToBrowse">List of browse descriptions for each
              starting node.</param>
             <returns>List of references and target Node information for the
             Nodes passing the filter criteria set in the request.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BrowseList(UnifiedAutomation.UaBase.ViewDescription,System.Collections.Generic.List{UnifiedAutomation.UaBase.BrowseDescription},System.UInt32,UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Browse the OPC UA server’s address space with a list of starting nodes.
            </summary>
            <remarks>This is an overloaded function. See #BrowseList for more details.</remarks>
            <param name="view">View used for the browse.</param>
            <param name="nodesToBrowse">List of browse descriptions for each
            starting node.</param>
            <param name="maxReferencesPerBrowse">The maximum number of
            references per browse.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <returns>List of references and target Node information for the
            Nodes passing the filter criteria set in the request. </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginBrowseList(System.Collections.Generic.List{UnifiedAutomation.UaBase.BrowseDescription},System.AsyncCallback,System.Object)">
             <summary>
             Browse OPC server address space with a list of starting nodes asynchronously.
             </summary>
             <remarks>
            
             The Browse Service is used by a client to navigate through the Address
             Space by passing a starting Node and browse filters. The server
             returns the list of referenced nodes matching the filter criteria.
            
             The Browse Service takes a list of starting Nodes and returns a list
             of connected Nodes for each starting Node. Nevertheless, most clients
             will only pass one starting Node for the main purpose of building a
             tree hierarchy. Since the OPC UA Address Space can be a full-meshed
             network and is not limited to a pure hierarchy, the capability to pass
             in a list of starting Nodes is mainly used to browse metadata like the
             Properties of a list of Variables. The client SDK provides different
             browse methods, one for a single starting Node and one for a list of
             starting Nodes.
            
             This browse method is used for a list of starting nodes.
             </remarks>
             <param name="nodesToBrowse">List of browse descriptions for each starting node.</param>
             <param name="callback">The callback to use when the async call completes.</param>
             <param name="userData">The user data that is passed to the callback.</param>
             <returns>An object which must be passed to the #EndBrowseList method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginBrowseList(UnifiedAutomation.UaBase.ViewDescription,System.Collections.Generic.List{UnifiedAutomation.UaBase.BrowseDescription},System.UInt32,UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Browse OPC server address space with a list of starting nodes asynchronously.
            </summary>
            <remarks>This is an overloaded function. See #BeginBrowseList for more details.</remarks>
            <param name="view">View used for the browse.</param>
            <param name="nodesToBrowse">List of browse descriptions for each starting node.</param>
            <param name="maxReferencesPerBrowse">The maximum number of references per browse.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the #EndBrowseList method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndBrowseList(System.IAsyncResult)">
            <summary>
            Completes an ansynchronous browse list operation.
            </summary>
            <param name="result">The object returned from the #BeginBrowseList method.</param>
            <returns>List of references and target Node information for the
            Nodes passing the filter criteria set in the request.</returns>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.BrowseListAsyncResult">
            <summary>
            Stores state information for asynchronous browse operations.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnBrowseListComplete(System.IAsyncResult)">
            <summary>
            Called when an asynchronous browse operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.ReleaseBrowseContinuationPoint(System.Byte[])">
            <summary>
            Releases the browse continuation point.
            </summary>
            <param name="continuationPoint">The continuation point to release.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.ReleaseBrowseContinuationPoint(System.Byte[],UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Releases the browse continuation point.
            </summary>
            <param name="continuationPoint">The continuation point to release.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginReleaseBrowseContinuationPoint(System.Byte[],System.AsyncCallback,System.Object)">
            <summary>
            Begins a release browse continuation point operation.
            </summary>
            <param name="continuationPoint">The continuation point to release.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the
            #EndReleaseBrowseContinuationPoint method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginReleaseBrowseContinuationPoint(System.Byte[],UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Begins a release browse continuation point operation.
            </summary>
            <param name="continuationPoint">The continuation point to release.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the
            #EndReleaseBrowseContinuationPoint method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndReleaseBrowseContinuationPoint(System.IAsyncResult)">
            <summary>
            Ends an asynchronous release browse continuation point operation.
            </summary>
            <param name="result">The object returned from the
            #BeginReleaseBrowseContinuationPoint method.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.TranslateBrowsePath(System.Collections.Generic.IList{UnifiedAutomation.UaBase.BrowsePath})">
            <summary>
            Translates a browse path to a NodeId.
            </summary>
            <remarks>
            This Service is used to access components of an Object based on
            the knowledge about the ObjectType. Since the NodeId of a Node is
            needed to access information provided by the Node like subscribing for
            Variable Value changes or to call a Method, it is necessary to know
            the NodeIds of components of Objects. Since OPC UA allows programming
            software components with built-in knowledge of ObjectTypes, UA needs
            to provide a mechanism to return the NodeIds for components of an
            Object instance based on the knowledge about the ObjectType. This
            mechanism is built on the requirement that the BrowseNames of
            components in the instance must be the same like BrowseNames of
            components in the type.
            </remarks>
            <param name = "pathsToTranslate">The list of browse paths for which NodeIds are requested</param>
            <returns>A list of BrowsePathResults containing information about the success of
            the <see cref="M:UnifiedAutomation.UaBase.SessionClient.TranslateBrowsePathsToNodeIds(UnifiedAutomation.UaBase.RequestHeader,UnifiedAutomation.UaBase.BrowsePathCollection,UnifiedAutomation.UaBase.BrowsePathResultCollection@,UnifiedAutomation.UaBase.DiagnosticInfoCollection@)">
            TranslateBrowsePathsToNodeIds</see> call and the targets of this call.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.TranslateBrowsePath(System.Collections.Generic.IList{UnifiedAutomation.UaBase.BrowsePath},UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Translates a browse path to a NodeId.
            </summary>
            <remarks>This is an overloaded function. See #TranslateBrowsePath for more details.</remarks>
            <param name="pathsToTranslate">The list of browse paths for which NodeIds are requested</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property #DefaultRequestSettings
            are used.</param>
            <returns>A list of BrowsePathResults containing information about the success of
            the <see cref="M:UnifiedAutomation.UaBase.SessionClient.TranslateBrowsePathsToNodeIds(UnifiedAutomation.UaBase.RequestHeader,UnifiedAutomation.UaBase.BrowsePathCollection,UnifiedAutomation.UaBase.BrowsePathResultCollection@,UnifiedAutomation.UaBase.DiagnosticInfoCollection@)">
            TranslateBrowsePathsToNodeIds</see> call and the targets of this call.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.TranslateBrowsePath(UnifiedAutomation.UaBase.NodeId,System.Collections.Generic.IList{System.String})">
            <summary>
            Translates a browse path to a NodeId.
            </summary>
            <remarks>This is an overloaded function. See #TranslateBrowsePath for more details.</remarks>
            <param name="startingNodeId">The NodeId of the starting node.</param>
            <param name="browsePaths">A list of browse paths to translate.</param>
            <returns>A list of BrowsePathResults containing information about the success of
            the <see cref="M:UnifiedAutomation.UaBase.SessionClient.TranslateBrowsePathsToNodeIds(UnifiedAutomation.UaBase.RequestHeader,UnifiedAutomation.UaBase.BrowsePathCollection,UnifiedAutomation.UaBase.BrowsePathResultCollection@,UnifiedAutomation.UaBase.DiagnosticInfoCollection@)">
            TranslateBrowsePathsToNodeIds</see> call and the targets of this call.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.TranslateBrowsePath(UnifiedAutomation.UaBase.NodeId,System.Collections.Generic.IList{System.String},UnifiedAutomation.UaBase.NamespaceTable,UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Translates a browse path to a NodeId.
            </summary>
            <remarks>This is an overloaded function. See #TranslateBrowsePath for more details.</remarks>
            <param name="startingNodeId">The NodeId of the starting node.</param>
            <param name="browsePaths">A list of browse paths to translate.</param>
            <param name="namespaceUris">The table of namespaces referenced by
            the browse paths (if null the session namespace table is
            assumed).</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <returns>A list of BrowsePathResults containing information about the success of
            the <see cref="M:UnifiedAutomation.UaBase.SessionClient.TranslateBrowsePathsToNodeIds(UnifiedAutomation.UaBase.RequestHeader,UnifiedAutomation.UaBase.BrowsePathCollection,UnifiedAutomation.UaBase.BrowsePathResultCollection@,UnifiedAutomation.UaBase.DiagnosticInfoCollection@)">
            TranslateBrowsePathsToNodeIds</see> call and the targets of this call.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginTranslateBrowsePath(System.Collections.Generic.IList{UnifiedAutomation.UaBase.BrowsePath},System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously translates a browse path to a NodeId.
            </summary>
            <remarks>
            This Service is used to access components of an Object based on
            the knowledge about the ObjectType. Since the NodeId of a Node is
            needed to access information provided by the Node like subscribing for
            Variable Value changes or to call a Method, it is necessary to know
            the NodeIds of components of Objects. Since OPC UA allows programming
            software components with built-in knowledge of ObjectTypes, UA needs
            to provide a mechanism to return the NodeIds for components of an
            Object instance based on the knowledge about the ObjectType. This
            mechanism is built on the requirement that the BrowseNames of
            components in the instance must be the same like BrowseNames of
            components in the type.
            </remarks>
            <param name="pathsToTranslate">The list of browse paths for which NodeIds are requested.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the #EndTranslateBrowsePath method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginTranslateBrowsePath(UnifiedAutomation.UaBase.NodeId,System.Collections.Generic.IList{System.String},System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously translates a browse path to a NodeId.
            </summary>
            <remarks>This is an overloaded function. See
            #BeginTranslateBrowsePath for more details.</remarks>
            <param name="startingNodeId">The nodeId of the starting node.</param>
            <param name="browsePaths">A list of browse paths to translate.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the #EndTranslateBrowsePath method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginTranslateBrowsePath(UnifiedAutomation.UaBase.NodeId,System.Collections.Generic.IList{System.String},UnifiedAutomation.UaBase.NamespaceTable,UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously translates a browse path to a NodeId.
            </summary>
            <remarks>This is an overloaded function. See #BeginTranslateBrowsePath for more details.</remarks>
            <param name="startingNodeId">The NodeId of the starting node.</param>
            <param name="browsePaths">A list of browse paths to translate.</param>
            <param name="namespaceUris">The table of namespace referenced by
            the browse paths (if null the session namespace table is
            assumed).</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the #EndTranslateBrowsePath method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginTranslateBrowsePath(System.Collections.Generic.IList{UnifiedAutomation.UaBase.BrowsePath},UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously translates a browse path to a NodeId.
            </summary>
            <remarks>This is an overloaded function. See #BeginTranslateBrowsePath for more details.</remarks>
            <param name="pathsToTranslate">The list of browse paths for which NodeIds are requested.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the #EndTranslateBrowsePath method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndTranslateBrowsePath(System.IAsyncResult)">
            <summary>
            Ends an asynchronous translate browse path operation.
            </summary>
            <param name="result">The object returned from the #BeginTranslateBrowsePath method.</param>
            <returns>A list of BrowsePathResults containing information about the success of
            the <see cref="M:UnifiedAutomation.UaBase.SessionClient.TranslateBrowsePathsToNodeIds(UnifiedAutomation.UaBase.RequestHeader,UnifiedAutomation.UaBase.BrowsePathCollection,UnifiedAutomation.UaBase.BrowsePathResultCollection@,UnifiedAutomation.UaBase.DiagnosticInfoCollection@)">
            TranslateBrowsePathsToNodeIds</see> call and the targets of this call.</returns>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.TranslateBrowsePathAsyncResult">
            <summary>
            Stores state information for asynchronous read operations.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginTranslateBrowsePath(UnifiedAutomation.UaClient.Session.TranslateBrowsePathAsyncResult)">
            <summary>
            Begins the read.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnTranslateBrowsePathComplete(System.IAsyncResult)">
            <summary>
            Called when an asynchronous read operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.Call(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Calls a method provided by an Object on the OPC server.
            </summary>
            <param name="objectToCall">The object providing the method.</param>
            <param name="methodToCall">The method to call.</param>
            <returns>List of output arguments for the method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.Call(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,System.Collections.Generic.List{UnifiedAutomation.UaBase.Variant},System.Collections.Generic.List{UnifiedAutomation.UaBase.StatusCode}@,System.Collections.Generic.List{UnifiedAutomation.UaBase.Variant}@)">
            <summary>
            Calls a method provided by an Object on the OPC server.
            </summary>
            <param name="objectToCall">The object providing the method.</param>
            <param name="methodToCall">The method to call.</param>
            <param name="inputArguments">List of input arguments for the
            method call.</param>
            <param name="inputArgumentErrors">The input argument errors.</param>
            <param name="outputArguments">List of output arguments of the method.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.Call(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,System.Collections.Generic.List{UnifiedAutomation.UaBase.Variant},UnifiedAutomation.UaClient.RequestSettings,System.Collections.Generic.List{UnifiedAutomation.UaBase.StatusCode}@,System.Collections.Generic.List{UnifiedAutomation.UaBase.Variant}@)">
            <summary>
            Calls a method provided by an Object on the OPC UA server.
            </summary>
            <param name="objectToCall">The object providing the method.</param>
            <param name="methodToCall">The method to call.</param>
            <param name="inputArguments">List of input arguments for the
            method call.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <param name="inputArgumentErrors">The input argument errors.</param>
            <param name="outputArguments">List of output arguments of the method.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginCall(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,System.Collections.Generic.List{UnifiedAutomation.UaBase.Variant},UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously calls a method provided by an Object on the OPC UA server.
            </summary>
            <param name="objectToCall">The object providing the method.</param>
            <param name="methodToCall">The method to call.</param>
            <param name="inputArguments">List of input arguments for the
            method call.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the #EndCall method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndCall(System.IAsyncResult)">
            <summary>
            Completes an asynchronous Call operation.
            </summary>
            <param name="result">The object returned from the #BeginCall method.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndCall(System.IAsyncResult,System.Collections.Generic.List{UnifiedAutomation.UaBase.StatusCode}@,System.Collections.Generic.List{UnifiedAutomation.UaBase.Variant}@)">
            <summary>
            Completes an asynchronous Call operation.
            </summary>
            <param name="result">The object returned from the BeginCall method.</param>
            <param name="inputArgumentErrors">The input argument errors.</param>
            <param name="outputArguments">List of output arguments of the method.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.CallList(System.Collections.Generic.IList{UnifiedAutomation.UaBase.CallMethodRequest},UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Calls a list of methods provided by an Object on the OPC server.
            </summary>
            <param name="methodsToCall">List of methods to call, containing
            ObjectId, MethodId, and InputArguments for each method.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <returns>A List of method call results including information
            whether the method call succeed and the output arguments for the
            method call.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginCallList(System.Collections.Generic.IList{UnifiedAutomation.UaBase.CallMethodRequest},UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously calls a list of methods provided by an Object on
            the OPC server.
            </summary>
            <param name="methodsToCall">List of methods to call, containing
            ObjectId, MethodId, and InputArguments for each method.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the #EndCallList method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndCallList(System.IAsyncResult)">
            <summary>
            Completes an asynchronous request to call a list of methods.
            </summary>
            <param name="result">The object returned from the #BeginCallList method.</param>
            <returns>A List of method call results including information
            whether the method call succeed and the output arguments for the
            method call.</returns>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.CallListAsyncResult">
            <summary>
            Stores state information for asynchronous browse operations.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginCallList(UnifiedAutomation.UaClient.Session.CallListAsyncResult)">
            <summary>
            Begins the read.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnCallListComplete(System.IAsyncResult)">
            <summary>
            Called when an asynchronous browse operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.HistoryReadRaw(System.Collections.Generic.IList{UnifiedAutomation.UaBase.HistoryReadValueId},UnifiedAutomation.UaBase.ReadRawModifiedDetails)">
            <summary>
            Reads the history of variable values synchronously from OPC server.
            </summary>
            <remarks>
            This method is used to read raw historical values of one or more
            nodes in an ordered sequence for the defined time domain. Continuation
            points are used to continue the read of the ordered sequence if not
            all data can be returned in one read. The returned number can be
            limited by the client or the server.
            See #ReleaseHistoryContinuationPoints for cleaning up
            resources in the server if read should not be continued with the
            returned continuation point.
            </remarks>
            <param name="nodesToRead">List of variable nodes to read data
            history from. Includes a continuation point to continue previous read
            requests.</param>
            <param name="details">Configuration parameters for the history
            read of raw data. Configuration parameters include
            - The start time of the requested time interval
            - The end time of the requested time interval
            - Setting whether bounding values should be returned
            - Limitation of the number of results per node
            </param>
            <returns>Result data for the requested nodes and time interval. A
            continuation point is included for a node if not all results could be
            returned.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.HistoryReadRaw(System.Collections.Generic.IList{UnifiedAutomation.UaBase.HistoryReadValueId},UnifiedAutomation.UaBase.ReadRawModifiedDetails,UnifiedAutomation.UaBase.TimestampsToReturn,UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Reads the history of variable values synchronously from OPC server.
            </summary>
            <remarks>
            This method is used to read raw historical values of one or more
            nodes in an ordered sequence for the defined time domain. Continuation
            points are used to continue the read of the ordered sequence if not
            all data can be returned in one read. The returned number can be
            limited by the client or the server.
            See #ReleaseHistoryContinuationPoints for cleaning up
            resources in the server if read should not be continued with the
            returned continuation point.
            </remarks>
            <param name="nodesToRead">List of variable nodes to read data
            history from. Includes a continuation point to continue previous read
            requests.</param>
            <param name="details">Configuration parameters for the history
            read of raw data. Configuration parameters include
            - The start time of the requested time interval
            - The end time of the requested time interval
            - Setting whether bounding values should be returned
            - Limitation of the number of results per node
            </param>
            <param name="timestampsToReturn">Enumeration for the timestamps to
            return with the values. Possible values are source, server or
            both. The option neither is invalid for history read.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <returns>Result data for the requested nodes and time interval. A
            continuation point is included for a node if not all results could be
            returned.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginHistoryReadRaw(System.Collections.Generic.IList{UnifiedAutomation.UaBase.HistoryReadValueId},UnifiedAutomation.UaBase.ReadRawModifiedDetails,System.AsyncCallback,System.Object)">
             <summary>
             Reads the history of variable values asynchronously from OPC server.
             </summary>
             <remarks>
             This method is used to read raw historical values of one or more
             nodes in an ordered sequence for the defined time domain. Continuation
             points are used to continue the read of the ordered sequence if not
             all data can be returned in one read. The returned number can be
             limited by the client or the server.
            
             See #ReleaseHistoryContinuationPoints for cleaning up resources in
             the server if read should not be continued with the returned
             continuation point.
             </remarks>
             <param name="nodesToRead">List of variable nodes to read data
             history from. Includes a continuation point to continue previous read
             requests.</param>
             <param name="details">Configuration parameters for the history
             read of raw data. Configuration parameters include
             - The start time of the requested time interval
             - The end time of the requested time interval
             - Setting whether bounding values should be returned
             - Limitation of the number of results per node
             </param>
             <param name="callback">The callback to use when the async call completes.</param>
             <param name="userData">The user data that is passed to the callback.</param>
             <returns>An object which must be passed to the #EndHistoryReadRaw method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginHistoryReadRaw(System.Collections.Generic.IList{UnifiedAutomation.UaBase.HistoryReadValueId},UnifiedAutomation.UaBase.ReadRawModifiedDetails,UnifiedAutomation.UaBase.TimestampsToReturn,UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
             <summary>
             Reads the history of variable values asynchronously from OPC server.
             </summary>
             <remarks>
             This method is used to read raw historical values of one or more
             nodes in an ordered sequence for the defined time domain. Continuation
             points are used to continue the read of the ordered sequence if not
             all data can be returned in one read. The returned number can be
             limited by the client or the server.
            
             See #ReleaseHistoryContinuationPoints for cleaning up resources in
             the server if read should not be continued with the returned
             continuation point.
             </remarks>
             <param name="nodesToRead">List of variable nodes to read data
             history from. Includes a continuation point to continue previous read
             requests.</param>
             <param name="details">Configuration parameters for the history
             read of raw data. Configuration parameters include
             - The start time of the requested time interval
             - The end time of the requested time interval
             - Setting whether bounding values should be returned
             - Limitation of the number of results per node
             </param>
             <param name="timestampsToReturn">Enumeration for the timestamps to
             return with the values. Possible values are <c>source</c>,
             <c>server</c> or <c>both</c>. The option <c>neither</c> is invalid for
             history read.</param>
             <param name="settings">The general settings for the request. If
             null, the default settings from the property #DefaultRequestSettings are used.</param>
             <param name="callback">The callback to use when the async call completes.</param>
             <param name="userData">The user data that is passed to the callback.</param>
             <returns>An object which must be passed to the #EndHistoryReadRaw method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndHistoryReadRaw(System.IAsyncResult)">
            <summary>
            Completes an asynchronous HistoryReadRaw operation.
            </summary>
            <param name="result">The object returned from the #BeginHistoryReadRaw method.</param>
            <returns>Result data for the requested nodes and time interval. A
            continuation point is included for a node if not all results could be
            returned.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.HistoryReadModified(System.Collections.Generic.IList{UnifiedAutomation.UaBase.HistoryReadValueId},UnifiedAutomation.UaBase.ReadRawModifiedDetails)">
             <summary>
             Reads the history of modified variable values synchronously from the OPC server.
             </summary>
             <remarks>
             This method is used to read modified historical values of one or
             more nodes in an ordered sequence for the defined time
             domain. Continuation points are used to continue the read of the
             ordered sequence if not all data can be returned in one read. The
             returned number can be limited by the client or the server.
            
             See #ReleaseHistoryContinuationPoints for cleaning up resources in
             the server if read should not be continued with the returned
             continuation point.
             </remarks>
             <param name="nodesToRead">List of variable nodes to read modified
             data history from. Includes a continuation point to continue previous
             read requests.</param>
             <param name="details">Configuration parameters for the history
             read of modified data. Configuration parameters include
             - The start time of the requested time interval
             - The end time of the requested time interval
             - Setting whether bounding values should be returned
             - Limitation of the number of results per node
             </param>
             <returns>Result data for the requested nodes and time interval. A
             continuation point is included for a node if not all results could be
             returned.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.HistoryReadModified(System.Collections.Generic.IList{UnifiedAutomation.UaBase.HistoryReadValueId},UnifiedAutomation.UaBase.ReadRawModifiedDetails,UnifiedAutomation.UaBase.TimestampsToReturn,UnifiedAutomation.UaClient.RequestSettings)">
             <summary>
             Reads the history of modified variable values synchronously from the OPC server.
             </summary>
             <remarks>
             This method is used to read modified historical values of one or
             more nodes in an ordered sequence for the defined time
             domain. Continuation points are used to continue the read of the
             ordered sequence if not all data can be returned in one read. The
             returned number can be limited by the client or the server.
            
             See #ReleaseHistoryContinuationPoints for cleaning up resources in
             the server if read should not be continued with the returned
             continuation point.
             </remarks>
             <param name="nodesToRead">List of variable nodes to read modified
             data history from. Includes a continuation point to continue previous
             read requests.</param>
             <param name="details">Configuration parameters for the history
             read of modified data. Configuration parameters include
             - The start time of the requested time interval
             - The end time of the requested time interval
             - Setting whether bounding values should be returned
             - Limitation of the number of results per node
             </param>
             <param name="timestampsToReturn">Enumeration for the timestamps to
             return with the values. Possible values are source, server or
             both. The option neither is invalid for history read.</param>
             <param name="settings">The general settings for the request. If
             null, the default settings from the property
             #DefaultRequestSettings are used.</param>
             <returns>Result data for the requested nodes and time interval. A
             continuation point is included for a node if not all results could be
             returned.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginHistoryReadModified(System.Collections.Generic.IList{UnifiedAutomation.UaBase.HistoryReadValueId},UnifiedAutomation.UaBase.ReadRawModifiedDetails,System.AsyncCallback,System.Object)">
             <summary>
             Reads the history of modified variable values asynchronously from the OPC server.
             </summary>
             <remarks>
             This method is used to read modified historical values of one or
             more nodes in an ordered sequence for the defined time
             domain. Continuation points are used to continue the read of the
             ordered sequence if not all data can be returned in one read. The
             returned number can be limited by the client or the server.
            
             See #ReleaseHistoryContinuationPoints for cleaning up resources in
             the server if read should not be continued with the returned
             continuation point.
             </remarks>
             <param name="nodesToRead">List of variable nodes to read modified
             data history from. Includes a continuation point to continue previous
             read requests.</param>
             <param name="details">Configuration parameters for the history
             read of modified data. Configuration parameters include
             - The start time of the requested time interval
             - The end time of the requested time interval
             - Setting whether bounding values should be returned
             - Limitation of the number of results per node
             </param>
             <param name="callback">The callback to use when the async call completes.</param>
             <param name="userData">The user data that is passed to the callback.</param>
             <returns>An object which must be passed to the #EndHistoryReadModified method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginHistoryReadModified(System.Collections.Generic.IList{UnifiedAutomation.UaBase.HistoryReadValueId},UnifiedAutomation.UaBase.ReadRawModifiedDetails,UnifiedAutomation.UaBase.TimestampsToReturn,UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
             <summary>
             Reads the history of modified variable values asynchronously from the OPC server.
             </summary>
             <remarks>
             This method is used to read modified historical values of one or
             more nodes in an ordered sequence for the defined time
             domain. Continuation points are used to continue the read of the
             ordered sequence if not all data can be returned in one read. The
             returned number can be limited by the client or the server.
            
             See #ReleaseHistoryContinuationPoints for cleaning up resources in
             the server if read should not be continued with the returned
             continuation point.
             </remarks>
             <param name="nodesToRead">List of variable nodes to read modified
             data history from. Includes a continuation point to continue previous
             read requests.</param>
             <param name="details">Configuration parameters for the history
             read of modified data. Configuration parameters include
             - The start time of the requested time interval
             - The end time of the requested time interval
             - Setting whether bounding values should be returned
             - Limitation of the number of results per node
             </param>
             <param name="timestampsToReturn">Enumeration for the timestamps to
             return with the values. Possible values are <c>source</c>,
             <c>server</c> or <c>both</c>. The option <c>neither</c> is invalid for
             history read.</param>
             <param name="settings">The general settings for the request. If
             null, the default settings from the property
             #DefaultRequestSettings are used.</param>
             <param name="callback">The callback to use when the async call completes.</param>
             <param name="userData">The user data that is passed to the callback.</param>
             <returns>An object which must be passed to the #EndHistoryReadModified method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndHistoryReadModified(System.IAsyncResult)">
            <summary>
            Completes an asynchronous HistoryReadModified operation.
            </summary>
            <param name="result">The object returned from the #BeginHistoryReadModified method.</param>
            <returns>Result data for the requested nodes and time interval. A
            continuation point is included for a node if not all results could be
            returned.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.HistoryReadProcessed(System.Collections.Generic.IList{UnifiedAutomation.UaBase.HistoryReadValueId},UnifiedAutomation.UaBase.ReadProcessedDetails)">
             <summary>
             Reads the processed history of variable values synchronously from
             the OPC server based on a passed aggregate.
             </summary>
             <remarks>
             This method is used to read processed historical values of one or
             more nodes in an ordered sequence for the defined time domain.
             Continuation points are used to continue the read of the ordered
             sequence if not all data can be returned in one read or if the server
             was not able to finish the processing before the timeout expired. The
             returned number can be limited by the server and may be 0 if the
             server was not able to finish one calculation before the service
             timeout expired.
            
             See #ReleaseHistoryContinuationPoints for cleaning up resources in
             the server if read should not be continued with the returned
             continuation point.
            
             The processed values are calculated with the specified aggregate based
             on the raw data in the history database. The server must use start
             time, end time, and the resample interval to generate a sequence of
             time intervals and then calculate an aggregate for each interval.
             </remarks>
             <param name="nodesToRead">List of variable nodes to read processed
             data history from. Includes a continuation point to continue previous
             read requests.</param>
             <param name="details">Configuration parameters for the history
             read of processed data. Configuration parameters include
             - The start time of the requested time domain
             - The end time of the requested time domain
             - Time processing interval used to calculate one aggregated value
               from the raw values
             - The NodeId of the aggregate used for the calculation of the values
             </param>
             <returns>Result data for the requested nodes, time domain and
             aggregates. A continuation point is included for a node if not all
             results could be returned or processed before the timeout
             expired.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.HistoryReadProcessed(System.Collections.Generic.IList{UnifiedAutomation.UaBase.HistoryReadValueId},UnifiedAutomation.UaBase.ReadProcessedDetails,UnifiedAutomation.UaBase.TimestampsToReturn,UnifiedAutomation.UaClient.RequestSettings)">
             <summary>
             Reads the processed history of variable values synchronously from
             the OPC server based on a passed aggregate.
             </summary>
             <remarks>
             This method is used to read processed historical values of one or
             more nodes in an ordered sequence for the defined time domain.
             Continuation points are used to continue the read of the ordered
             sequence if not all data can be returned in one read or if the server
             was not able to finish the processing before the timeout expired. The
             returned number can be limited by the server and may be 0 if the
             server was not able to finish one calculation before the service
             timeout expired.
            
             See #ReleaseHistoryContinuationPoints for cleaning
             up resources in the server if read should not be continued with the
             returned continuation point.
            
             The processed values are calculated with the specified aggregate
             based on the raw data in the history database. The server must use
             start time, end time, and the resample interval to generate a sequence
             of time intervals and then calculate an aggregate for each interval.
             </remarks>
             <param name="nodesToRead">List of variable nodes to read processed
             data history from. Includes a continuation point to continue previous
             read requests.</param>
             <param name="details">Configuration parameters for the history
             read of processed data. Configuration parameters include
             - The start time of the requested time domain
             - The end time of the requested time domain
             - Time processing interval used to calculate one aggregated value
             from the raw values
             - The NodeId of the aggregate used for the calculation of the values
             </param>
             <param name="timestampsToReturn">Enumeration for the timestamps to
             return with the values. Possible values are source, server or
             both. The option neither is invalid for history read.</param>
             <param name="settings">The general settings for the request. If
             null, the default settings from the property
             #DefaultRequestSettings are used.</param>
             <returns>Result data for the requested nodes, time domain and
             aggregates. A continuation point is included for a node if not all
             results could be returned or processed before the timeout
             expired.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginHistoryReadProcessed(System.Collections.Generic.IList{UnifiedAutomation.UaBase.HistoryReadValueId},UnifiedAutomation.UaBase.ReadProcessedDetails,System.AsyncCallback,System.Object)">
             <summary>
             Reads the processed history of variable values asynchronously from
             the OPC server based on a passed aggregate.
             </summary>
             <remarks>
             This method is used to read processed historical values of one or more
             nodes in an ordered sequence for the defined time domain.
             Continuation points are used to continue the read of the ordered
             sequence if not all data can be returned in one read or if the server
             was not able to finish the processing before the timeout expired. The
             returned number can be limited by the server and may be 0 if the
             server was not able to finish one calculation before the service
             timeout expired.
            
             See #ReleaseHistoryContinuationPoints for cleaning up resources in the
             server if read should not be continued with the returned continuation
             point.
            
             The processed values are calculated with the specified aggregate based
             on the raw data in the history database. The server must use start
             time, end time, and the resample interval to generate a sequence of
             time intervals and then calculate an aggregate for each interval.
             </remarks>
             <param name="nodesToRead">List of variable nodes to read processed
             data history from. Includes a continuation point to continue previous
             read requests.</param>
             <param name="details">Configuration parameters for the history
             read of processed data. Configuration parameters include
             - The start time of the requested time domain
             - The end time of the requested time domain
             - Time processing interval used to calculate one aggregated value
             from the raw values
             - The NodeId of the aggregate used for the calculation of the values
             </param>
             <param name="callback">The callback to use when the async call completes.</param>
             <param name="userData">The user data that is passed to the callback.</param>
             <returns>An object which must be passed to the
             #EndHistoryReadProcessed method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginHistoryReadProcessed(System.Collections.Generic.IList{UnifiedAutomation.UaBase.HistoryReadValueId},UnifiedAutomation.UaBase.ReadProcessedDetails,UnifiedAutomation.UaBase.TimestampsToReturn,UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
             <summary>
             Reads the processed history of variable values asynchronously from
             the OPC server based on a passed aggregate.
             </summary>
             <remarks>
             This method is used to read processed historical values of one or more
             nodes in an ordered sequence for the defined time domain.
             Continuation points are used to continue the read of the ordered
             sequence if not all data can be returned in one read or if the server
             was not able to finish the processing before the timeout expired. The
             returned number can be limited by the server and may be 0 if the
             server was not able to finish one calculation before the service
             timeout expired.
            
             See #ReleaseHistoryContinuationPoints for cleaning up resources in the
             server if read should not be continued with the returned continuation
             point.
            
             The processed values are calculated with the specified aggregate based
             on the raw data in the history database. The server must use start
             time, end time, and the resample interval to generate a sequence of
             time intervals and then calculate an aggregate for each interval.
             </remarks>
             <param name="nodesToRead">List of variable nodes to read processed
             data history from. Includes a continuation point to continue previous
             read requests.</param>
             <param name="details">Configuration parameters for the history
             read of processed data. Configuration parameters include
             - The start time of the requested time domain
             - The end time of the requested time domain
             - Time processing interval used to calculate one aggregated value
             from the raw values
             - The NodeId of the aggregate used for the calculation of the values
             </param>
             <param name="timestampsToReturn">Enumeration for the timestamps to
             return with the values. Possible values are <c>source</c>,
             <c>server</c> or <c>both</c>. The option <c>neither</c> is invalid for
             history read.</param>
             <param name="settings">The general settings for the request. If
             null, the default settings from the property #DefaultRequestSettings are used.</param>
             <param name="callback">The callback to use when the async call completes.</param>
             <param name="userData">The user data that is passed to the callback.</param>
             <returns>An object which must be passed to the #EndHistoryReadProcessed method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndHistoryReadProcessed(System.IAsyncResult)">
            <summary>
            Completes an asynchronous HistoryReadProcessed operation.
            </summary>
            <param name="result">The object returned from the #BeginHistoryReadProcessed method.</param>
            <returns>Result data for the requested nodes, time domain and
            aggregates. A continuation point is included for a node if not all
            results could be returned or processed before the timeout
            expired.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.HistoryReadAtTime(System.Collections.Generic.IList{UnifiedAutomation.UaBase.HistoryReadValueId},UnifiedAutomation.UaBase.ReadAtTimeDetails)">
            <summary>
            Reads the history of item values synchronously from the OPC server
            for the given timestamps.
            </summary>
            <param name="nodesToRead">List of variable nodes to read data
            values at specified timestamps from.</param>
            <param name="details">Configuration parameters for the history
            read of data at specified timestamps. Configuration parameters include
            - Array of timestamps for which values are to be read
            - Flag for bounding value calculation
            </param>
            <returns>Result data for the requested nodes and time stamps.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.HistoryReadAtTime(System.Collections.Generic.IList{UnifiedAutomation.UaBase.HistoryReadValueId},UnifiedAutomation.UaBase.ReadAtTimeDetails,UnifiedAutomation.UaBase.TimestampsToReturn,UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Reads the history of item values synchronously from the OPC server
            for the given timestamps.
            </summary>
            <param name="nodesToRead">List of variable nodes to read data
            values at specified timestamps from.</param>
            <param name="details">Configuration parameters for the history
            read of data at specified timestamps. Configuration parameters include
            - Array of timestamps for which values are to be read
            - Flag for bounding value calculation
            </param>
            <param name="timestampsToReturn">Enumeration for the timestamps to
            return with the values. Possible values are <c>source</c>,
            <c>server</c> or <c>both</c>. The option <c>neither</c> is invalid for
            history read.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <returns>Result data for the requested nodes and time stamps.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginHistoryReadAtTime(System.Collections.Generic.IList{UnifiedAutomation.UaBase.HistoryReadValueId},UnifiedAutomation.UaBase.ReadAtTimeDetails,System.AsyncCallback,System.Object)">
            <summary>
            Reads the history of item values asynchronously from the OPC
            server for the given timestamps.
            </summary>
            <param name="nodesToRead">List of variable nodes to read data
            values at specified timestamps from.</param>
            <param name="details">Configuration parameters for the history
            read of data at specified timestamps.
            Configuration parameters include
            - Array of timestamps for which values are to be read
            - Flag for bounding value calculation
            </param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the EndHistoryReadAtTime() method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginHistoryReadAtTime(System.Collections.Generic.IList{UnifiedAutomation.UaBase.HistoryReadValueId},UnifiedAutomation.UaBase.ReadAtTimeDetails,UnifiedAutomation.UaBase.TimestampsToReturn,UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Reads the history of item values asynchronously from the OPC
            server for the given timestamps.
            </summary>
            <param name="nodesToRead">List of variable nodes to read data
            values at specified timestamps from.</param>
            <param name="details">Configuration parameters for the history
            read of data at specified timestamps.
            Configuration parameters include
            - Array of timestamps for which values are to be read
            - Flag for bounding value calculation
            </param>
            <param name="timestampsToReturn">Enumeration for the timestamps to
            return with the values. Possible values are <c>source</c>,
            <c>server</c> or <c>both</c>. The option <c>neither</c> is invalid for
            history read.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property #DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the #EndHistoryReadAtTime method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndHistoryReadAtTime(System.IAsyncResult)">
            <summary>
            Completes an asynchronous HistoryReadAtTime operation.
            </summary>
            <param name="result">The object returned from the #BeginHistoryReadAtTime method.</param>
            <returns>Result data for the requested nodes and time stamps.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.ReleaseHistoryContinuationPoints(System.Collections.Generic.IList{UnifiedAutomation.UaBase.HistoryReadValueId})">
            <summary>
            Releases the history continuation points.
            </summary>
            <param name="nodesToRead">The nodes with information about the history continuation
            points to release.</param>
            <returns>Any errors that occurred when releasing the continuation points.</returns>
            <remarks>This overload only works with data returned with a call to ReadRaw.</remarks>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.ReleaseHistoryContinuationPoints(System.Collections.Generic.IList{UnifiedAutomation.UaBase.HistoryReadValueId},UnifiedAutomation.UaBase.HistoryReadDetails,UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Releases the history continuation points.
            </summary>
            <param name="nodesToRead">The nodes with information about the history continuation
            points to release.</param>
            <param name="details">The structure that matches the request used to originally read the data (ReadRawModifiedDetails, ReadAtTimeDetails or ReadProcessedDetails).</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property #DefaultRequestSettings are used.</param>
            <returns>Any errors that occurred when releasing the continuation points.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginReleaseHistoryContinuationPoints(System.Collections.Generic.IList{UnifiedAutomation.UaBase.HistoryReadValueId},System.AsyncCallback,System.Object)">
            <summary>
            Begins a release history continuation point operation.
            </summary>
            <param name="nodesToRead">The nodes to read.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the #EndReleaseHistoryContinuationPoints method.</returns>
            <remarks>This overload only works with data returned with a call to ReadRaw.</remarks>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginReleaseHistoryContinuationPoints(System.Collections.Generic.IList{UnifiedAutomation.UaBase.HistoryReadValueId},UnifiedAutomation.UaBase.HistoryReadDetails,UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Begins a release history continuation point operation.
            </summary>
            <param name="nodesToRead">The nodes to read.</param>
            <param name="details">The structure that matches the request used to originally read the data (ReadRawModifiedDetails, ReadAtTimeDetails or ReadProcessedDetails).</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property #DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the #EndReleaseHistoryContinuationPoints method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndReleaseHistoryContinuationPoints(System.IAsyncResult)">
            <summary>
            Ends an asynchronous release history continuation point operation.
            </summary>
            <param name="result">The object returned from the #BeginReleaseHistoryContinuationPoints method.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.HistoryUpdateData(System.Collections.Generic.IList{UnifiedAutomation.UaBase.UpdateDataDetails})">
            <summary>
            Updates the history for a list of variables.
            </summary>
            <param name="nodesToUpdate">The list of variable nodes to update,
            including the data provided for the update.</param>
            <returns>The results for the update operation.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.HistoryUpdateData(System.Collections.Generic.IList{UnifiedAutomation.UaBase.UpdateDataDetails},UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Updates the history for a list of variables.
            </summary>
            <param name="nodesToUpdate">The list of variable nodes to update,
            including the data provided for the update.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <returns>The results for the update operation.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginHistoryUpdateData(System.Collections.Generic.IList{UnifiedAutomation.UaBase.UpdateDataDetails},UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Begins an operation to update the history for a list of variables.
            </summary>
            <param name="nodesToUpdate">The list of variable nodes to update,
            including the data provided for the update.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the #EndHistoryUpdateData method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndHistoryUpdateData(System.IAsyncResult)">
            <summary>
            Ends an operation to update the history for a list of variables.
            </summary>
            <param name="result">The object returned from the #BeginHistoryUpdateData method.</param>
            <returns>The results for the update operation.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.HistoryUpdateStructureData(System.Collections.Generic.IList{UnifiedAutomation.UaBase.UpdateStructureDataDetails})">
            <summary>
            Updates the history for a list of for structured metadata variables.
            </summary>
            <param name="nodesToUpdate">The list of variable nodes to update,
            including the data provided for the update.</param>
            <returns>The results for the update operation.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.HistoryUpdateStructureData(System.Collections.Generic.IList{UnifiedAutomation.UaBase.UpdateStructureDataDetails},UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Updates the history for a list of structured metadata variables.
            </summary>
            <param name="nodesToUpdate">The list of variable nodes to update,
            including the data provided for the update.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <returns>The results for the update operation.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginHistoryUpdateStructureData(System.Collections.Generic.IList{UnifiedAutomation.UaBase.UpdateStructureDataDetails},UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Begins an operation to update the history for a list of structured
            metadata variables.
            </summary>
            <param name="nodesToUpdate">The list of variable nodes to update,
            including the data provided for the update.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the #EndHistoryUpdateStructureData method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndHistoryUpdateStructureData(System.IAsyncResult)">
            <summary>
            Ends an operation to update the history for a list of structured
            metadata variables.
            </summary>
            <param name="result">The object returned from the
            #BeginHistoryUpdateStructureData method.</param>
            <returns>The results for the update operation.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.HistoryDeleteRaw(System.Collections.Generic.IList{UnifiedAutomation.UaBase.DeleteRawModifiedDetails})">
            <summary>
            Deletes the history for a list of variables in the passed time domain.
            </summary>
            <param name="nodesToDelete">The variables with history to delete,
            including the time domain for the data to be deleted.</param>
            <returns>
            The results for the delete operation.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.HistoryDeleteRaw(System.Collections.Generic.IList{UnifiedAutomation.UaBase.DeleteRawModifiedDetails},UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Deletes the history for a list of variables in the passed time domain.
            </summary>
            <param name="nodesToDelete">The variables with history to delete,
            including the time domain for the data to be deleted.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <returns>
            The results for the delete operation.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginHistoryDeleteRaw(System.Collections.Generic.IList{UnifiedAutomation.UaBase.DeleteRawModifiedDetails},UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Begins an operation to delete the history for a list of variables
            in the passed time domain.
            </summary>
            <param name="nodesToDelete">The variables with history to delete,
            including the time domain for the data to be deleted.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the #EndHistoryDeleteRaw method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndHistoryDeleteRaw(System.IAsyncResult)">
            <summary>
            Ends an operation to delete the history for a list of variables.
            </summary>
            <param name="result">The object returned from the #BeginHistoryDeleteRaw method.</param>
            <returns>
            The results for the delete operation.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.HistoryDeleteAtTime(System.Collections.Generic.IList{UnifiedAutomation.UaBase.DeleteAtTimeDetails})">
            <summary>
            Deletes the history for a list of variables for the passed timestamps.
            </summary>
            <param name="nodesToDelete">The variables with history to delete,
            including the timestamps for the data to be deleted.</param>
            <returns>
            The results for the delete operation.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.HistoryDeleteAtTime(System.Collections.Generic.IList{UnifiedAutomation.UaBase.DeleteAtTimeDetails},UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Deletes the history for a list of variables for the passed timestamps.
            </summary>
            <param name="nodesToDelete">The variables with history to delete,
            including the timestamps for the data to be deleted.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <returns>
            The results for the delete operation.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginHistoryDeleteAtTime(System.Collections.Generic.IList{UnifiedAutomation.UaBase.DeleteAtTimeDetails},UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Begins an operation to delete the history for a list of variables
            for the passed timestamps.
            </summary>
            <param name="nodesToDelete">The variables with history to delete,
            including the timestamps for the data to be deleted.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the #EndHistoryDeleteAtTime method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndHistoryDeleteAtTime(System.IAsyncResult)">
            <summary>
            Ends an operation to delete the history for a list of variables.
            </summary>
            <param name="result">The object returned from the #BeginHistoryDeleteAtTime method.</param>
            <returns>
            The results for the delete operation.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.HistoryReadEvent(System.Collections.Generic.IList{UnifiedAutomation.UaBase.HistoryReadValueId},UnifiedAutomation.UaBase.ReadEventDetails)">
            <summary>
            Reads the event history for a list of event notifier objects
            synchronously from an OPC server.
            </summary>
            <param name="nodesToRead">List of event notifier object nodes to
            read event history from. Includes a continuation point to continue
            previous read requests.</param>
            <param name="details">Configuration parameters for the history
            read of events. Configuration parameters include,
            - the start time of the requested time domain,
            - the end time of the requested time domain,
            - the event filter,
            - a limitation of the number of results per node.
            </param>
            <returns>
            The event history for each notifier.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.HistoryReadEvent(System.Collections.Generic.IList{UnifiedAutomation.UaBase.HistoryReadValueId},UnifiedAutomation.UaBase.ReadEventDetails,UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Reads the event history for a list of event notifier objects
            synchronously from an OPC server.
            </summary>
            <param name="nodesToRead">List of event notifier object nodes to
            read event history from. Includes a continuation point to continue
            previous read requests.</param>
            <param name="details">Configuration parameters for the history
            read of events. Configuration parameters include
            - the start time of the requested time domain,
            - the end time of the requested time domain,
            - the event filter,
            - a limitation of the number of results per node.
            </param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <returns>
            The event history for each notifier.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginHistoryReadEvent(System.Collections.Generic.IList{UnifiedAutomation.UaBase.HistoryReadValueId},UnifiedAutomation.UaBase.ReadEventDetails,System.AsyncCallback,System.Object)">
            <summary>
            Begins an operation to read the event history for a list of notifiers.
            </summary>
            <param name="nodesToRead">List of event notifier object nodes to
            read event history from. Includes a continuation point to continue
            previous read requests.</param>
            <param name="details">Configuration parameters for the history
            read of events. Configuration parameters include
            - the start time of the requested time domain,
            - the end time of the requested time domain,
            - the event filter,
            - a limitation of the number of results per node.
            </param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the #EndHistoryReadEvent method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginHistoryReadEvent(System.Collections.Generic.IList{UnifiedAutomation.UaBase.HistoryReadValueId},UnifiedAutomation.UaBase.ReadEventDetails,UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Begins an operation to read the event history for a list of notifiers.
            </summary>
            <param name="nodesToRead">List of event notifier object nodes to
            read event history from. Includes a continuation point to continue
            previous read requests.</param>
            <param name="details">Configuration parameters for the history
            read of events. Configuration parameters include
            - the start time of the requested time domain,
            - the end time of the requested time domain,
            - the event filter,
            - a limitation of the number of results per node.
            </param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property #DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the #EndHistoryReadEvent method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndHistoryReadEvent(System.IAsyncResult)">
            <summary>
            Ends an operation to read the event history for a list of notifiers.
            </summary>
            <param name="result">The object returned from the #BeginHistoryReadEvent method.</param>
            <returns>
            The event history for each notifier.
            </returns>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.HistoryReadEventAsyncResult">
             <summary>
            
             </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.HistoryUpdateEvent(System.Collections.Generic.IList{UnifiedAutomation.UaBase.UpdateEventDetails})">
            <summary>
            Updates the event history for a list of event notifier objects.
            </summary>
            <param name="nodesToUpdate">List of event notifier objects to
            update, including the event data and update settings.</param>
            <returns>
            The results for the update operation.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.HistoryUpdateEvent(System.Collections.Generic.IList{UnifiedAutomation.UaBase.UpdateEventDetails},UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Updates the event history for a list of event notifier objects.
            </summary>
            <param name="nodesToUpdate">List of event notifier objects to
            update, including the event data and update settings.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <returns>
            The results for the update operation.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginHistoryUpdateEvent(System.Collections.Generic.IList{UnifiedAutomation.UaBase.UpdateEventDetails},UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Begins an operation to update the history for a list of event notifier objects.
            </summary>
            <param name="nodesToUpdate">List of event notifier objects to
            update, including the event data and update settings.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the #EndHistoryUpdateEvent method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndHistoryUpdateEvent(System.IAsyncResult)">
            <summary>
            Ends an operation to update the history for a list of event notifier objects.
            </summary>
            <param name="result">The object returned from the #BeginHistoryUpdateEvent method.</param>
            <returns>
            The results for the update operation.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.HistoryDeleteEvent(System.Collections.Generic.IList{UnifiedAutomation.UaBase.DeleteEventDetails})">
            <summary>
            Deletes the event history for a list of event notifier objects.
            </summary>
            <param name="nodesToUpdate">List of event notifier objects and Ids
            of events to delete.</param>
            <returns>
            The results for the delete operation.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.HistoryDeleteEvent(System.Collections.Generic.IList{UnifiedAutomation.UaBase.DeleteEventDetails},UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Deletes the event history for a list of event notifier objects.
            </summary>
            <param name="nodesToUpdate">List of event notifier objects and Ids
            of events to delete.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <returns>
            The results for the delete operation.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginHistoryDeleteEvent(System.Collections.Generic.IList{UnifiedAutomation.UaBase.DeleteEventDetails},UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Begins an operation to delete the event history for a list of
            event notifier objects.
            </summary>
            <param name="nodesToUpdate">List of event notifier objects and Ids
            of events to delete.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the #EndHistoryDeleteEvent method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndHistoryDeleteEvent(System.IAsyncResult)">
            <summary>
            Ends an operation to delete the history for a list of variables.
            </summary>
            <param name="result">The object returned from the #BeginHistoryDeleteEvent method.</param>
            <returns>
            The results for the delete operation.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.AddNodes(System.Collections.Generic.IList{UnifiedAutomation.UaBase.AddNodesItem},UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Adds nodes to the OPC UA server’s address space.
            </summary>
            <param name="nodesToAdd">List of nodes to add to the server.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <returns>A list of results that indicate whether adding a node succeeded.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginAddNodes(System.Collections.Generic.IList{UnifiedAutomation.UaBase.AddNodesItem},UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously adds nodes to the OPC UA server’s address space.
            </summary>
            <param name="nodesToAdd">List of nodes to add to the server.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the #EndAddNodes method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndAddNodes(System.IAsyncResult)">
            <summary>
            Completes an asynchronous add nodes operation.
            </summary>
            <param name="result">The object returned from the #BeginAddNodes method.</param>
            <returns>A list of results that indicate whether adding a node succeeded.</returns>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.AddNodesAsyncResult">
            <summary>
            Stores state information for asynchronous add nodes operations.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginAddNodes(UnifiedAutomation.UaClient.Session.AddNodesAsyncResult)">
            <summary>
            Begins the add nodes operation.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnAddNodesComplete(System.IAsyncResult)">
            <summary>
            Called when an asynchronous add nodes operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.AddReferences(System.Collections.Generic.IList{UnifiedAutomation.UaBase.AddReferencesItem},UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Adds references to nodes in the OPC UA server’s address space.
            </summary>
            <param name="referencesToAdd">List of references to add to the server.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <returns>List of StatusCodes that indicate whether adding a reference succeeded.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginAddReferences(System.Collections.Generic.IList{UnifiedAutomation.UaBase.AddReferencesItem},UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously adds references to nodes in the OPC UA server’s address space.
            </summary>
            <param name="referencesToAdd">List of references to add to the server.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the #EndAddReferences method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndAddReferences(System.IAsyncResult)">
            <summary>
            Ends and asynchronous add references operation.
            </summary>
            <param name="result">The object returned from the #BeginAddReferences method.</param>
            <returns>List of StatusCodes that indicate whether adding a reference succeeded.</returns>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.AddReferencesAsyncResult">
            <summary>
            Stores state information for asynchronous add references operations.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginAddReferences(UnifiedAutomation.UaClient.Session.AddReferencesAsyncResult)">
            <summary>
            Begins the add references operation.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnAddReferencesComplete(System.IAsyncResult)">
            <summary>
            Called when an asynchronous add references operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.DeleteNodes(System.Collections.Generic.IList{UnifiedAutomation.UaBase.DeleteNodesItem},UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Deletes nodes from the OPC UA server’s address space.
            </summary>
            <param name="nodesToDelete">List of nodes to delete.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <returns>List of status codes that indicate whether deleting a node succeeded.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginDeleteNodes(System.Collections.Generic.IList{UnifiedAutomation.UaBase.DeleteNodesItem},UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously deletes nodes from the OPC UA server’s address space.
            </summary>
            <param name="nodesToDelete">List of nodes to delete.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the #EndDeleteNodes method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndDeleteNodes(System.IAsyncResult)">
            <summary>
            Completes an asynchronous delete nodes operation.
            </summary>
            <param name="result">The object returned from the #BeginDeleteNodes method.</param>
            <returns>List of status codes that indicate whether deleting a node succeeded.</returns>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.DeleteNodesAsyncResult">
            <summary>
            Stores state information for asynchronous delete nodes operations.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginDeleteNodes(UnifiedAutomation.UaClient.Session.DeleteNodesAsyncResult)">
            <summary>
            Begins the delete nodes operation.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnDeleteNodesComplete(System.IAsyncResult)">
            <summary>
            Called when an asynchronous delete nodes operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.DeleteReferences(System.Collections.Generic.IList{UnifiedAutomation.UaBase.DeleteReferencesItem},UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Deletes references from the OPC UA server’s address space.
            </summary>
            <param name="referencesToDelete">List of references to delete.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <returns>A List of status codes that indicate whether deleting a reference succeeded.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginDeleteReferences(System.Collections.Generic.IList{UnifiedAutomation.UaBase.DeleteReferencesItem},UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously deletes references from the OPC UA server’s address space.
            </summary>
            <param name="referencesToDelete">List of references to delete.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the #EndDeleteReferences method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndDeleteReferences(System.IAsyncResult)">
            <summary>
            Completes an asynchronous delete references operation.
            </summary>
            <param name="result">The object returned from the #BeginDeleteReferences method.</param>
            <returns>A List of status codes that indicate whether deleting a reference succeeded.</returns>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.DeleteReferencesAsyncResult">
            <summary>
            Stores state information for asynchronous delete references operations.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginDeleteReferences(UnifiedAutomation.UaClient.Session.DeleteReferencesAsyncResult)">
            <summary>
            Begins the delete references operation.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnDeleteReferencesComplete(System.IAsyncResult)">
            <summary>
            Called when an asynchronous delete references operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.RegisterNodes(System.Collections.Generic.IList{UnifiedAutomation.UaBase.NodeId},UnifiedAutomation.UaClient.RequestSettings)">
             <summary>
             Register nodes to create shortcuts in the server.
             </summary>
             <remarks>
             This method allows clients to optimize the cyclic access to Nodes
             for example for writing variable values or for calling methods. There
             are two levels of optimization.
            
             The first level is to reduce the amount of data on the wire for the
             addressing information. Since NodeIds are used for addressing in
             Nodes and NodeIds can be very long, a more optimized addressing
             method is desirable for cyclic use of Nodes. Classic OPC provided the
             concept to create handles for items by adding them to a
             group. RegisterNodes provides a similar concept to create handles for
             Nodes by returning a numeric NodeId that can be used in all functions
             accessing information from the server. The transport of numeric
             NodeIds is very efficient in the OPC UA binary protocol.
            
             The second level of optimization is possible inside the server. Since
             the client is telling the server that it wants to use the Node more
             frequently by registering the Node, the server is able to prepare
             everything that is possible to optimize the access to the Node.
            
             The handles returned by the server are only valid during the lifetime
             of the Session that was used to register the Nodes. Clients must call
             #UnregisterNodes if the Node is no longer used to free the resources
             used in the server for the optimization. This method should not be
             used to optimize the cyclic read of data since OPC UA provides a much
             more optimized mechanism to subscribe for data changes.
            
             Clients do not have to use the Service and servers can simply
             implement the Service only returning the same list of NodeIds that
             was passed in if there is no need to optimize the access.
             </remarks>
             <param name="nodesToRegister">List of NodeIds of the nodes to register.</param>
             <param name="settings">The general settings for the request. If
             null, the default settings from the property
             #DefaultRequestSettings are used.</param>
             <returns>A List of NodeIds that can be used for cyclic access to the
             nodes.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginRegisterNodes(System.Collections.Generic.IList{UnifiedAutomation.UaBase.NodeId},UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
             <summary>
             Asynchronously register nodes to create shortcuts in the server.
             </summary>
             <remarks>
             This method allows clients to optimize the cyclic access to Nodes
             for example for writing variable values or for calling methods. There
             are two levels of optimization.
            
             The first level is to reduce the amount of data on the wire for the
             addressing information. Since NodeIds are used for addressing in Nodes
             and NodeIds can be very long, a more optimized addressing method is
             desirable for cyclic use of Nodes. Classic OPC provided the concept to
             create handles for items by adding them to a group. RegisterNodes
             provides a similar concept to create handles for Nodes by returning a
             numeric NodeId that can be used in all functions accessing information
             from the server. The transport of numeric NodeIds is very efficient in
             the OPC UA binary protocol.
            
             The second level of optimization is possible inside the server. Since
             the client is telling the server that it wants to use the Node more
             frequently by registering the Node, the server is able to prepare
             everything that is possible to optimize the access to the Node.
            
             The handles returned by the server are only valid during the lifetime
             of the Session that was used to register the Nodes. Clients must call
             #UnregisterNodes if the Node is no longer used to free the resources
             used in the server for the optimization. This method should not be
             used to optimize the cyclic read of data since OPC UA provides a much
             more optimized mechanism to subscribe for data changes.
            
             Clients do not have to use the Service and servers can simply
             implement the Service only returning the same list of NodeIds that was
             passed in if there is no need to optimize the access.
             </remarks>
             <param name="nodesToRegister">List of NodeIds of the nodes to register.</param>
             <param name="settings">The general settings for the request. If
             null, the default settings from the property
             #DefaultRequestSettings are used.</param>
             <param name="callback">The callback to use when the async call completes.</param>
             <param name="userData">The user data that is passed to the callback.</param>
             <returns>An object which must be passed to the #EndRegisterNodes method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndRegisterNodes(System.IAsyncResult)">
            <summary>
            Ends an asynchronous register nodes operation.
            </summary>
            <param name="result">The object returned from the #BeginRegisterNodes method.</param>
            <returns>A List of NodeIds that can be used for cyclic access to the
            nodes.</returns>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.RegisterNodesAsyncResult">
            <summary>
            Stores state information for asynchronous register nodes operations.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginRegisterNodes(UnifiedAutomation.UaClient.Session.RegisterNodesAsyncResult)">
            <summary>
            Begins the register nodes operation.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnRegisterNodesComplete(System.IAsyncResult)">
            <summary>
            Called when an asynchronous register nodes operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.UnregisterNodes(System.Collections.Generic.IList{UnifiedAutomation.UaBase.NodeId},UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Unregister nodes to delete shortcuts in the server.
            </summary>
            <remarks>
            Handles created with the Service #RegisterNodes must be freed by the client
            using the method UnregisterNodes to free the resources in the server
            if the registered nodes are not longer needed.
            </remarks>
            <param name="nodesToUnregister">The nodes to unregister.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginUnregisterNodes(System.Collections.Generic.IList{UnifiedAutomation.UaBase.NodeId},UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously unregister nodes to delete shortcuts in the server.
            </summary>
            <remarks>
            Handles created with the Service RegisterNodes must be freed by the client
            using the method unregisterNodes to free the resources in the server
            if the registered nodes are not longer needed. Unregisters the nodes.
            </remarks>
            <param name="nodesToUnregister">The nodes to unregister.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the #EndUnregisterNodes method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndUnregisterNodes(System.IAsyncResult)">
            <summary>
            Ends an asynchronous unregister nodes operation.
            </summary>
            <param name="result">The object returned from the #BeginUnregisterNodes method.</param>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.UnregisterNodesAsyncResult">
            <summary>
            Stores state information for asynchronous unregister nodes operations.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginUnregisterNodes(UnifiedAutomation.UaClient.Session.UnregisterNodesAsyncResult)">
            <summary>
            Begins the unregister nodes operation.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnUnregisterNodesComplete(System.IAsyncResult)">
            <summary>
            Called when an asynchronous unregister nodes operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginReactivate(UnifiedAutomation.UaClient.Session.ReactivateAsyncResult)">
            <summary>
            Begins a reactivate operation.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnReactivateComplete(System.IAsyncResult)">
            <summary>
            Ends a reactivate operation.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.ReactivateAsyncResult">
            <summary>
            Stores state information for asynchronous reactivate operations.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnReactivateSessionComplete(System.IAsyncResult)">
            <summary>
            Called when an asynchronous reactivate session operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginCreateSubscription(UnifiedAutomation.UaClient.Subscription,UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Begins a create subscription operation.
            </summary>
            <param name="subscription">The subscription.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the #EndCreateSubscription method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndCreateSubscription(System.IAsyncResult)">
            <summary>
            Ends a create subscription operation.
            </summary>
            <param name="result">The object returned from the #BeginCreateSubscription method.</param>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.CreateSubscriptionAsyncResult">
            <summary>
            Stores state information for asynchronous create subscription operations.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnCreateSubscriptionComplete(System.IAsyncResult)">
            <summary>
            Called when an asynchronous create subscription operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginModifySubscription(UnifiedAutomation.UaClient.Subscription,UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Begins a modify subscription operation.
            </summary>
            <param name="subscription">The subscription.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the #EndModifySubscription method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndModifySubscription(System.IAsyncResult)">
            <summary>
            Ends the modify subscription operation.
            </summary>
            <param name="result">The object returned from the #BeginModifySubscription method.</param>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.ModifySubscriptionAsyncResult">
            <summary>
            Stores state information for asynchronous modify subscription operations.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnModifySubscriptionComplete(System.IAsyncResult)">
            <summary>
            Called when an asynchronous modify subscription operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginDeleteSubscription(System.UInt32,UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Begins a delete subscription operation.
            </summary>
            <param name="subscriptionId">The subscription id.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the #EndDeleteSubscription method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndDeleteSubscription(System.IAsyncResult)">
            <summary>
            Ends the delete subscription operation.
            </summary>
            <param name="result">The object returned from the #BeginDeleteSubscription method.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.RemoveSubscription(System.UInt32)">
            <summary>
            Removes the subscription from the session.
            </summary>
            <param name="subscriptionId">The subscription to remove.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.AddSubscription(UnifiedAutomation.UaClient.Subscription)">
            <summary>
            Add the subscription to the session.
            </summary>
            <remarks>Shall only be called if recreating subscription fails.</remarks>
            <param name="subscription">The Subscription to add.</param>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.DeleteSubscriptionAsyncResult">
            <summary>
            Stores state information for asynchronous delete subscription operations.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnDeleteSubscriptionComplete(System.IAsyncResult)">
            <summary>
            Called when an asynchronous delete subscription operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginSetPublishingMode(UnifiedAutomation.UaClient.Subscription,System.Boolean,UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Begins a set publishing mode operation.
            </summary>
            <param name="subscription">The subscription.</param>
            <param name="publishingEnabled">Set to <c>true</c> to enable publishing.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the #EndSetPublishingMode method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndSetPublishingMode(System.IAsyncResult)">
            <summary>
            Ends the set publishing mode operation.
            </summary>
            <param name="result">The object returned from the #BeginSetPublishingMode method.</param>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.SetPublishingModeAsyncResult">
            <summary>
            Stores state information for asynchronous set publishing mode operations.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnSetPublishingModeComplete(System.IAsyncResult)">
            <summary>
            Called when an asynchronous set publishing mode operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.StartPublishing">
            <summary>
            Begins publishing for a subscription.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginPublish">
            <summary>
            Begins the publish.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.GetAcknowledgements">
            <summary>
            Gets the acknowledgements for previous notification messages.
            </summary>
            <returns></returns>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.PublishAsyncResult">
            <summary>
            Stores state information for asynchronous publish operations.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnPublishComplete(System.IAsyncResult)">
            <summary>
            Called when an asynchronous publish operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginCreateMonitoredItems(UnifiedAutomation.UaClient.Subscription,System.Collections.Generic.IList{UnifiedAutomation.UaClient.MonitoredItem},UnifiedAutomation.UaBase.TimestampsToReturn,UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Begins a create monitored items operation.
            </summary>
            <param name="subscription">The subscription.</param>
            <param name="monitoredItems">The monitored items.</param>
            <param name = "timestampsToReturn">The timestamps to return.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the #EndCreateMonitoredItems method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndCreateMonitoredItems(System.IAsyncResult)">
            <summary>
            Ends the create monitored items operation.
            </summary>
            <param name="result">The object returned from the #BeginCreateMonitoredItems method.</param>
            <returns></returns>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.CreateMonitoredItemsAsyncResult">
            <summary>
            Stores state information for asynchronous create monitored items operations.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginCreateMonitoredItems(UnifiedAutomation.UaClient.Session.CreateMonitoredItemsAsyncResult)">
            <summary>
            Begins the create monitored items.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnCreateMonitoredItemsComplete(System.IAsyncResult)">
            <summary>
            Called when an asynchronous create monitored items operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginModifyMonitoredItems(UnifiedAutomation.UaClient.Subscription,System.Collections.Generic.IList{UnifiedAutomation.UaClient.MonitoredItem},UnifiedAutomation.UaBase.TimestampsToReturn,UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Begins a modify monitored items operation.
            </summary>
            <param name="subscription">The subscription.</param>
            <param name="monitoredItems">The monitored items.</param>
            <param name="timestampsToReturn">The timestamps to return.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the #EndModifyMonitoredItems method. </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndModifyMonitoredItems(System.IAsyncResult)">
            <summary>
            Ends the modify monitored items operation.
            </summary>
            <param name="result">The object returned from the #BeginModifyMonitoredItems method.</param>
            <returns></returns>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.ModifyMonitoredItemsAsyncResult">
            <summary>
            Stores state information for asynchronous modify monitored items operations.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginModifyMonitoredItems(UnifiedAutomation.UaClient.Session.ModifyMonitoredItemsAsyncResult)">
            <summary>
            Begins the modify monitored items operation.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnModifyMonitoredItemsComplete(System.IAsyncResult)">
            <summary>
            Called when an asynchronous modify monitored items operation completes.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginDeleteMonitoredItems(UnifiedAutomation.UaClient.Subscription,System.Collections.Generic.IList{UnifiedAutomation.UaClient.MonitoredItem},UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Begins the delete monitored items operation.
            </summary>
            <param name="subscription">The subscription.</param>
            <param name="monitoredItems">The monitored items.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the #EndDeleteMonitoredItems method. </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndDeleteMonitoredItems(System.IAsyncResult)">
            <summary>
            Ends the delete monitored items operation.
            </summary>
            <param name="result">The object returned from the #BeginDeleteMonitoredItems method.</param>
            <returns></returns>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.DeleteMonitoredItemsAsyncResult">
            <summary>
            Stores state information for asynchronous delete monitored items operations.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginDeleteMonitoredItems(UnifiedAutomation.UaClient.Session.DeleteMonitoredItemsAsyncResult)">
            <summary>
            Begins the delete monitored items operation.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnDeleteMonitoredItemsComplete(System.IAsyncResult)">
            <summary>
            Called when an asynchronous delete monitored items operation completes.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginSetMonitoringMode(UnifiedAutomation.UaClient.Subscription,UnifiedAutomation.UaBase.MonitoringMode,System.Collections.Generic.IList{UnifiedAutomation.UaClient.MonitoredItem},UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Begins a set monitoring mode operation.
            </summary>
            <param name="subscription">The subscription.</param>
            <param name="monitoringMode">The monitoring mode.</param>
            <param name="monitoredItems">The monitored items.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the #EndSetMonitoringMode method. </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndSetMonitoringMode(System.IAsyncResult)">
            <summary>
            Ends the set monitoring mode operation.
            </summary>
            <param name="result">The object returned from the #BeginSetMonitoringMode method.</param>
            <returns></returns>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.SetMonitoringModeAsyncResult">
            <summary>
            Stores state information for asynchronous set monitoring mode operations.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginSetMonitoringMode(UnifiedAutomation.UaClient.Session.SetMonitoringModeAsyncResult)">
            <summary>
            Begins the set monitoring mode operation.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnSetMonitoringModeComplete(System.IAsyncResult)">
            <summary>
            Called when an asynchronous set monitoring mode operation completes.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginSetTriggering(UnifiedAutomation.UaClient.Subscription,UnifiedAutomation.UaClient.MonitoredItem,System.Collections.Generic.IList{UnifiedAutomation.UaClient.MonitoredItem},System.Collections.Generic.IList{UnifiedAutomation.UaClient.MonitoredItem},UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Begins a request to change the triggering for a monitored item.
            </summary>
            <param name="subscription">The subscription.</param>
            <param name="triggeringItem">The monitored item which triggers other monitored items when it reports.</param>
            <param name="linksToAdd">The list of monitored items which report when the trigger changes.</param>
            <param name="linksToRemove">The list of monitored items previously added which should no longer report when the trigger changes.</param>
            <param name="settings">The settings.</param>
            <param name="callback">The callback.</param>
            <param name="userData">The user data.</param>
            <returns>The object used to manage the state of the asynchronous operation.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndSetTriggering(System.IAsyncResult)">
            <summary>
            Ends the set monitoring mode operation.
            </summary>
            <param name="result">The object returned from the \ref BeginSetTriggering method.</param>
            <returns></returns>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.SetTriggeringAsyncResult">
            <summary>
            Stores state information for asynchronous set monitoring mode operations.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnSetTriggeringComplete(System.IAsyncResult)">
            <summary>
            Called when an asynchronous set monitoring mode operation completes.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginRepublish(UnifiedAutomation.UaClient.Subscription,System.UInt32,UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Begins a republish operation.
            </summary>
            <param name="subscription">The subscription.</param>
            <param name="retransmitSequenceNumber">The retransmit sequence number.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property #DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the #EndRepublish method. </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndRepublish(System.IAsyncResult,UnifiedAutomation.UaBase.NotificationMessage@)">
            <summary>
            Ends a republish operation.
            </summary>
            <param name="result">The object returned from the #BeginRepublish method.</param>
            <param name="notificationMessage">The notification message.</param>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.RepublishAsyncResult">
            <summary>
            Stores state information for asynchronous republish operations.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnRepublishComplete(System.IAsyncResult)">
            <summary>
            Called when an asynchronous republish operation completes.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.TransferFromSession(UnifiedAutomation.UaClient.Session,System.Boolean,UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Transfers all subscriptions from a disconnected session.
            </summary>
            <param name="sourceSession">The source of the subscriptions to transfer.</param>
            <param name="sendInitialValues">Whether the initial values shoudl be sent as soon as the transfer completes.</param>
            <param name="settings">The general settings for the request. If null, the default settings from the property #DefaultRequestSettings are used.</param>
            <returns>A list of subscriptions that were taken from the source session and the result of transfer operation for each.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginTransferFromSession(UnifiedAutomation.UaClient.Session,System.Boolean,UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Begins an operation to transfers all subscriptions from a disconnected session.
            </summary>
            <param name="sourceSession">The source of the subscriptions to transfer.</param>
            <param name="sendInitialValues">Whether the initial values shoudl be sent as soon as the transfer completes.</param>
            <param name="settings">The general settings for the request. If null, the default settings from the property #DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the asynchronous call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the #EndTransferFromSession method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndTransferFromSession(System.IAsyncResult)">
            <summary>
            Completes an operation to transfers all subscriptions from a disconnected session.
            </summary>
            <param name="result">The user data that is passed to the callback.</param>
            <returns>A list of subscriptions that were taken from the source session and the result of transfer operation for each.</returns>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.TransferFromSessionAsyncResult">
            <summary>
            Stores state information for asynchronous transfer subscriptions operations.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnTransferFromSessionComplete(System.IAsyncResult)">
            <summary>
            Called when an asynchronous transfer subscriptions operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.InternalTransferSubscriptions(System.Collections.Generic.IList{System.UInt32},System.Boolean,UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Transfers the subscription to the session.
            </summary>
            <param name="subscriptionsToTransfer">List of subscriptions to transfer.</param>
            <param name="sendInitialValues">If true the initial values are reported for each monitored item.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <returns>A list of results that indicate whether transferring the subscriptions succeeded.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginInternalTransferSubscriptions(System.Collections.Generic.IList{System.UInt32},System.Boolean,UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously transfers the subscription to the session.
            </summary>
            <param name="subscriptionsToTransfer">List of nodes to add to the server.</param>
            <param name="sendInitialValues">If true the initial values are reported for each monitored item.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the #EndTransferSubscriptions method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndInternalTransferSubscriptions(System.IAsyncResult)">
            <summary>
            Completes an asynchronous transfer subscriptions operation.
            </summary>
            <param name="result">The object returned from the #BeginInternalTransferSubscriptions method.</param>
            <returns>A list of results that indicate whether the transfer succeeded.</returns>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.TransferSubscriptionsAsyncResult">
            <summary>
            Stores state information for asynchronous transfer subscriptions operations.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginInternalTransferSubscriptions(UnifiedAutomation.UaClient.Session.TransferSubscriptionsAsyncResult)">
            <summary>
            Begins the add nodes operation.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnTransferSubscriptionsComplete(System.IAsyncResult)">
            <summary>
            Called when an asynchronous add nodes operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginInternalTransferSubscriptions(UnifiedAutomation.UaClient.RequestSettings,System.Collections.Generic.List{UnifiedAutomation.UaClient.Subscription},UnifiedAutomation.UaClient.Session.ReconnectAsyncResult)">
            <summary>
            Begins a transfer subscription operation.
            </summary>
            <remarks>
            This method shall only be called after a successful reconnect.
            </remarks>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <param name="subscriptions">The subscriptions to transfer.</param>
            <param name="reconnectResult">The AsyncResult that contains the information needed
            for a mapping of the NodeIds if TransferSubscription fails.</param>
            <returns></returns>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.TransferSubscriptionAsyncResult">
            <summary>
            Stores state information for asynchronous transfer subscription operations.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnTransferSubscriptionComplete(System.IAsyncResult)">
            <summary>
            Called when an asynchronous transfer subscription operation completes.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.TransferSubscriptions">
            <summary>
            Transfers the Subscriptions of the Session to the Session.
            </summary>
            <remarks>
            This method shall only be called when a Session has been disconnected with SubscriptionCleanupPolicy.Keep
            and connected again.
            </remarks>
            <returns>
            The results of the TransferSubscriptions service call.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.TransferSubscriptions(System.Collections.Generic.List{UnifiedAutomation.UaClient.Subscription})">
            <summary>
            Transfers the Subscriptions to the Session.
            </summary>
            <param name="subscriptions">The subscriptions that shall be transferred to the session.
            The Session property of each Subscription must be a reference to this Session or
            to a Session that is currently Disconnected.</param>
            <returns>
            The results of the TransferSubscriptions service call.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.TransferSubscriptions(System.Collections.Generic.List{UnifiedAutomation.UaClient.Subscription},UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Transfers the Subscriptions to the Session.
            </summary>
            <param name="subscriptions">The subscriptions that shall be transferred to the session.
            The Session property of each Subscription must be a reference to this Session or
            to a Session that is currently Disconnected.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginTransferSubscriptions(System.Collections.Generic.IList{UnifiedAutomation.UaClient.Subscription},UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously transfers Subscriptions to the Session
            </summary>
            <param name="subscriptions">The subscriptions that shall be transferred to the session.
            The Session property of each Subscription must be a reference to this Session or
            to a Session that is currently Disconnected.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the #EndTransferSubscriptions method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndTransferSubscriptions(System.IAsyncResult)">
            <summary>
            Completes an asynchronous transfer subscriptions operation.
            </summary>
            <param name="result">The object returned from the #UnifiedAutomation.UaClient.Session.BeginTransferSubscriptions method.</param>
            <returns>A list of results that indicate whether the transfer succeeded.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.TransferSingleSubscription(UnifiedAutomation.UaClient.Subscription)">
            <summary>
            Transfers a subscription to the Session.
            </summary>
            <param name="subscription">The subscription that shall be transferred to the session.
            The Session property of the Subscription must be a reference to this Session or
            to a Session that is currently Disconnected.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.TransferSingleSubscription(UnifiedAutomation.UaClient.Subscription,UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Transfers a subscription to the Session.
            </summary>
            <param name="subscription">The subscription that shall be transferred to the session.
            The Session property of the Subscription must be a reference to this Session or
            to a Session that is currently Disconnected.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginTransferSingleSubscription(UnifiedAutomation.UaClient.Subscription,UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously transfers a Subscription to the Session.
            </summary>
            <param name="subscription">The subscription that shall be transferred to the session.
            The Session property of the subscription must be a reference to this Session or
            to a Session that is currently Disconnected.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the #EndTransferSingleSubscription method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndTransferSingleSubscription(System.IAsyncResult)">
            <summary>
            Completes an asynchronous transfer single subscription operation.
            </summary>
            <param name="result">The object returned from the #BeginTransferSingleSubscription method.</param>
            <returns>A result that indicates whether the transfer succeeded.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.Query(UnifiedAutomation.UaClient.QueryContext,UnifiedAutomation.UaClient.RequestSettings,System.Byte[]@,UnifiedAutomation.UaClient.QueryValidationResult@)">
            <summary>
            Start a query against the server's address space.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginQuery(UnifiedAutomation.UaClient.QueryContext,UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously begins a query operation.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndQuery(System.IAsyncResult,System.Byte[]@,UnifiedAutomation.UaClient.QueryValidationResult@)">
            <summary>
            Completes an ansynchronous query operation.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.QueryAsyncResult">
            <summary>
            Stores state information for asynchronous Query operations.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnQueryComplete(System.IAsyncResult)">
            <summary>
            Called when an asynchronous Query operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.QueryNext(System.Byte[],System.Boolean,UnifiedAutomation.UaClient.RequestSettings,System.Byte[]@)">
            <summary>
            Continues a query against the server's address space.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginQueryNext(System.Byte[],System.Boolean,UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously begins a query operation.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.EndQueryNext(System.IAsyncResult,System.Byte[]@)">
            <summary>
            Completes an ansynchronous query operation.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnQueryNextComplete(System.IAsyncResult)">
            <summary>
            Called when an asynchronous Query operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginReconnect(UnifiedAutomation.UaClient.Session.ConnectAsyncResult)">
            <summary>
            Begins a reconnect operation.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnReconnectComplete(System.IAsyncResult)">
            <summary>
            Called when a background reconnect operation completes.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.BeginReconnectCycle(System.IAsyncResult,System.Boolean)">
            <summary>
            Begins the reconnect cycle.
            </summary>
            <param name="result">The result.</param>
            <param name="immediate">Whether to attempt a reconnect immediately</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.GetEndpointForReconnect(System.Uri)">
            <summary>
            Gets the endpoint to use for reconnecting.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnReconnectCycle(System.Object)">
            <summary>
            Called when reconnect cycle starts.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnWatchdogCycle(System.Object)">
            <summary>
            Called when the watchdog timer expires.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.OnWatchdogReadComplete(System.IAsyncResult)">
            <summary>
            Called when a watchdog read operation completes.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.GetApplicationDescription">
            <summary>
            Gets the application description for the client application.
            </summary>
            <returns>The application description.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.GetEndpointConfiguration(UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Gets the endpoint configuration.
            </summary>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <returns>The endpoint configuration to use.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.GetClientSignature(System.String,UnifiedAutomation.UaBase.ICertificate,System.Byte[])">
            <summary>
            Gets the client signature.
            </summary>
            <param name="securityPolicyUri">The security policy URI.</param>
            <param name="serverCertificate">The server certificate.</param>
            <param name="serverNonce">The server nonce.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.GetUserIdentityToken(UnifiedAutomation.UaClient.UserIdentity,UnifiedAutomation.UaBase.EndpointDescription,UnifiedAutomation.UaBase.ICertificate,System.Byte[],UnifiedAutomation.UaBase.SignatureData@)">
            <summary>
            Gets the user identity token.
            </summary>
            <param name="identity">The identity.</param>
            <param name="endpoint">The endpoint.</param>
            <param name="serverCertificate">The server certificate.</param>
            <param name="serverNonce">The server nonce.</param>
            <param name="tokenSignature">The token signature.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.ValidateCertificate(UnifiedAutomation.UaBase.ICertificate,UnifiedAutomation.UaBase.ICertificate[],System.String,System.String,System.Boolean)">
            <summary>
            Validates the server certificate.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.CheckSessionState(UnifiedAutomation.UaClient.Session.State)">
            <summary>
            Checks the state of the session.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.ChangeSessionState(UnifiedAutomation.UaClient.Session.State)">
            <summary>
            Changes the state of the session.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.GetRequestHeader(UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Gets the request header.
            </summary>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <returns>The request header.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.GetDiscoveryUrlFromUrl(System.Uri,System.String)">
            <summary>
            Gets the discovery URL from URL.
            </summary>
            <param name="endpointUrl">The endpoint URL.</param>
            <param name="transportProfileUri">The transport profile URI.</param>
            <returns>
            The discovery URL.
            </returns>
            <remarks>
            This method assumes that WS-* based endpoints use the '/discovery' suffix.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.AdjustSubscriptionIntervals(System.Double,System.Double,System.Double,System.UInt32@,System.UInt32@)">
            <summary>
            Adjusts the intervals for a subscription.
            </summary>
            <param name="requestedPublishingInterval">The requested publishing interval.</param>
            <param name="requestedMaxKeepAliveTime">The requested max keep alive time.</param>
            <param name="requestedLifetime">The requested lifetime.</param>
            <param name="requestedMaxKeepAliveCount">The requested max keep alive count.</param>
            <param name="requestedLifetimeCount">The requested lifetime count.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.RaiseConnectionStatusUpdateEvent(UnifiedAutomation.UaClient.ServerConnectionStatus,UnifiedAutomation.UaBase.StatusCode)">
            <summary>
            Raises the connection status update event.
            </summary>
            <param name="status">The status.</param>
            <param name="error">The error.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Session.UpdateFilterResult(UnifiedAutomation.UaClient.MonitoredItem,UnifiedAutomation.UaBase.ExtensionObject,UnifiedAutomation.UaBase.DiagnosticInfoCollection,System.Collections.Generic.IList{System.String})">
            <summary>
            Updates the filter result.
            </summary>
            <param name="monitoredItem">The monitored item.</param>
            <param name="result">The result.</param>
            <param name="diagnosticInfos">The diagnostic infos.</param>
            <param name="stringTable">The string table.</param>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Session.State">
            <summary>
            The possible states for the session.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.Session.State.Disconnected">
            <summary>
            The session is disconnected
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.Session.State.Connecting">
            <summary>
            The session is connecting
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.Session.State.Reconnecting">
            <summary>
            The session is reconnecting
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.Session.State.Connected">
            <summary>
            The session is connected
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.Session.State.Reactivating">
            <summary>
            The session is reactivating
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.Session.State.Disposed">
            <summary>
            The session is disposed
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.SecuritySelection">
            @ingroup UaClientLibraryHelper
             <summary>
             The options for selecting security.
             </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.SecuritySelection.None">
            <summary>
            No security.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.SecuritySelection.BestAvailable">
            <summary>
            Best available security.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.RetryInitialConnect">
            @ingroup UaClientLibraryHelper
             <summary>
             Whether to retry a failed connect in the background.
             </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.RetryInitialConnect.No">
            <summary>
            Do not retry a failed connect.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.RetryInitialConnect.Yes">
            <summary>
            Retry a failed connect in the background.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.TypeDescriptionSelection">
            @ingroup UaClientLibraryHelper
             <summary>
             The options for selecting the type description.
             </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.TypeDescriptionSelection.Basic">
            <summary>
            Returns the hierachy that is explicitly declared for the type.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.TypeDescriptionSelection.FullyInherited">
            <summary>
            Returns the fully inherited for the type.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.SubscriptionCleanupPolicy">
            @ingroup UaClientLibraryHelper
             <summary>
             The options for cleaning up subscriptions.
             </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.SubscriptionCleanupPolicy.Keep">
            <summary>
            Keep the subscriptions.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.SubscriptionCleanupPolicy.Delete">
            <summary>
            Delete the subscriptions.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.ServerConnectionStatus">
            @ingroup UaClientLibraryHelper
             <summary>
             Information about the connection with the server.
             </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.ServerConnectionStatus.Disconnected">
            <summary>
            Disconnected.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.ServerConnectionStatus.Connected">
            <summary>
            Connected.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.ServerConnectionStatus.ConnectionWarningWatchdogTimeout">
            <summary>
            The watchdog timer has timed out.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.ServerConnectionStatus.ConnectionErrorClientReconnect">
            <summary>
            The connection is in an error state, reconnecting.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.ServerConnectionStatus.ServerShutdownInProgress">
            <summary>
            The server is going to shutdown.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.ServerConnectionStatus.ServerShutdown">
            <summary>
            The server has shutdown.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.ServerConnectionStatus.SessionAutomaticallyRecreated">
            <summary>
            A new session was re-created.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.ServerConnectionStatus.Connecting">
            <summary>
            Attempting to connect to the server.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.ServerConnectionStatus.LicenseExpired">
            <summary>
            No valid license has been found for the application.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.ServerConnectionStatusUpdateEventArgs">
            @ingroup UaClientLibraryHelper
             <summary>
             The event arguments provided when a session validation error occurs.
             </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.ServerConnectionStatusUpdateEventArgs.#ctor(UnifiedAutomation.UaClient.ServerConnectionStatus,UnifiedAutomation.UaClient.ServerConnectionStatus,UnifiedAutomation.UaBase.StatusCode)">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.ServerConnectionStatusUpdateEventArgs.Status">
            <summary>
            Gets the server connection status.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.ServerConnectionStatusUpdateEventArgs.PreviousStatus">
            <summary>
            Gets the previous status.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.ServerConnectionStatusUpdateEventArgs.Error">
            <summary>
            Gets the error.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.ServerConnectionStatusUpdateEventHandler">
            <summary>
            Used to handled changes to the connection state.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.SessionValidationEventArgs">
            @ingroup UaClientLibraryHelper
             <summary>
             The event arguments provided when a session validation error occurs.
             </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SessionValidationEventArgs.#ctor(UnifiedAutomation.UaBase.StatusCode)">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.SessionValidationEventArgs.Error">
            <summary>
            The error that occurred.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.SessionValidationEventArgs.Ignore">
            <summary>
            Whether the error can be ignored.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.SessionValidationEventHandler">
            <summary>
            Used to handled session validation errors.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.UpdateEndpointEventArgs">
            @ingroup UaClientLibraryHelper
             <summary>
             The event arguments provided when a endpoint is about to be used to connect to a server.
             </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.UpdateEndpointEventArgs.#ctor(System.Uri,UnifiedAutomation.UaBase.EndpointDescription,System.Collections.Generic.IList{UnifiedAutomation.UaBase.EndpointDescription})">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.UpdateEndpointEventArgs.DiscoveryUrl">
            <summary>
            Gets the URL used to fetch the endpoints.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.UpdateEndpointEventArgs.UseDnsNameAndPortFromDiscoveryUrl">
            <summary>
            Gets or sets a value indicating whether to use the DNS name and
            port from the discovery URL.
            </summary>
            <value>
            <c>true</c> if the DNS name and port from the discovery URL is
            used to connect; otherwise <c>false</c>.
            </value>
            <remarks>
            The URLs returned by the server may not be accessible to the client.
            The DNS name from the discovery URL is a suitable fallback
            behavior but will trigger a domain mismatch error.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaClient.UpdateEndpointEventArgs.SelectedEndpoint">
            <summary>
            Gets or sets the currently selected endpoint.
            </summary>
            <remarks>
            The receiver of UpdateEndpoint event can change this to whatever they want.
            Setting it to NULL means the connect operation will be aborted.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaClient.UpdateEndpointEventArgs.AvailableEndpoints">
            <summary>
            Gets the available endpoints.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.UpdateEndpointEventHandler">
            <summary>
            Used to handled update endpoint events.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.InsecureCredentialsEventArgs">
            @ingroup UaClientLibraryHelper
             <summary>
             The event arguments provided when a password is about to be sent over an insecure connection.
             </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.InsecureCredentialsEventArgs.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.InsecureCredentialsEventArgs.AllowInsecureCredentials">
            <summary>
            Gets or sets a value indicating whether passwords can be sent over insecure connections.
            </summary>
            <value>
            <c>true</c> if passwords can be sent over insecure connections; otherwise <c>false</c>.
            </value>
            <remarks>
            Sometimes it is not possible to find a secure endpoint. This fallback allows a connect to happen 
            if the application decides it can tolerate the risk.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaClient.InsecureCredentialsEventArgs.StatusCode">
            <summary>
            The StatusCode that will be used to throw the StatusException
            if AllowInsecureCredentials is set to false.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.InsecureCredentialsEventArgs.ServerNonce">
            <summary>
            The nonce send by the server in CreateSession response.
            </summary>
            <remarks>
            The server nonce is used to encrypt the password. If the nonce is null or too short,
            replay attacks are possible.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaClient.InsecureCredentialsEventArgs.EncryptionAlgorithm">
            <summary>
            The algorithm to encrypt the password.
            </summary>
            <remarks>
            If null, the password is sent as plaintext.
            </remarks>
        </member>
        <member name="T:UnifiedAutomation.UaClient.InsecureCredentialsEventHandler">
            <summary>
            Used to handle insecure password events.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.SetTriggeringResult">
            <summary>
            Stores the operation level results returned in the response to a SetTriggering request.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.SetTriggeringResult.AddResults">
            <summary>
            The status code associated with the links to add provided in the request.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.SetTriggeringResult.RemoveResults">
            <summary>
            The status code associated with the links to remove provided in the request.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.QueryContext">
            <summary>
            The context for query operation.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.QueryContext.View">
            <summary>
            The view to query.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.QueryContext.NodeTypes">
            <summary>
            The list of types that provide the scope for the query.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.QueryContext.ContentFilter">
            <summary>
            The content filter used to select the references to return.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.QueryContext.MaxNumberOfDataSets">
            <summary>
            The maximum number of datasets to return.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.QueryContext.MaxNumberOfReferences">
            <summary>
            The maximum number of references to return.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.QueryValidationResult">
            <summary>
            The results of a query operation.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.QueryValidationResult.Results">
            <summary>
            Reports any errors for the node types provided in the request.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.QueryValidationResult.FilterResult">
            <summary>
            Reports any errors with the content filter provided in the request.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.TransferFromSessionResult">
            <summary>
            The results of a transfer subscriptions from session operation.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.TransferFromSessionResult.Subscription">
            <summary>
            The subscription transferred from the original session.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.TransferFromSessionResult.StatusCode">
            <summary>
            The status code indicating if the transfer succeeded.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.TransferFromSessionResult.AvailableSequenceNumbers">
            <summary>
            The available sequence numbers returned by the server.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Subscription">
            @ingroup UaClientApi
             <summary>
             A class that manages a subscription with an OPC UA server.
             </summary>
             <remarks>
             The approach to create a new subscription on the server is:
             - create a Subscription object,
             - change the Subscription settings if necessary,
             - call #Create() to actually create the Subscription on the server.
            
             The Subscription class contains several properties to set or change
             the settings of the subscription. Note that these parameters come in
             pairs: [ParameterName] and Current\[ParameterName\]
             (e.g. #PublishingInterval and #CurrentPublishingInterval). The first one
             is used to set the parameter inside the subscription object
             before calling #Create() or #Modify(), the second one reflects the
             value that is currently set on the server.
            
             Note that some of the subscription settings requested by the client
             may be revised by the server.
            
             See \ref L2ClientSdkSubscription "Subcription Overview" and
             \ref L2UaSubscription for a more general description.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.#ctor(UnifiedAutomation.UaClient.Session)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.Subscription"/> class.
            </summary>
            <remarks>
            The following standard settings are used:
            - #PublishingEnabled: `true`
            - #PublishingInterval: 500 ms
            - #Lifetime: \ref UnifiedAutomation.UaClient.Session.SessionTimeout
              "SessionTimeout"
            - #MaxKeepAliveTime: \ref
              UnifiedAutomation.UaClient.Session.WatchdogTimeout
              "WatchdogTimeout" / 2
            - the \ref UnifiedAutomation.UaClient.Session.DefaultRequestSettings
              "DefaultRequestSettings" of the Session
            </remarks>
            <param name="session">The session to associate the subscription with.</param>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Subscription.Session">
            <summary>
            Gets the session the subscription is associated with.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Subscription.ConnectionStatus">
            <summary>
            Gets the connection status for the subscription.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Subscription.SubscriptionId">
            <summary>
            Gets the subscription id.
            </summary>
            <remarks>
            This property reflects the server-assigned identifier for the
            subscription. It is unique for the entire server in order to allow
            the subscription to be transferred to another Session.
            </remarks>
            <seealso cref="M:UnifiedAutomation.UaClient.Subscription.ChangeSession(UnifiedAutomation.UaClient.Session)"/>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Subscription.UserData">
            <summary>
            Gets or sets the user data.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Subscription.DefaultTimestampsToReturn">
            <summary>
            Gets or sets the default timestamp to return.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Subscription.DefaultRequestSettings">
            <summary>
            Gets or sets the default request settings for the subscription.
            </summary>
            <remarks>
            The default request settings include a timeout, diagnostic
            settings, request id, and maximum number of operations per
            request.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Subscription.PublishingInterval">
             <summary>
             Gets or sets the publishing interval (in milliseconds).
             </summary>
             <remarks>
             The Publishing Interval specifies the minimum time between Publish
             responses for a Subscription. Any notifications are buffered by
             the Server until the Publishing Interval expires. The Server will
             continue to buffer notifications if no Publish request is
             available until the Lifetime expires. At this point, the buffered
             notifications are discarded. Note that the time between Publish
             responses can be less than the Publishing Interval if the number of
             notifications exceeds MaxNotificationsPerRequest. However, in
             this scenario multiple Publish responses are sent as a batch
             followed by a gap until the PublishingInterval expires again.
            
             The requested PublishingInterval may be overridden by the
             Server. Clients must check the
             #CurrentPublishingInterval property after creating or
             modifying a Subscription to see the value that the Server will
             actually use.
             </remarks>
             <seealso cref="P:UnifiedAutomation.UaClient.Subscription.CurrentPublishingInterval"/>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Subscription.CurrentPublishingInterval">
            <summary>
            Gets the publishing interval (in milliseconds) currently set on the
            server.
            </summary>
            <seealso cref="P:UnifiedAutomation.UaClient.Subscription.PublishingInterval"/>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Subscription.Lifetime">
             <summary>
             Gets or sets the lifetime (in milliseconds).
             </summary>
             <remarks>
             The Lifetime of a Subscription specifies when the Server will
             close a Subscription due to a lack of Publish requests. This can
             occur because the Client stops sending Publish requests or because
             higher priority Subscriptions are consuming all of the available
             Publish requests. When a Subscription expires, a
             StatusNotification is returned in the next Publish response to
             inform the Client that the Subscription is gone.
            
             For convenience this property is defined as time interval in
             milliseconds. It is internally converted to the UA defined
             parameter requestedLifetimeCount.
            
             The requested Lifetime may be overridden by the Server. Clients
             must check the #CurrentLifetime property after
             creating or modifying a Subscription to see the value that the
             Server will actually use.
             </remarks>
             <seealso cref="P:UnifiedAutomation.UaClient.Subscription.CurrentLifetime"/>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Subscription.CurrentLifetime">
            <summary>
            Gets the lifetime of the Subscription (in milliseconds) currently set
            on the server.
            </summary>
            <seealso cref="P:UnifiedAutomation.UaClient.Subscription.Lifetime"/>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Subscription.MaxKeepAliveTime">
             <summary>
             Gets or sets the maximum keep alive time (in milliseconds).
             </summary>
             <remarks>
             MaxKeepAliveTime specifies the maximum time between Publish
             responses for a Subscription. If no notifications are available,
             an empty Publish response is returned in order to tell the Client
             that the Subscription is still alive.
            
             For convenience this property is defined as time interval in
             milliseconds. It is internally converted to the UA defined
             parameter requestedMaxKeepAliveCount.
            
             The requested MaxKeepAliveTime may be overridden by the
             Server. Clients must check the
             #CurrentMaxKeepAliveTime property after creating or
             modifying a Subscription to see the value that the Server will
             actually use.
             </remarks>
             <seealso cref="P:UnifiedAutomation.UaClient.Subscription.CurrentMaxKeepAliveTime"/>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Subscription.CurrentMaxKeepAliveTime">
            <summary>
            Gets the maximum keep alive time (in milliseconds) currently set on
            the server.
            </summary>
            <seealso cref="P:UnifiedAutomation.UaClient.Subscription.MaxKeepAliveTime"/>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Subscription.MaxNotificationsPerPublish">
             <summary>
             Gets or sets the maximum number of notifications per publish.
             </summary>
             <remarks>
             MaxNotificationsPerPublish specifies the maximum number of
             notifications that the Client wishes to receive in a single
             Publish response. A value of zero indicates that there is no limit.
            
             The server may send fewer notifications in one message if its own
             limit is lower.
             </remarks>
             <seealso cref="P:UnifiedAutomation.UaClient.Subscription.CurrentMaxNotificationsPerPublish"/>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Subscription.CurrentMaxNotificationsPerPublish">
            <summary>
            Gets the maximum number of notifications per publish currently set
            on the server.
            </summary>
            <seealso cref="P:UnifiedAutomation.UaClient.Subscription.MaxNotificationsPerPublish"/>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Subscription.PublishingEnabled">
            <summary>
            Gets or sets a value indicating whether publishing is enabled.
            </summary>
            <value>
              <c>true</c> if publishing is enabled; otherwise, <c>false</c>.
            </value>
            <seealso cref="P:UnifiedAutomation.UaClient.Subscription.CurrentPublishingEnabled"/>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Subscription.CurrentPublishingEnabled">
            <summary>
            Gets a value indicating whether publishing is currently enabled on
            the server.
            </summary>
            <value>
            <c>true</c> if publishing is currently enabled; otherwise, <c>false</c>.
            </value>
            <seealso cref="P:UnifiedAutomation.UaClient.Subscription.PublishingEnabled"/>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Subscription.Priority">
             <summary>
             Gets or sets the priority of the subscription.
             </summary>
             <remarks>
             This setting defines the priority of the subscription relative to
             other subscriptions created by the client.
            
             A Client that does not require special priority settings should
             set this value to zero.
             </remarks>
             <seealso cref="P:UnifiedAutomation.UaClient.Subscription.CurrentPriority"/>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Subscription.CurrentPriority">
            <summary>
            Gets the priority of the subscription currently set on the server.
            </summary>
            <seealso cref="P:UnifiedAutomation.UaClient.Subscription.Priority"/>
        </member>
        <member name="P:UnifiedAutomation.UaClient.Subscription.MonitoredItems">
            <summary>
            Gets the monitored items in the subscription.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.Save(UnifiedAutomation.UaBase.IEncoder)">
            <summary>
            Saves the Subscription using the specified encoder.
            </summary>
            <param name="encoder">The encoder to save the subscription with.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.Load(UnifiedAutomation.UaBase.IDecoder)">
            <summary>
            Initializes the Subscription using the specified decoder.
            </summary>
            <param name="decoder">The decoder used when initializing the subscription.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.SaveAll(UnifiedAutomation.UaBase.BinaryEncoder)">
             <summary>
             Saves the Subscription using the specified encoder including the revised parameters by
             the server and the MonitoredItems
             </summary>
             <remarks>
             EXPERIMENTAL: This method is a prototype for a not released feature. The format of the
             encoded subscription can change in future versions of the sdk.
             The use case for this method is to save a subscription before shutting down the client
             application. The subscription can be re-initialized and used for
             Session.TransferSubscriptions.
             </remarks>
             <param name="encoder">The encoder to save the subscription with.
            
             It is recommended to use the MessageContext of the current Session to create the encoder.
             The Session must be connected when calling SaveAll.
             </param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.LoadAll(UnifiedAutomation.UaBase.BinaryDecoder)">
             <summary>
             Initializes the Subscription using the specified decoder including the revised
             parameters by the server and the MonitoredItems.
             </summary>
             <remarks>
             EXPERIMENTAL: This method is a prototype for a not released feature. The format of the
             encoded subscription can change in future versions of the sdk.
             This method cannot be called after Subscription.Create or Session.TransferSubscriptions
             is called.
             </remarks>
             <param name="decoder">The decoder used when initializing the subscription.
            
             It is recommended to use the MessageContext of the current Session to create the decoder.
             The Session must be connected when calling LoadAll.</param>
        </member>
        <member name="E:UnifiedAutomation.UaClient.Subscription.DataChanged">
             <summary>
             Occurs when any subscribed data value has changed.
             </summary>
             <remarks>
             This event handler provides the data notification for a subscription.
            
             Data changes may arrive for monitored items before the creation of the monitored items
             is completed and the CreateMonitoredItems call returns. The client application must be
             prepared for that and ClientHandles passed in to CreateMonitoredItems must be valid and
             usable before CreateMonitoredItems returns.
            
             Data changes may also arrive after monitored items are deleted, sampling is turned off,
             or after the publishing is disabled.
            
             This event handler is normally not called faster than configured in PublishingInterval
             but this is controlled by the OPC UA Server and not by the client SDK. If the number of
             notifications in one publishing interval exceeds the setting MaxNotificationsPerPublish,
             the OPC UA Server will send more than one publish response and this DataChanged may be
             called more than one time in the PublishingInterval.
            
             If no new data is available in a PublishingInterval, no DataChanged is called and a
             NotificationMessageReceived event handler with a null data field may be called depending
             on the property MaxKeepAliveCount.
            
             The DataChanged is called from a worker thread but it should not be blocked by the
             application since this will block other callbacks like NewEvents contained in the same
             publish response and also blocks more publish responses received for the same Subscription
             object.
             </remarks>
        </member>
        <member name="E:UnifiedAutomation.UaClient.Subscription.NewEvents">
             <summary>
             Occurs when any new event has arrived.
             </summary>
             <remarks>
             This event handler provides the event notification for a subscription.
            
             New events may arrive for monitored items before the creation of the monitored items
             is completed and the CreateMonitoredItems call returns. The client application must be
             prepared for that and ClientHandles passed in to CreateMonitoredItems must be valid and
             usable before CreateMonitoredItems returns.
            
             New events may also arrive after monitored items are deleted, sampling is turned off,
             or after the publishing is disabled.
            
             This event handler is normally not called faster than configured in PublishingInterval
             but this is controlled by the OPC UA Server and not by the client SDK. If the number of
             notifications in one publishing interval exceeds the setting MaxNotificationsPerPublish,
             the OPC UA Server will send more than one publish response and this NewEvents may be
             called more than one time in the PublishingInterval.
            
             If no new events are available in a PublishingInterval, no NewEvents is called and a
             NotificationMessageReceived event handler with a null data field may be called depending
             on the property MaxKeepAliveCount.
            
             The NewEvents is called from a worker thread but it should not be blocked by the
             application since this will block other callbacks like DataChanged contained in the same
             publish response and also blocks more publish responses received for the same Subscription
             object.
             </remarks>
        </member>
        <member name="E:UnifiedAutomation.UaClient.Subscription.StatusChanged">
            <summary>
            Occurs when the status of subscription changes.
            </summary>
            <remarks>
            This event handler informs the client if the status of a subscription changes. This can
            happen after a connection error that lasted longer than the lifetime of the subscription.
            The lifetime is calculated from PublishingInterval x MaxKeepAliveCount x LifetimeCount.
            A client must create a new subscription to continue data or event monitoring if this event
            handler indicates a bad status for the subscription. Subscription.Delete should be called
            even if the subscription is no longer valid in the server to dispose the client side
            subscription object.
            </remarks>
        </member>
        <member name="E:UnifiedAutomation.UaClient.Subscription.NotificationMessageReceived">
             <summary>
             Occurs when a new notification message arrives.
             </summary>
             <remarks>
             This event handler provides all notifications for a subscription.
            
             With the this event handler you get access to DataChanged and NewEvents plus control
             over the Publish sequence number handling. This is mainly necessary if you implement a
             redundant client and you need access to the sequence numbers and the sequence number
             confirmation.
            
             Notification messages may arrive for monitored items before the creation of the monitored
             items is completed and the CreateMonitoredItems call returns. The client application must
             be prepared for that and ClientHandles passed in to CreateMonitoredItems must be valid and
             usable before CreateMonitoredItems returns.
            
             Notification messages may also arrive after monitored items are deleted, sampling is turned
             off, or after the publishing is disabled.
            
             This event handler is normally not called faster than configured in PublishingInterval
             but this is controlled by the OPC UA Server and not by the client SDK. If the number of
             notifications in one publishing interval exceeds the setting MaxNotificationsPerPublish,
             the OPC UA Server will send more than one publish response and this
             NotificationMessageReceived may be called more than one time in the PublishingInterval.
            
             If no data changes or new events are available in a PublishingInterval, this event handler
             with a null data field may be called depending on the property MaxKeepAliveCount.
            
             The NotificationMessageReceived is called from a worker thread but it should not be blocked
             by the application since this will block other callbacks like DataChanged contained in the
             same publish response and also blocks more publish responses received for the same
             Subscription object.
             </remarks>
        </member>
        <member name="E:UnifiedAutomation.UaClient.Subscription.MissingSequenceNumber">
             <summary>
             Occurs when a sequence number is missing.
             </summary>
             <remarks>
             The client SDK monitors the sequence numbers of the received data and event notifications
             and reports gaps in the sequence numbers using this event handler. The client can use the
             Republish method to request the missing notifications.
            
             The MissingSequenceNumber is called from a worker thread but it should not be blocked by
             the application since this will block other event handler like DataChanged contained in the
             same Publish response and also blocks more Publish responses received for the same
             Subscription object.
             </remarks>
        </member>
        <member name="E:UnifiedAutomation.UaClient.Subscription.Recreated">
            <summary>
            Occurs when a Subscription is automatically recreated after a successful reconnect.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.Create">
            <summary>
            Creates a new subscription on the server.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.Create(UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Creates a new subscription on the server.
            </summary>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.BeginCreate(UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously creates a new subscription on the server.
            </summary>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the #EndCreate method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.EndCreate(System.IAsyncResult)">
            <summary>
            Completes an asynchronous operation to create a subscription.
            </summary>
            <param name="result">The object returned from the #BeginCreate method.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.OnCreateComplete(System.IAsyncResult)">
            <summary>
            Called when an asynchronous Create operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.OnCreateMonitoredItemsAfterCreateComplete(System.IAsyncResult)">
            <summary>
            Called when an asynchronous Create operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.Modify">
            <summary>
            Modifies a subscription.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.Modify(UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Modifies a subscription.
            </summary>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.BeginModify(UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously modifies a subscription.
            </summary>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the #EndModify method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.EndModify(System.IAsyncResult)">
            <summary>
            Completes an asynchronous operation to modify a subscription.
            </summary>
            <param name="result">The object returned from the #BeginModify method.</param>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Subscription.ModifyAsyncResult">
            <summary>
            Stores state information for asynchronous browse operations.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.OnModifyComplete(System.IAsyncResult)">
            <summary>
            Called when an asynchronous Modify operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.OnSetPublishingModeComplete(System.IAsyncResult)">
            <summary>
            Called when mse publishing mode completes.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.Delete">
            <summary>
            Deletes a subscription.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.Delete(UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Deletes a subscription.
            </summary>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.BeginDelete(UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously deletes a subscription.
            </summary>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the #EndDelete method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.EndDelete(System.IAsyncResult)">
            <summary>
            Completes an asynchronous operation to delete a subscription.
            </summary>
            <param name="result">The object returned from the #BeginDelete method.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.OnDeleteComplete(System.IAsyncResult)">
            <summary>
            Called when delete subscription completes.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.ChangeSession(UnifiedAutomation.UaClient.Session)">
            <summary>
            Changes the session which owns the subscription.
            </summary>
            <param name="session">The new owner.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.Transfer(System.UInt32,System.Collections.Generic.List{System.UInt32},UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Transfers the subscription with the specified subscription id.
            </summary>
            <remarks>The application is responsible for ensuring that
            MonitoredItems stored locally match the MonitoredItems that the Server
            knows about.</remarks>
            <param name="subscriptionId">The <see cref="P:UnifiedAutomation.UaClient.Subscription.SubscriptionId"/> assigned
            by the Server.</param>
            <param name="availableSequenceNumbers"> A list of sequence number
            ranges that identify NotificationMessages that are in the
            Subscription’s retransmission queue. This parameter is null if the
            transfer of the Subscription failed.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.Recreate(UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Recreates the subscription.
            </summary>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.Recreate(UnifiedAutomation.UaBase.NamespaceTable,UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Recreates the subscription.
            </summary>
            <param name="oldNamespaceUris">The current NamespaceTable that has been used when
            the MonitoredItems of the Subscription have been created.
            If not null and not equal to the current NamespaceTable of the Session,
            the NodeIds of the MonitoredItems are mapped to use the current NamespaceTable.
            </param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.Reactivate(UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Reactivates the subscription.
            </summary>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.OnRepublishAfterReactivateComplete(System.IAsyncResult)">
            <summary>
            Called when a republish operation completes.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Subscription.TransferCallbackData">
            <summary>
            Stores state information for asynchronous transfer operations.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.OnRepublishAfterTransferComplete(System.IAsyncResult)">
            <summary>
            Called when a republish operation completes.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.OnRecreateComplete(System.IAsyncResult)">
            <summary>
            Called when a subscription is recreated.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.OnSetTriggeringAfterRecreateComplete(System.IAsyncResult)">
            <summary>
            Called when SetTriggering has finished when a Subscription is re-created
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.CreateMonitoredItems(System.Collections.Generic.IList{UnifiedAutomation.UaClient.MonitoredItem})">
            <summary>
            Creates a list of monitored items in the subscription. The
            monitored items could be data monitored items or event monitored
            items.
            </summary>
            <param name="monitoredItems">A list of monitored items to create.</param>
            <returns>A list of StatusCodes that indicate for each monitored item whether the
            CreateMonitoredItem operation has been successful.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.CreateMonitoredItems(System.Collections.Generic.IList{UnifiedAutomation.UaClient.MonitoredItem},UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Creates a list of monitored items in the subscription. The
            monitored items could be data monitored items or event monitored
            items.
            </summary>
            <param name="monitoredItems">A list of monitored items to create.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <returns>A list of StatusCodes that indicate for each monitored item whether the
            CreateMonitoredItem operation has been successful.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.CreateMonitoredItems(System.Collections.Generic.IList{UnifiedAutomation.UaClient.MonitoredItem},UnifiedAutomation.UaBase.TimestampsToReturn,UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Creates a list of monitored items in the subscription. The
            monitored items could be data monitored items or event monitored
            items.
            </summary>
            <param name="monitoredItems">A list of monitored items to create.</param>
            <param name = "timestampsToReturn">OPC UA defines two timestamps,
            the source and the server timestamp. This parameter allows the client
            to define which timestamps the server should return with the
            value.<br/>
            The source timestamp is only available for Value Attributes. The
            source timestamp is used to reflect the timestamp that was applied to
            a Variable value by the data source. It should indicate the last
            change of the value or status code. The source timestamp must be
            always generated by the same physical clock. This timestamp type was
            added for OPC UA to cover the use case to get the timestamp of the
            last value change which is different than the server timestamp
            definition.<br/>
            The server timestamp is used to reflect the time that the server
            received a Variable value or knew it to be accurate if the changes are
            reported by exception and the connection to the data source is
            operating. This is the behavior expected by Classic OPC<br/>
             Possible values are
            - TimestampsToReturn.Source
            - TimestampsToReturn.Server
            - TimestampsToReturn.Both </param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <returns>A list of StatusCodes that indicate for each monitored item whether the
            CreateMonitoredItem operation has been successful.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.BeginCreateMonitoredItems(System.Collections.Generic.IList{UnifiedAutomation.UaClient.MonitoredItem},UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronous call to create a list of monitored items in the
            subscription. The monitored items could be data monitored items or
            event monitored items.
            </summary>
            <param name="monitoredItems">A list of monitored items to create.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <remarks>
            If this method is called before the Subscription is created, the
            MonitoredItems are saved and the return status is GoodCallAgain. The
            MonitoredItems will be automatically created after the Subscription is
            created. Any errors are reported in the LastError property of the
            MonitoredItem object.
            </remarks>
            <returns>An object which must be passed to the #EndCreateMonitoredItems method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.BeginCreateMonitoredItems(System.Collections.Generic.IList{UnifiedAutomation.UaClient.MonitoredItem},UnifiedAutomation.UaBase.TimestampsToReturn,UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronous call to create a list of monitored items in the
            subscription. The monitored items could be data monitored items or
            event monitored items.
            </summary>
            <param name="monitoredItems">A list of monitored items to create.</param>
            <param name="timestampsToReturn">Indicates whether server and / or source timestamps
            are returned.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <remarks>
            If this method is called before the Subscription is created, the
            MonitoredItems are saved and the return status is GoodCallAgain. The
            MonitoredItems will be automatically created after the Subscription is
            created. Any errors are reported in the LastError property of the
            MonitoredItem object.
            </remarks>
            <returns>An object which must be passed to the #EndCreateMonitoredItems method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.EndCreateMonitoredItems(System.IAsyncResult)">
            <summary>
            Ends an asynchronous operation to create monitored items.
            </summary>
            <param name="result">The object returned from the #BeginCreateMonitoredItems method.</param>
            <returns>A list of StatusCodes that indicate for each monitored item whether the
            CreateMonitoredItem operation has been successful.</returns>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Subscription.CreateMonitoredItemsAsyncResult">
            <summary>
            Stores state information for asynchronous create monitored items operations.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.OnCreateMonitoredItemsComplete(System.IAsyncResult)">
            <summary>
            Called when create monitored items operation completes.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.ModifyMonitoredItems(System.Collections.Generic.IList{UnifiedAutomation.UaClient.MonitoredItem})">
            <summary>
            Modifies monitored items.
            </summary>
            <param name="monitoredItems">A list of monitored items to modify.</param>
            <returns>A list of StatusCodes that indicate for each monitored item whether the
            ModifyMonitoredItem operation has been successful.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.ModifyMonitoredItems(System.Collections.Generic.IList{UnifiedAutomation.UaClient.MonitoredItem},UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Modifies monitored items.
            </summary>
            <param name="monitoredItems">A list of monitored items to modify.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <returns>A list of StatusCodes that indicate for each monitored item whether the
            ModifyMonitoredItem operation has been successful.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.ModifyMonitoredItems(System.Collections.Generic.IList{UnifiedAutomation.UaClient.MonitoredItem},UnifiedAutomation.UaBase.TimestampsToReturn,UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Modifies monitored items.
            </summary>
            <param name="monitoredItems">A list of monitored items to modify.</param>
            <param name = "timestampsToReturn">OPC UA defines two timestamps,
            the source and the server timestamp. This parameter allows the client
            to define which timestamps the server should return with the
            value.<br/>
            The source timestamp is only available for Value Attributes. The
            source timestamp is used to reflect the timestamp that was applied to
            a Variable value by the data source. It should indicate the last
            change of the value or status code. The source timestamp must be
            always generated by the same physical clock. This timestamp type was
            added for OPC UA to cover the use case to get the timestamp of the
            last value change which is different than the server timestamp
            definition.<br/>
            The server timestamp is used to reflect the time that the server
            received a Variable value or knew it to be accurate if the changes are
            reported by exception and the connection to the data source is
            operating. This is the behavior expected by Classic OPC<br/>
             Possible values are
            - TimestampsToReturn.Source
            - TimestampsToReturn.Server
            - TimestampsToReturn.Both </param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <returns>A list of StatusCodes that indicate for each monitored item whether the
            ModifyMonitoredItem operation has been successful.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.BeginModifyMonitoredItems(System.Collections.Generic.IList{UnifiedAutomation.UaClient.MonitoredItem},UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronous call to modify monitored items.
            </summary>
            <param name="monitoredItems">A list of monitored items to modify.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the #EndModifyMonitoredItems method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.BeginModifyMonitoredItems(System.Collections.Generic.IList{UnifiedAutomation.UaClient.MonitoredItem},UnifiedAutomation.UaBase.TimestampsToReturn,UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronous call to modify monitored items.
            </summary>
            <param name="monitoredItems">A list of monitored items to modify.</param>
            <param name = "timestampsToReturn">OPC UA defines two timestamps,
            the source and the server timestamp. This parameter allows the client
            to define which timestamps the server should return with the
            value.<br/>
            The source timestamp is only available for Value Attributes. The
            source timestamp is used to reflect the timestamp that was applied to
            a Variable value by the data source. It should indicate the last
            change of the value or status code. The source timestamp must be
            always generated by the same physical clock. This timestamp type was
            added for OPC UA to cover the use case to get the timestamp of the
            last value change which is different than the server timestamp
            definition.<br/>
            The server timestamp is used to reflect the time that the server
            received a Variable value or knew it to be accurate if the changes are
            reported by exception and the connection to the data source is
            operating. This is the behavior expected by Classic OPC<br/>
             Possible values are
            - TimestampsToReturn.Source
            - TimestampsToReturn.Server
            - TimestampsToReturn.Both </param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the #EndModifyMonitoredItems method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.EndModifyMonitoredItems(System.IAsyncResult)">
            <summary>
            Ends an asynchronous operation to modify monitored items.
            </summary>
            <param name="result">The object returned from the
            #BeginModifyMonitoredItems method.</param>
            <returns>A list of StatusCodes that indicate for each monitored item whether the
            ModifyMonitoredItem operation has been successful.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.OnModifyMonitoredItemsComplete(System.IAsyncResult)">
            <summary>
            Called when modify monitored items operation completes.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.DeleteMonitoredItems(System.Collections.Generic.IList{UnifiedAutomation.UaClient.MonitoredItem})">
            <summary>
            Deletes monitored items.
            </summary>
            <param name="monitoredItems">A list of monitored items to delete.</param>
            <returns>A list of StatusCodes that indicate for each monitored item whether the
            DeleteMonitoredItem operation has been successful.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.DeleteMonitoredItems(System.Collections.Generic.IList{UnifiedAutomation.UaClient.MonitoredItem},UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Deletes monitored items.
            </summary>
            <param name="monitoredItems">A list of monitored items to delete.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <returns>A list of StatusCodes that indicate for each monitored item whether the
            DeleteMonitoredItem operation has been successful.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.BeginDeleteMonitoredItems(System.Collections.Generic.IList{UnifiedAutomation.UaClient.MonitoredItem},UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Deletes monitored items.
            </summary>
            <param name="monitoredItems">A list of monitored items to delete.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the #EndDeleteMonitoredItems method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.EndDeleteMonitoredItems(System.IAsyncResult)">
            <summary>
            Ends an asynchronous operation to delete monitored items.
            </summary>
            <param name="result">The object returned from the #BeginDeleteMonitoredItems method.</param>
            <returns>A list of StatusCodes that indicate for each monitored item whether the
            DeleteMonitoredItem operation has been successful.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.OnDeleteMonitoredItemsComplete(System.IAsyncResult)">
            <summary>
            Called when create monitored items operation completes.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.SetClientHandle(UnifiedAutomation.UaClient.MonitoredItem,System.UInt32)">
            <summary>
            Sets the ClientHandle for a MonitoredItem.
            </summary>
            <remarks>
            The Subscription must not be created or transfered when this method is called.
            The intended used case for this method is to set a ClientHandle of a MonitoredItem
            before the subscription is transferred.
            </remarks>
            <param name="monitoredItem">The MonitoredItem must have been added to the Subscription.</param>
            <param name="clientHandle">The ClientHandle for the MonitoredItem. This valus must not be used
            by other MonitoredItems of the Subscription.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.SetClientHandles(System.Collections.Generic.IList{UnifiedAutomation.UaClient.MonitoredItem},System.Collections.Generic.IList{System.UInt32})">
            <summary>
            Sets the ClientHandles for MonitoredItems
            </summary>
            <remarks>
            The Subscription must not be created or transfered when this method is called.
            The intended used case for this method is to set ClientHandles of MonitoredItems
            before the subscription is transferred.
            </remarks>
            <param name="monitoredItems">The MonitoredItems must have been added to the Subscription.
            Must have the same size than clientHandles.</param>
            <param name="clientHandles">The ClientHandles for the MonitoredItems. The ClientHandles
            must be used by other MonitoredItems of the Subscription.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.SetServerHandle(UnifiedAutomation.UaClient.MonitoredItem,System.UInt32)">
            <summary>
            Sets the ServerHandle of a MonitoredItem.
            </summary>
            <remarks>
            The Subscription must not be created or transfered when this method is called.
            The intended used case for this method is to set a ClientHandle of a MonitoredItem
            before the subscription is transferred.
            </remarks>
            <param name="monitoredItem">The MonitoredItem must have been added to the Subscription.</param>
            <param name="serverHandle">The ServerHandle. The caller must ensure that the value
            matches the ServerHandle of the subscription in the server.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.SetMonitoringMode(UnifiedAutomation.UaBase.MonitoringMode,System.Collections.Generic.IList{UnifiedAutomation.UaClient.MonitoredItem})">
            <summary>
            Sets the monitoring mode for a list of monitored items.
            </summary>
            <param name="monitoringMode">The new monitoring mode. Possible
            values are <c>Disabled</c>, <c>Sampling</c>, and <c>Reporting</c>.</param>
            <param name="monitoredItems">A list of monitored items.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.SetMonitoringMode(UnifiedAutomation.UaBase.MonitoringMode,System.Collections.Generic.IList{UnifiedAutomation.UaClient.MonitoredItem},UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Sets the monitoring mode for a list of monitored items.
            </summary>
            <param name="monitoringMode">The new monitoring mode. Possible
            values are <c>Disabled</c>, <c>Sampling</c>, and <c>Reporting</c>.</param>
            <param name="monitoredItems">A list of monitored items.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <returns>A list of StatusCodes that indicate for each monitored item whether the
            SetMonitoringMode operation has been successful.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.BeginSetMonitoringMode(UnifiedAutomation.UaBase.MonitoringMode,System.Collections.Generic.IList{UnifiedAutomation.UaClient.MonitoredItem},UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronous call to set the monitoring mode for a list of monitored items.
            </summary>
            <param name="monitoringMode">The new monitoring mode. Possible
            values are <c>Disabled</c>, <c>Sampling</c>, and <c>Reporting</c>.</param>
            <param name="monitoredItems">A list of monitored items.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the #EndSetMonitoringMode method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.EndSetMonitoringMode(System.IAsyncResult)">
            <summary>
            Ends an ansynchronous operation to set the monitoring mode for
            moniored items.
            </summary>
            <param name="result">The object returned from the
            #BeginSetMonitoringMode method.</param>
            <returns>A list of StatusCodes that indicate for each monitored item whether the
            SetMonitoringMode operation has been successful.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.OnSetMonitoringModeComplete(System.IAsyncResult)">
            <summary>
            Called when set monitoring mode operation completes.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.SetTriggering(UnifiedAutomation.UaClient.MonitoredItem,System.Collections.Generic.IList{UnifiedAutomation.UaClient.MonitoredItem},System.Collections.Generic.IList{UnifiedAutomation.UaClient.MonitoredItem},UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Changes the triggering for a monitored item.
            </summary>
            <param name="triggeringItem">The monitored item which triggers other monitored items when it reports.</param>
            <param name="linksToAdd">The list of monitored items which report when the trigger changes.</param>
            <param name="linksToRemove">The list of monitored items previously added which should no longer report when the trigger changes.</param>
            <param name="settings">The settings.</param>
            <returns>The results for each operation to add or remove a link.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.BeginSetTriggering(UnifiedAutomation.UaClient.MonitoredItem,System.Collections.Generic.IList{UnifiedAutomation.UaClient.MonitoredItem},System.Collections.Generic.IList{UnifiedAutomation.UaClient.MonitoredItem},UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Begins a request to change the triggering for a monitored item.
            </summary>
            <param name="triggeringItem">The monitored item which triggers other monitored items when it reports.</param>
            <param name="linksToAdd">The list of monitored items which report when the trigger changes.</param>
            <param name="linksToRemove">The list of monitored items previously added which should no longer report when the trigger changes.</param>
            <param name="settings">The settings.</param>
            <param name="callback">The callback.</param>
            <param name="userData">The user data.</param>
            <returns>The object used to manage the state of the asynchronous operation.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.EndSetTriggering(System.IAsyncResult)">
            <summary>
            Ends a request to change the triggering for a monitored item.
            </summary>
            <param name="result">The object used to manage the state of the asynchronous operation.</param>
            <returns>The results for each operation to add or remove a link.</returns>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Subscription.SetTriggeringAsyncResult">
            <summary>
            Stores state information for asynchronous set triggering operations.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.OnSetTriggeringComplete(System.IAsyncResult)">
            <summary>
            Called when set monitoring mode operation completes.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.Republish(System.UInt32)">
            <summary>
            Republish call to get lost notification messages.
            </summary>
            <param name="retransmitSequenceNumber">The sequence number of a
            notification message to be republished.</param>
            <returns>The notification message returned by the server.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.Republish(System.UInt32,UnifiedAutomation.UaClient.RequestSettings)">
            <summary>
            Republish call to get lost notification messages.
            </summary>
            <param name="retransmitSequenceNumber">The sequence number of a
            notification message to be republished.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <returns>The notification message returned by the server.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.BeginRepublish(System.UInt32,UnifiedAutomation.UaClient.RequestSettings,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronous republish call to get lost notification messages.
            </summary>
            <param name="retransmitSequenceNumber">The sequence number of a
            notification message to be republished.</param>
            <param name="settings">The general settings for the request. If
            null, the default settings from the property
            #DefaultRequestSettings are used.</param>
            <param name="callback">The callback to use when the async call completes.</param>
            <param name="userData">The user data that is passed to the callback.</param>
            <returns>An object which must be passed to the #EndRepublish method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.EndRepublish(System.IAsyncResult)">
            <summary>
            Ends an asynchronous operation to republish lost notification messages.
            </summary>
            <param name="result">The object returned from the #BeginRepublish method.</param>
            <returns>The notification message returned by the server.</returns>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Subscription.RepublishAsyncResult">
            <summary>
            Stores state information for asynchronous create monitored items operations.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.OnRepublishComplete(System.IAsyncResult)">
            <summary>
            Called when a republish operation completes.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.PublishReceived(System.Collections.Generic.List{System.UInt32},System.Boolean,UnifiedAutomation.UaBase.NotificationMessage)">
            <summary>
            Processes a publish received from the server.
            </summary>
            <param name="availableSequenceNumbers">The available sequence numbers.</param>
            <param name="moreNotifications">if set to <c>true</c> [more notifications].</param>
            <param name="notificationMessage">The notification message.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.GetAcknowledgements(UnifiedAutomation.UaBase.SubscriptionAcknowledgementCollection)">
            <summary>
            Gets the acknowledgements for previous notification messages.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.UpdateStatus(UnifiedAutomation.UaClient.SubscriptionConnectionStatus,UnifiedAutomation.UaBase.StatusCode)">
            <summary>
            Changes the subscription status.
            </summary>
            <param name="newStatus">The new status.</param>
            <param name="error">The error.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.OnWatchdogCycle(System.Object)">
            <summary>
            Called when watchdog cycle runs.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.RaiseNotificationMessageReceivedEvent(UnifiedAutomation.UaBase.NotificationMessage,System.Boolean)">
            <summary>
            Raises a NotificationMessageReceived event.
            </summary>
            <param name="message">The message.</param>
            <param name="republish">if set to <c>true</c> the message was republished.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.RaiseDataChangedEvent(UnifiedAutomation.UaBase.NotificationMessage,System.Boolean)">
            <summary>
            Raises a DataChanged event.
            </summary>
            <param name="message">The message.</param>
            <param name="republish">if set to <c>true</c> the message was republished.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.RaiseNewEventsEvent(UnifiedAutomation.UaBase.NotificationMessage,System.Boolean)">
            <summary>
            Raises a NewEvents event.
            </summary>
            <param name="message">The message.</param>
            <param name="republish">if set to <c>true</c> the message was republished.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.CheckSequenceNumber(System.UInt32,System.Collections.Generic.List{System.UInt32})">
            <summary>
            Checks the sequence number.
            </summary>
            <param name="sequenceNumber">The sequence number.</param>
            <param name="availableSequenceNumbers">The available sequence numbers.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.CheckInState(UnifiedAutomation.UaClient.Subscription.State)">
            <summary>
            Checks the state of the subscription.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="M:UnifiedAutomation.UaClient.Subscription.CheckNotInState(UnifiedAutomation.UaClient.Subscription.State)">
            <summary>
            Checks the state of the subscription.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="T:UnifiedAutomation.UaClient.Subscription.State">
            <summary>
            The possible states for the subscription.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.Subscription.State.Deleted">
            <summary>
            The subscription has not been created on the server.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.Subscription.State.Created">
            <summary>
            The subscription has been created on the server.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.Subscription.State.Error">
            <summary>
            The subscription is in an error state.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.SubscriptionConnectionStatus">
            @ingroup UaClientLibraryHelper
             <summary>
             The possible states for a subscription.
             </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.SubscriptionConnectionStatus.Deleted">
            <summary>
            The subscription has not been created on the server.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.SubscriptionConnectionStatus.Created">
            <summary>
            The subscription was created on the server.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.SubscriptionConnectionStatus.Transferred">
            <summary>
            The subscription was transferred from another session.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.SubscriptionConnectionStatus.WarningKeepAliveLate">
            <summary>
            The keep alive for the subscription is late.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.SubscriptionConnectionStatus.Error">
            <summary>
            The subscription is in an error state.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.DataChange">
            @ingroup UaClientLibraryHelper
             <summary>
             A data change notification.
             </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.DataChange.MonitoredItem">
            <summary>
            Gets or sets the monitored item.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.DataChange.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.DataChange.Republish">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:UnifiedAutomation.UaClient.DataChange"/> is republish.
            </summary>
            <value>
              <c>true</c> if a republish; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaClient.DataChangedEventArgs">
            @ingroup UaClientLibraryHelper
             <summary>
             The event arguments provided when a DataChanged occurs.
             </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.DataChangedEventArgs.#ctor(System.Collections.Generic.List{UnifiedAutomation.UaClient.DataChange})">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.DataChangedEventArgs.DataChanges">
            <summary>
            Gets or sets the data changes.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.DataChangedEventHandler">
            <summary>
            Used to handle DataChanged events.
            </summary>
            <param name="subscription">
            The subscription object that contains the MonitoredItems passed in the DataChanges of e.
            </param>
            <param name="e">
            The information about the changed values.
            </param>
        </member>
        <member name="T:UnifiedAutomation.UaClient.NewEvent">
            @ingroup UaClientLibraryHelper
             <summary>
             An event notification.
             </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.NewEvent.MonitoredItem">
            <summary>
            Gets or sets the monitored item.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.NewEvent.Event">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.NewEvent.Republish">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:UnifiedAutomation.UaClient.DataChange"/> is republish.
            </summary>
            <value>
              <c>true</c> if a republish; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:UnifiedAutomation.UaClient.NewEvent.Get``1(System.String)">
            <summary>
            Gets the specified browse path.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="browsePath">The browse path.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.NewEvent.Get``1(``0,System.String)">
            <summary>
            Gets the specified default value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="defaultValue">The default value.</param>
            <param name="browsePath">The browse path.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.NewEvent.Get``1(``0,UnifiedAutomation.UaBase.StringTable,System.String)">
            <summary>
            Gets the specified default value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="defaultValue">The default value.</param>
            <param name="sourceTable">The source table.</param>
            <param name="browsePath">The browse path.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.NewEvent.Get``1(UnifiedAutomation.UaBase.QualifiedName[])">
            <summary>
            Gets the specified browse path.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="browsePath">The browse path.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.NewEvent.Get``1(``0,UnifiedAutomation.UaBase.QualifiedName[])">
            <summary>
            Gets the specified default value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="defaultValue">The default value.</param>
            <param name="browsePath">The browse path.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.NewEvent.Get``1(UnifiedAutomation.UaBase.StringTable,UnifiedAutomation.UaBase.AbsoluteName[])">
            <summary>
            Gets the specified source table.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sourceTable">The source table.</param>
            <param name="browsePath">The browse path.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaClient.NewEvent.Get``1(``0,UnifiedAutomation.UaBase.StringTable,UnifiedAutomation.UaBase.AbsoluteName[])">
            <summary>
            Gets the specified default value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="defaultValue">The default value.</param>
            <param name="sourceTable">The source table.</param>
            <param name="browsePath">The browse path.</param>
            <returns></returns>
        </member>
        <member name="T:UnifiedAutomation.UaClient.NewEventsEventArgs">
            @ingroup UaClientLibraryHelper
             <summary>
             The event arguments provided when a NewEvents occurs.
             </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.NewEventsEventArgs.#ctor(System.Collections.Generic.List{UnifiedAutomation.UaClient.NewEvent})">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.NewEventsEventArgs.Events">
            <summary>
            Gets or sets the events.
            </summary>
            <value>
            The events.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaClient.NewEventsEventHandler">
            <summary>
            Used to handle NewEvents events.
            <param name="subscription">
            The subscription object that contains the MonitoredItems passed in the NewEvents of e.
            </param>
            <param name="e">
            The information about the new events.
            </param>
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.NotificationMessageReceivedEventArgs">
            @ingroup UaClientLibraryHelper
             <summary>
             The event arguments provided when a NotificationMessageReceived occurs.
             </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.NotificationMessageReceivedEventArgs.#ctor(UnifiedAutomation.UaBase.NotificationMessage,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.NotificationMessageReceivedEventArgs"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="republish">if set to <c>true</c> then it was returned in a Republish call.</param>
        </member>
        <member name="P:UnifiedAutomation.UaClient.NotificationMessageReceivedEventArgs.NotificationMessage">
            <summary>
            Gets the notification message.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.NotificationMessageReceivedEventArgs.Republish">
            <summary>
            Whether the message was returned in a Republish operation.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.NotificationMessageReceivedEventArgs.Confirmed">
            <summary>
            Gets or sets a value indicating whether this message should be confirmed.
            </summary>
            <value>
              <c>true</c> if the message has been confirmed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaClient.NotificationMessageReceivedEventHandler">
            <summary>
            Used to handle NotificationMessageReceived events.
            </summary>
            <param name="subscription">The subscription.</param>
            <param name="e">The <see cref="T:UnifiedAutomation.UaClient.NotificationMessageReceivedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:UnifiedAutomation.UaClient.MissingSequenceNumberEventArgs">
            @ingroup UaClientLibraryHelper
             <summary>
             The event arguments provided when a MissingSequenceNumber occurs.
             </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.MissingSequenceNumberEventArgs.#ctor(System.UInt32,System.UInt32,System.UInt32,System.Collections.Generic.List{System.UInt32})">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MissingSequenceNumberEventArgs.CurrentSequenceNumber">
            <summary>
            Gets the current sequence number.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MissingSequenceNumberEventArgs.LastNumberInSequence">
            <summary>
            Gets the last number received in sequence.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MissingSequenceNumberEventArgs.LargestSequenceNumber">
            <summary>
            Gets the largest sequence numeber received.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MissingSequenceNumberEventArgs.AvailableSequenceNumbers">
            <summary>
            The list of sequence numbers which are available for a republish.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MissingSequenceNumberEventArgs.Reset">
            <summary>
            Whether to reset the sequence number counters when the callback completes.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.MissingSequenceNumberEventHandler">
            <summary>
            Used to report missing messages.
            </summary>
            <param name="subscription">
            The subscription with missing sequence numbers.
            </param>
            <param name="e">
            The sequence number information.
            </param>
        </member>
        <member name="T:UnifiedAutomation.UaClient.SubscriptionRecreatedEventArgs">
            @ingroup UaClientLibraryHelper
             <summary>
             The event arguments provided when a Subscription is recreated
             </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.SubscriptionRecreatedEventArgs.OldNamespaceUris">
            <summary>
            The NamespaceTable of the Session before the Subscription was recreated.
            </summary>
            <remarks>
            This NamespaceTable can be used to determine the namespaces of the MonitoredItems
            that could not be mapped. The reason for namespaces that could not be mapped is
            an updated NamespaceArray of the server after a restart.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaClient.SubscriptionRecreatedEventArgs.NotMappedMonitoredItems">
            <summary>
            A List of MonitoredItems which NodeId namespaces cannot be mapped if the NamespaceArray
            of the server has changed after a restart.
            </summary>
            <remarks>
            The NamespaceIndices of the NodeIds of the MonitoredItems are the indices of the entries
            in OldNamespaceUris.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaClient.SubscriptionRecreatedEventArgs.RemovedMonitoredItems">
            <summary>
            A List of NodeIds that could not be created.
            </summary>
            <remarks>
            A MonitoredItem is removed from a Subscription if the CreateMonitoredItems operation does
            not succeed for the MonitoredItem.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaClient.SubscriptionRecreatedEventArgs.StatusCodes">
            <summary>
            A List of StatusCodes inidicating the reason why a specific MonitoredItem could not be
            created.
            </summary>
            <remarks>
            The index of a StatusCode matches the index of a MonitoredItem in RemovedMonitoredItems.
            In most cases the StatusCode will be BadNodeIdUnknown.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaClient.SubscriptionRecreatedEventArgs.Exception">
            <summary>
            The Exception that was catched during CreateMonitoredItems.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.SubscriptionRecreatedEventArgs.RemovedLinks">
            <summary>
            The links that could not be created after recreating the Subscription.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.SubscriptionRecreatedEventHandler">
            <summary>
            Used to report if a subscription has been recreated
            </summary>
            <param name="subscription">
            The subscription with missing sequence numbers.
            </param>
            <param name="e">The e</param>
        </member>
        <member name="T:UnifiedAutomation.UaClient.RepublishErrorEventArgs">
            @ingroup UaClientLibraryHelper
             <summary>
             The event arguments provided when a RepublishError occurs.
             </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.RepublishErrorEventArgs.#ctor(System.UInt32,UnifiedAutomation.UaBase.StatusCode)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.RepublishErrorEventArgs.SequenceNumber">
            <summary>
            Gets the sequence number.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.RepublishErrorEventArgs.Error">
            <summary>
            The error code.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.RepublishErrorEventHandler">
            <summary>
            Used to report missing messages.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.SubscriptionStatusChangedEventArgs">
            @ingroup UaClientLibraryHelper
             <summary>
             The event arguments provided when a SubscriptionStatusChanged occurs.
             </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.SubscriptionStatusChangedEventArgs.#ctor(UnifiedAutomation.UaClient.SubscriptionConnectionStatus,UnifiedAutomation.UaClient.SubscriptionConnectionStatus,UnifiedAutomation.UaBase.StatusCode)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.SubscriptionStatusChangedEventArgs.CurrentStatus">
            <summary>
            Gets the current status.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.SubscriptionStatusChangedEventArgs.OldStatus">
            <summary>
            Gets the previous status.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.SubscriptionStatusChangedEventArgs.Error">
            <summary>
            Gets the error associated with the change.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.SubscriptionStatusChangedEventHandler">
            <summary>
            Used to report status change events.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.MonitoredItemOperationCompleteEventArgs">
            @ingroup UaClientLibraryHelper
             <summary>
             The event arguments provided when a RepublishError occurs.
             </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.MonitoredItemOperationCompleteEventArgs.#ctor(System.Collections.Generic.List{UnifiedAutomation.UaClient.MonitoredItem},System.Collections.Generic.List{UnifiedAutomation.UaBase.StatusCode},System.Object)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MonitoredItemOperationCompleteEventArgs.MonitoredItems">
            <summary>
            Gets the monitored items.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MonitoredItemOperationCompleteEventArgs.Results">
            <summary>
            Gets the results.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.MonitoredItemOperationCompleteEventArgs.UserData">
            <summary>
            Gets the user data.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.MonitoredItemOperationCompleteEventHandler">
            <summary>
            Used to report missing messages.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.TraceClientModuleInfo">
            @ingroup UaClientLibraryHelper
             <summary>
             The metadata for the UnifiedAutomation.UaClient trace object.
             </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.TraceClientModuleInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.TraceClientModuleInfo"/> class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.TraceClient">
            @ingroup UaClientLibraryHelper
             <summary>
             The trace class used by the UnifiedAutomation.UaClient namespace.
             </summary>
        </member>
        <member name="T:UnifiedAutomation.UaClient.UserIdentity">
            @ingroup UaClientLibraryHelper
             <summary>
             A user identity.
             </summary>
        </member>
        <member name="M:UnifiedAutomation.UaClient.UserIdentity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaClient.UserIdentity"/> class.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaClient.UserIdentity.IdentityType">
            <summary>
            Gets or sets the type of the identity.
            </summary>
            <value>
            The type of the identity.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.UserIdentity.UserName">
            <summary>
            Gets or sets the name of the user.
            </summary>
            <value>
            The name of the user.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.UserIdentity.Password">
            <summary>
            Gets or sets the password.
            </summary>
            <value>
            The password.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.UserIdentity.Certificate">
            <summary>
            Gets or sets the certificate.
            </summary>
            <value>
            The certificate.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.UserIdentity.KerberosProvider">
            <summary>
            Gets or sets the kerberos ticket.
            </summary>
            <value>
            The kerberos ticket.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.UserIdentity.XmlTokenType">
            <summary>
            Gets or sets the URI specifying the format of the WS-* compliant XML token.
            </summary>
            <value>
            The URI specifying the format of the WS-* compliant XML token.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaClient.UserIdentity.XmlToken">
            <summary>
            Gets or sets the WS-* compliant XML token.
            </summary>
            <value>
            The WS-* compliant XML token.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaClient.UserIdentityType">
            <summary>
            The possible use identity types.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.UserIdentityType.Anonymous">
            <summary>
            No user identity is available.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.UserIdentityType.UserName">
            <summary>
            The user identity is a user name and password.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.UserIdentityType.Certificate">
            <summary>
            The user identity is an X509 certificate.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.UserIdentityType.Kerberos">
            <summary>
            The user identity is integrated windows authentication via Kerberos.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaClient.UserIdentityType.XmlToken">
            <summary>
            The user identity a WS-* compliant XML token.
            </summary>
        </member>
    </members>
</doc>
