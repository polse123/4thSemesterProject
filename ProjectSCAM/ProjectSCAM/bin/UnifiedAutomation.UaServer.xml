<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UnifiedAutomation.UaServer</name>
    </assembly>
    <members>
        <member name="T:UnifiedAutomation.UaServer.AggregateCalculator">
            <summary>
            Calculates the value of an aggregate.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AggregateCalculator.#ctor(UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Creates a default aggregator.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AggregateCalculator.#ctor(UnifiedAutomation.UaBase.NodeId,System.DateTime,System.DateTime,System.Double,System.Boolean,UnifiedAutomation.UaBase.AggregateConfiguration)">
            <summary>
            Initializes the calculation stream.
            </summary>
            <param name="aggregateId">The aggregate function to apply.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <param name="processingInterval">The processing interval.</param>
            <param name="stepped">Whether to use stepped interpolation.</param>
            <param name="configuration">The aggregate configuration.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AggregateCalculator.Initialize(UnifiedAutomation.UaBase.NodeId,System.DateTime,System.DateTime,System.Double,System.Boolean,UnifiedAutomation.UaBase.AggregateConfiguration)">
            <summary>
            Initializes the calculation stream.
            </summary>
            <param name="aggregateId">The aggregate function to apply.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <param name="processingInterval">The processing interval.</param>
            <param name="stepped">Whether to use stepped interpolation.</param>
            <param name="configuration">The aggregate configuration.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AggregateCalculator.AggregateId">
            <summary>
            The aggregate function applied by the calculator.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AggregateCalculator.QueueRawValue(UnifiedAutomation.UaBase.DataValue)">
            <summary>
            Queues a raw value for processing.
            </summary>
            <param name="value">The data value to process.</param>
            <returns>True if successful, false if the timestamp has been superceeded by values already in the stream.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AggregateCalculator.GetProcessedValue(System.Boolean)">
            <summary>
            Returns the next processed value.
            </summary>
            <param name="returnPartial">If true a partial interval should be processed.</param>
            <returns>The processed value. Null if nothing available and returnPartial is false.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AggregateCalculator.HasEndTimePassed(System.DateTime)">
            <summary>
            Returns true if the specified time is later than the end of the current interval.
            </summary>
            <remarks>Return true if time flows forward and the time is later than the end time.</remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AggregateCalculator.StartTime">
            <summary>
            The start time for the request.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AggregateCalculator.EndTime">
            <summary>
            The end time for the request.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AggregateCalculator.ProcessingInterval">
            <summary>
            The processing interval for the request.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AggregateCalculator.Stepped">
            <summary>
            True if the data series requires stepped interpolation.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AggregateCalculator.Configuration">
            <summary>
            The configuration to use when processing.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AggregateCalculator.UseServerTimestamp">
            <summary>
            Whether to use the server timestamp for all processing.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AggregateCalculator.TimeFlowsBackward">
            <summary>
            True if data is being processed in reverse order.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AggregateCalculator.CurrentSlice">
            <summary>
            Whether to use the server timestamp for all processing.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AggregateCalculator.Complete">
            <summary>
            True if all values required for the request have been received and processed
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AggregateCalculator.SetPartialBit">
            <summary>
            True if the GetProcessedValue method should set the Partial bit when appropriate.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AggregateCalculator.UsingExtrapolation">
            <summary>
            True if data is extrapolated after the end of data.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AggregateCalculator.CompareTimestamps(UnifiedAutomation.UaBase.DataValue,UnifiedAutomation.UaBase.DataValue)">
            <summary>
            Compares timestamps for two DataValues according to the current UseServerTimestamp setting.
            </summary>
            <param name="value1">The first value to compare.</param>
            <param name="value2">The second value to compare.</param>
            <returns>Less than 0 if value1 is earlier than value2; 0 if they are equal; Greater than zero otherwise.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AggregateCalculator.CompareTimestamps(UnifiedAutomation.UaBase.DataValue,System.Collections.Generic.LinkedListNode{UnifiedAutomation.UaBase.DataValue})">
            <summary>
            Compares timestamps for two DataValues according to the current UseServerTimestamp setting.
            </summary>
            <param name="value1">The first value to compare.</param>
            <param name="value2">The second value to compare.</param>
            <returns>Less than 0 if value1 is earlier than value2; 0 if they are equal; Greater than zero otherwise.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AggregateCalculator.CompareTimestamps(System.Collections.Generic.LinkedListNode{UnifiedAutomation.UaBase.DataValue},System.Collections.Generic.LinkedListNode{UnifiedAutomation.UaBase.DataValue})">
            <summary>
            Compares timestamps for two DataValues according to the current UseServerTimestamp setting.
            </summary>
            <param name="value1">The first value to compare.</param>
            <param name="value2">The second value to compare.</param>
            <returns>Less than 0 if value1 is earlier than value2; 0 if they are equal; Greater than zero otherwise.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AggregateCalculator.CompareTimestamps(System.DateTime,System.Collections.Generic.LinkedListNode{UnifiedAutomation.UaBase.DataValue})">
            <summary>
            Compares timestamps for a timestamp to a DataValue according to the current UseServerTimestamp setting.
            </summary>
            <param name="value1">The timestamp to compare.</param>
            <param name="value2">The data value to compare.</param>
            <returns>Less than 0 if value1 is earlier than value2; 0 if they are equal; Greater than zero otherwise.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AggregateCalculator.IsGood(UnifiedAutomation.UaBase.DataValue)">
            <summary>
            Checks if the value is good according to the configuration rules.
            </summary>
            <param name="value">The value to test.</param>
            <returns>True if the value is good.</returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AggregateCalculator.TimeSlice">
            <summary>
            Stores information about a slice of data to be processed.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AggregateCalculator.TimeSlice.StartTime">
            <summary>
            The start time for the slice.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AggregateCalculator.TimeSlice.EndTime">
            <summary>
            The end time for the slice.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AggregateCalculator.TimeSlice.Partial">
            <summary>
            True if the slice is a partial interval.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AggregateCalculator.TimeSlice.Complete">
            <summary>
            True if all of the data required to process the slice has been collected.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AggregateCalculator.TimeSlice.OutOfDataRange">
            <summary>
            True if the slice includes times that are outside of the available dataset.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AggregateCalculator.TimeSlice.EarlyBound">
            <summary>
            The first early bound for the slice.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AggregateCalculator.TimeSlice.SecondEarlyBound">
            <summary>
            The second early bound for the slice (always earlier than the first).
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AggregateCalculator.TimeSlice.Begin">
            <summary>
            The beginning of the slice.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AggregateCalculator.TimeSlice.End">
            <summary>
            The end of the slice.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AggregateCalculator.TimeSlice.LateBound">
            <summary>
            The late bound for the slice.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AggregateCalculator.TimeSlice.LastProcessedValue">
            <summary>
            The last value which was processed.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AggregateCalculator.CreateSlice(UnifiedAutomation.UaServer.AggregateCalculator.TimeSlice)">
            <summary>
            Creates a new time slice to process.
            </summary>
            <param name="previousSlice">The previous processed slice.</param>
            <returns>The new time slice.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AggregateCalculator.UpdateSlice(UnifiedAutomation.UaServer.AggregateCalculator.TimeSlice)">
            <summary>
            Creates a new time slice to process.
            </summary>
            <param name="slice">The slice to update.</param>
            <returns>True if the slice is complete.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AggregateCalculator.ComputeValue(UnifiedAutomation.UaServer.AggregateCalculator.TimeSlice)">
            <summary>
            Calculates the value for the timeslice.
            </summary>
            <param name="slice">The slice to process.</param>
            <returns>The processed value.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AggregateCalculator.Interpolate(UnifiedAutomation.UaServer.AggregateCalculator.TimeSlice)">
            <summary>
            Calculate the interpolate aggregate for the timeslice.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AggregateCalculator.GetNoDataValue(UnifiedAutomation.UaServer.AggregateCalculator.TimeSlice)">
            <summary>
            Return a value indicating there is no data in the time slice.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AggregateCalculator.GetTimestamp(UnifiedAutomation.UaServer.AggregateCalculator.TimeSlice)">
            <summary>
            Returns the timestamp to use for the slice value.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AggregateCalculator.GetNoDataValue(System.DateTime)">
            <summary>
            Return a value indicating there is no data in the time slice.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AggregateCalculator.Interpolate(System.DateTime,UnifiedAutomation.UaServer.AggregateCalculator.TimeSlice)">
            <summary>
            Interpolates a value at the timestamp.
            </summary>
            <param name="timestamp">The timestamp.</param>
            <param name="reference">The timeslice that contains the timestamp.</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AggregateCalculator.SteppedInterpolate(System.DateTime,UnifiedAutomation.UaBase.DataValue)">
            <summary>
            Calculate the value at the timestamp using slopped interpolation.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AggregateCalculator.SlopedInterpolate(System.DateTime,UnifiedAutomation.UaBase.DataValue,UnifiedAutomation.UaBase.DataValue)">
            <summary>
            Calculate the value at the timestamp using slopped interpolation.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AggregateCalculator.CastToDouble(UnifiedAutomation.UaBase.DataValue)">
            <summary>
            Converts the value to a double for use in calculations (throws exceptions if conversion fails).
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AggregateCalculator.CastToOriginalType(System.Double,UnifiedAutomation.UaBase.DataValue)">
            <summary>
            Converts the value back to its original type (throws exceptions if conversion fails).
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AggregateCalculator.GetSimpleBound(System.DateTime,UnifiedAutomation.UaServer.AggregateCalculator.TimeSlice)">
            <summary>
            Returns the simple bound for the timestamp.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AggregateCalculator.GetValuesWithSimpleBounds(UnifiedAutomation.UaServer.AggregateCalculator.TimeSlice)">
            <summary>
            Returns the values in the list with simple bounds.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AggregateCalculator.GetValues(UnifiedAutomation.UaServer.AggregateCalculator.TimeSlice)">
            <summary>
            Returns the values between the start time and the end time for the slice.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AggregateCalculator.GetValuesWithInterpolatedBounds(UnifiedAutomation.UaServer.AggregateCalculator.TimeSlice)">
            <summary>
            Returns the values in the list with interpolated bounds.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AggregateCalculator.SubRegion">
            <summary>
            A subset of a slice bounded by two raw data points.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AggregateCalculator.SubRegion.StartValue">
            <summary>
            The value at the start of the region.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AggregateCalculator.SubRegion.EndValue">
            <summary>
            The value at the end of the region.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.AggregateCalculator.SubRegion.StartTime">
            <summary>
            The timestamp at the start of the region.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AggregateCalculator.SubRegion.Duration">
            <summary>
            The length of the region.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.AggregateCalculator.SubRegion.StatusCode">
            <summary>
            The status for the region.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.AggregateCalculator.SubRegion.DataPoint">
            <summary>
            The data point at the start of the region.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AggregateCalculator.GetRegionsInValueSet(System.Collections.Generic.List{UnifiedAutomation.UaBase.DataValue},System.Boolean,System.Boolean)">
            <summary>
            Returns the values in the list with simple bounds.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AggregateCalculator.GetValueBasedStatusCode(UnifiedAutomation.UaServer.AggregateCalculator.TimeSlice,System.Collections.Generic.List{UnifiedAutomation.UaBase.DataValue},UnifiedAutomation.UaBase.StatusCode)">
            <summary>
            Calculates the value based status code for the slice
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AggregateCalculator.GetTimeBasedStatusCode(UnifiedAutomation.UaServer.AggregateCalculator.TimeSlice,System.Collections.Generic.List{UnifiedAutomation.UaBase.DataValue},UnifiedAutomation.UaBase.StatusCode)">
            <summary>
            Calculates the status code for the slice
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AggregateCalculator.GetTimeBasedStatusCode(System.Collections.Generic.List{UnifiedAutomation.UaServer.AggregateCalculator.SubRegion},UnifiedAutomation.UaBase.StatusCode)">
            <summary>
            Calculates the status code for the slice
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AggregateManager">
            <summary>
            An object that manages aggregate factories supported by the server.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AggregateManager.#ctor(UnifiedAutomation.UaServer.ServerManager)">
            <summary>
            Initilizes the manager.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AggregateManager.Dispose">
            <summary>
            Frees any unmanaged resources.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AggregateManager.Dispose(System.Boolean)">
            <summary>
            An overrideable version of the Dispose.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AggregateManager.IsSupported(UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Checks if the aggregate is supported by the server.
            </summary>
            <param name="aggregateId">The id of the aggregate function.</param>
            <returns>True if the aggregate is supported.</returns>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AggregateManager.MinimumProcessingInterval">
            <summary>
            The minimum processing interval for any aggregate calculation.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AggregateManager.GetDefaultConfiguration(UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Returns the default configuration for the specified variable id.
            </summary>
            <param name="variableId">The id of history data node.</param>
            <returns>The configuration.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AggregateManager.SetDefaultConfiguration(UnifiedAutomation.UaBase.AggregateConfiguration)">
            <summary>
            Sets the default aggregate configuration.
            </summary>
            <param name="configuration">The default aggregate configuration.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AggregateManager.CreateCalculator(UnifiedAutomation.UaBase.NodeId,System.DateTime,System.DateTime,System.Double,System.Boolean,UnifiedAutomation.UaBase.AggregateConfiguration)">
            <summary>
            Creates a new aggregate calculator.
            </summary>
            <param name="aggregateId">The id of the aggregate function.</param>
            <param name="startTime">When to start processing.</param>
            <param name="endTime">When to stop processing.</param>
            <param name="processingInterval">The processing interval.</param>
            <param name="stepped">Whether stepped interpolation should be used.</param>
            <param name="configuration">The configuaration to use.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AggregateManager.RegisterFactory(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.AggregatorFactory)">
            <summary>
            Registers an aggregate factory.
            </summary>
            <param name="aggregateId">The id of the aggregate function.</param>
            <param name="factory">The factory used to create calculators.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AggregateManager.UnregisterFactory(UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Unregisters an aggregate factory.
            </summary>
            <param name="aggregateId">The id of the aggregate function.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AggregatorFactory">
            <summary>
            Creates a new instance of an aggregate factory.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.Aggregators">
            <summary>
            The set of built-in aggregate factories.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.Aggregators.FactoryMapping">
            <summary>
            Stores the mapping for a aggregate id to the calculator.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.Aggregators.s_Mappings">
            <summary>
            Mapping for all of the standard aggregates.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Aggregators.GetNameForStandardAggregate(UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Returns the name for a standard aggregates.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Aggregators.GetIdForStandardAggregate(UnifiedAutomation.UaBase.QualifiedName)">
            <summary>
            Returns the id for a standard aggregates.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Aggregators.CreateStandardCalculator(UnifiedAutomation.UaBase.NodeId,System.DateTime,System.DateTime,System.Double,System.Boolean,UnifiedAutomation.UaBase.AggregateConfiguration)">
            <summary>
            Creates a calculator for one of the standard aggregates.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AverageAggregateCalculator">
            <summary>
            Calculates the value of an aggregate.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AverageAggregateCalculator.#ctor(UnifiedAutomation.UaBase.NodeId,System.DateTime,System.DateTime,System.Double,System.Boolean,UnifiedAutomation.UaBase.AggregateConfiguration)">
            <summary>
            Initializes the aggregate calculator.
            </summary>
            <param name="aggregateId">The aggregate function to apply.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <param name="processingInterval">The processing interval.</param>
            <param name="stepped">Whether to use stepped interpolation.</param>
            <param name="configuration">The aggregate configuration.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AverageAggregateCalculator.ComputeValue(UnifiedAutomation.UaServer.AggregateCalculator.TimeSlice)">
            <summary>
            Computes the value for the timeslice.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AverageAggregateCalculator.ComputeAverage(UnifiedAutomation.UaServer.AggregateCalculator.TimeSlice)">
            <summary>
            Calculates the RegSlope, RegConst and RegStdDev aggregates for the timeslice.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AverageAggregateCalculator.ComputeTimeAverage(UnifiedAutomation.UaServer.AggregateCalculator.TimeSlice,System.Boolean,System.Int32)">
            <summary>
            Calculates the StdDev, Variance, StdDev2 and Variance2 aggregates for the timeslice.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.CountAggregateCalculator">
            <summary>
            Calculates the value of an aggregate.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.CountAggregateCalculator.#ctor(UnifiedAutomation.UaBase.NodeId,System.DateTime,System.DateTime,System.Double,System.Boolean,UnifiedAutomation.UaBase.AggregateConfiguration)">
            <summary>
            Initializes the aggregate calculator.
            </summary>
            <param name="aggregateId">The aggregate function to apply.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <param name="processingInterval">The processing interval.</param>
            <param name="stepped">Whether to use stepped interpolation.</param>
            <param name="configuration">The aggregate configuration.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.CountAggregateCalculator.ComputeValue(UnifiedAutomation.UaServer.AggregateCalculator.TimeSlice)">
            <summary>
            Computes the value for the timeslice.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.CountAggregateCalculator.ComputeCount(UnifiedAutomation.UaServer.AggregateCalculator.TimeSlice)">
            <summary>
            Calculates the Count aggregate for the timeslice.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.CountAggregateCalculator.ComputeAnnotationCount(UnifiedAutomation.UaServer.AggregateCalculator.TimeSlice)">
            <summary>
            Calculates the AnnotationCount aggregate for the timeslice.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.CountAggregateCalculator.ComputeDurationInState(UnifiedAutomation.UaServer.AggregateCalculator.TimeSlice,System.Boolean)">
            <summary>
            Calculates the DurationInStateZero and DurationInStateNonZero aggregates for the timeslice.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.CountAggregateCalculator.ComputeNumberOfTransitions(UnifiedAutomation.UaServer.AggregateCalculator.TimeSlice)">
            <summary>
            Calculates the Count aggregate for the timeslice.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.IAggregateCalculator">
            <summary>
            An interface that captures the original active API of the AggregateCalculator class
            required to integrate with the subscription code.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.IAggregateCalculator.AggregateId">
            <summary>
            The aggregate function applied by the calculator.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IAggregateCalculator.QueueRawValue(UnifiedAutomation.UaBase.DataValue)">
            <summary>
            Pushes the next raw value into the stream.
            </summary>
            <param name="value">The data value to append to the stream.</param>
            <returns>True if successful, false if the source timestamp has been superceeded by values already in the stream.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IAggregateCalculator.GetProcessedValue(System.Boolean)">
            <summary>
            Returns the next processed value.
            </summary>
            <param name="returnPartial">If true a partial interval should be processed.</param>
            <returns>The processed value. Null if nothing available and returnPartial is false.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IAggregateCalculator.HasEndTimePassed(System.DateTime)">
            <summary>
            Returns true if the specified time is later than the end of the current interval.
            </summary>
            <remarks>Return true if time flows forward and the time is later than the end time.</remarks>
        </member>
        <member name="T:UnifiedAutomation.UaServer.MinMaxAggregateCalculator">
            <summary>
            Calculates the value of an aggregate.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.MinMaxAggregateCalculator.#ctor(UnifiedAutomation.UaBase.NodeId,System.DateTime,System.DateTime,System.Double,System.Boolean,UnifiedAutomation.UaBase.AggregateConfiguration)">
            <summary>
            Initializes the aggregate calculator.
            </summary>
            <param name="aggregateId">The aggregate function to apply.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <param name="processingInterval">The processing interval.</param>
            <param name="stepped">Whether to use stepped interpolation.</param>
            <param name="configuration">The aggregate configuration.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.MinMaxAggregateCalculator.ComputeValue(UnifiedAutomation.UaServer.AggregateCalculator.TimeSlice)">
            <summary>
            Computes the value for the timeslice.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.MinMaxAggregateCalculator.ComputeMinMax(UnifiedAutomation.UaServer.AggregateCalculator.TimeSlice,System.Int32,System.Boolean)">
            <summary>
            Calculate the Minimum, Maximum, MinimumActualTime and MaximumActualTime aggregates for the timeslice.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.MinMaxAggregateCalculator.ComputeMinMax2(UnifiedAutomation.UaServer.AggregateCalculator.TimeSlice,System.Int32,System.Boolean)">
            <summary>
            Calculate the Minimum2, Maximum2, MinimumActualTime2, MaximumActualTime2 and Range2 aggregates for the timeslice.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ServerAggregateFilter">
            <summary>
            A aggregate filter with additional state information.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerAggregateFilter.Stepped">
            <summary>
            Whether the variable requires stepped interpolation.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.StartEndAggregateCalculator">
            <summary>
            Calculates the value of an aggregate.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.StartEndAggregateCalculator.#ctor(UnifiedAutomation.UaBase.NodeId,System.DateTime,System.DateTime,System.Double,System.Boolean,UnifiedAutomation.UaBase.AggregateConfiguration)">
            <summary>
            Initializes the aggregate calculator.
            </summary>
            <param name="aggregateId">The aggregate function to apply.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <param name="processingInterval">The processing interval.</param>
            <param name="stepped">Whether to use stepped interpolation.</param>
            <param name="configuration">The aggregate configuration.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.StartEndAggregateCalculator.ComputeValue(UnifiedAutomation.UaServer.AggregateCalculator.TimeSlice)">
            <summary>
            Computes the value for the timeslice.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.StartEndAggregateCalculator.ComputeStartEnd(UnifiedAutomation.UaServer.AggregateCalculator.TimeSlice,System.Boolean)">
            <summary>
            Calculate the Start and End aggregates for the timeslice.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.StartEndAggregateCalculator.ComputeDelta(UnifiedAutomation.UaServer.AggregateCalculator.TimeSlice)">
            <summary>
            Calculates the Delta aggregate for the timeslice.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.StartEndAggregateCalculator.ComputeStartEnd2(UnifiedAutomation.UaServer.AggregateCalculator.TimeSlice,System.Boolean)">
            <summary>
            Calculate the Start2 and End2 aggregates for the timeslice.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.StartEndAggregateCalculator.ComputeDelta2(UnifiedAutomation.UaServer.AggregateCalculator.TimeSlice)">
            <summary>
            Calculates the Delta2 aggregate for the timeslice.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.StatusAggregateCalculator">
            <summary>
            Calculates the value of an aggregate.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.StatusAggregateCalculator.#ctor(UnifiedAutomation.UaBase.NodeId,System.DateTime,System.DateTime,System.Double,System.Boolean,UnifiedAutomation.UaBase.AggregateConfiguration)">
            <summary>
            Initializes the aggregate calculator.
            </summary>
            <param name="aggregateId">The aggregate function to apply.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <param name="processingInterval">The processing interval.</param>
            <param name="stepped">Whether to use stepped interpolation.</param>
            <param name="configuration">The aggregate configuration.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.StatusAggregateCalculator.ComputeValue(UnifiedAutomation.UaServer.AggregateCalculator.TimeSlice)">
            <summary>
            Computes the value for the timeslice.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.StatusAggregateCalculator.ComputeDurationGoodBad(UnifiedAutomation.UaServer.AggregateCalculator.TimeSlice,System.Boolean,System.Boolean)">
            <summary>
            Calculates the DurationGood and DurationBad aggregates for the timeslice.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.StatusAggregateCalculator.ComputeWorstQuality(UnifiedAutomation.UaServer.AggregateCalculator.TimeSlice,System.Boolean)">
            <summary>
            Calculates the DurationGood and DurationBad aggregates for the timeslice.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.StdDevAggregateCalculator">
            <summary>
            Calculates the value of an aggregate.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.StdDevAggregateCalculator.#ctor(UnifiedAutomation.UaBase.NodeId,System.DateTime,System.DateTime,System.Double,System.Boolean,UnifiedAutomation.UaBase.AggregateConfiguration)">
            <summary>
            Initializes the aggregate calculator.
            </summary>
            <param name="aggregateId">The aggregate function to apply.</param>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <param name="processingInterval">The processing interval.</param>
            <param name="stepped">Whether to use stepped interpolation.</param>
            <param name="configuration">The aggregate configuration.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.StdDevAggregateCalculator.ComputeValue(UnifiedAutomation.UaServer.AggregateCalculator.TimeSlice)">
            <summary>
            Computes the value for the timeslice.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.StdDevAggregateCalculator.ComputeRegression(UnifiedAutomation.UaServer.AggregateCalculator.TimeSlice,System.Int32)">
            <summary>
            Calculates the RegSlope, RegConst and RegStdDev aggregates for the timeslice.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.StdDevAggregateCalculator.ComputeStdDev(UnifiedAutomation.UaServer.AggregateCalculator.TimeSlice,System.Boolean,System.Int32)">
            <summary>
            Calculates the StdDev, Variance, StdDev2 and Variance2 aggregates for the timeslice.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ContinuationPoint">
            <summary>
            The continuation point for a browse operation.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ContinuationPoint.#ctor">
            <summary>
            Initializes the object with default values.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ContinuationPoint.Dispose">
            <summary>
            Frees any unmanaged resources.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ContinuationPoint.Dispose(System.Boolean)">
            <summary>
            An overrideable version of the Dispose.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ContinuationPoint.Id">
            <summary>
            A unique identifier for the continuation point.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ContinuationPoint.NodeManager">
            <summary>
            Gets or sets the node manager.
            </summary>
            <value>
            The node manager.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ContinuationPoint.NodeToBrowse">
            <summary>
            Gets or sets the browse handle.
            </summary>
            <value>
            The browse handle.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ContinuationPoint.ViewToBrowse">
            <summary>
            Gets or sets the view handle.
            </summary>
            <value>
            The view handle.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ContinuationPoint.Settings">
            <summary>
            Gets or sets the settings.
            </summary>
            <value>
            The settings.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ContinuationPoint.MaxReferencesPerNode">
            <summary>
            Gets or sets the max references per node.
            </summary>
            <value>
            The max references per node.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ContinuationPoint.StartingReferenceCount">
            <summary>
            Gets or sets the starting reference count.
            </summary>
            <value>
            The starting reference count.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ContinuationPoint.TargetName">
            <summary>
            Gets or sets the target name (specified when translating a browse path).
            </summary>
            <value>
            The target name.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ContinuationPoint.Stage">
            <summary>
            Gets or sets the stage (used by the entity that created the continuation point).
            </summary>
            <value>
            The stage.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ContinuationPoint.UserData">
            <summary>
            Node manager specific data that is necessary to continue the browse.
            </summary>
            <remarks>
            A node manager needs to hold onto unmanaged resources to continue the browse.
            If this is the case then the object stored here must implement the Idispose
            interface. This will ensure the unmanaged resources are freed if the continuation
            point expires.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ContinuationPoint.UnprocessedReferences">
            <summary>
            Gets or sets any unprocessed references.
            </summary>
            <value>
            The unprocessed references.
            </value>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ContinuationPoint.IsReferenceSelected(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,System.Boolean)">
            <summary>
            Determines whether [is reference selected] [the specified candidate reference type id].
            </summary>
            <param name="context">The request context.</param>
            <param name="referenceTypeId">The reference type id.</param>
            <param name="isInverse">Set to <c>true</c> if the reference is an inverse reference.</param>
            <returns>
              <c>true</c> if [is reference selected] [the specified candidate reference type id]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ContinuationPoint.IsNodeSelected(UnifiedAutomation.UaBase.QualifiedName,UnifiedAutomation.UaBase.NodeClass)">
            <summary>
            Checks if the current node meets the filter criteria for the browse operation.
            </summary>
            <param name="browseName">The browse name of the node.</param>
            <param name="nodeClass">The node class of the node.</param>
            <returns>
            True if the reference should be included in the result set.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ContinuationPoint.CheckMaxReferences``1(System.Collections.Generic.IList{UnifiedAutomation.UaBase.ReferenceDescription})">
            <summary>
            Checks the max references per node and returns a new continuation point if reached.
            </summary>
            <typeparam name="T">The type of ContinuationPoint to create.</typeparam>
            <returns>The new continuation point if browsing must stop. null otherwise.</returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.QueryContinuationPoint">
            <summary>
            A continuation point for a query operation.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.QueryContinuationPoint.#ctor">
            <summary>
            Initializes the object with default values.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.QueryContinuationPoint.Dispose">
            <summary>
            Frees any unmanaged resources.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.QueryContinuationPoint.Dispose(System.Boolean)">
            <summary>
            An overrideable version of the Dispose.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.QueryContinuationPoint.Id">
            <summary>
            A unique identifier for the continuation point.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.QueryContinuationPoint.QueryManager">
            <summary>
            Gets the query manager.
            </summary>
            <value>
            The query manager.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.QueryContinuationPoint.QueryHandle">
            <summary>
            Gets or sets the query handle.
            </summary>
            <value>
            The query handle.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.QueryContinuationPoint.ViewToQuery">
            <summary>
            Gets or sets the view handle.
            </summary>
            <value>
            The view handle.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.QueryContinuationPoint.NodeTypes">
            <summary>
            Gets or sets the node type descriptions for the query.
            </summary>
            <value>
            The node type descriptions for the query.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.QueryContinuationPoint.Filter">
            <summary>
            Gets or sets the content filter.
            </summary>
            <value>
            The content filter.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.QueryContinuationPoint.MaxDataSetsToReturn">
            <summary>
            Gets or sets the maximum datasets to return.
            </summary>
            <value>
            The maximum datasets to return..
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.QueryContinuationPoint.MaxReferencesToReturn">
            <summary>
            Gets or sets maximum references to return.
            </summary>
            <value>
            The starting reference count.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.QueryContinuationPoint.Stage">
            <summary>
            Gets or sets the stage (used by the entity that created the continuation point).
            </summary>
            <value>
            The stage.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.QueryContinuationPoint.UserData">
            <summary>
            Node manager specific data that is necessary to continue the query.
            </summary>
            <remarks>
            A node manager needs to hold onto unmanaged resources to continue the query.
            If this is the case then the object stored here must implement the IDispose
            interface. This will ensure the unmanaged resources are freed if the continuation
            point expires.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.QueryContinuationPoint.UnprocessedDataSets">
            <summary>
            Gets or sets any unprocessed datasets.
            </summary>
            <value>
            The unprocessed datasets.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.CertificateGroupModel">
             <summary>
             A type used for objects which represent certificate groups in the address
             space.
             </summary>
             <remarks>
             A certificate group is a context that contains a trust list and one or more
             certificate s that can be assigned to an application. This type exists to allow
             an application which has multiple trust lists and/or application certificate s
             to express them in its AddressSpace.
            
             The TrustList object is the trust list associated with the certificate group.
             </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CertificateGroupModel.Group">
            <summary>
            Gets or sets the group.
            </summary>
            <value>
            The group.
            </value>
        </member>
        <member name="M:UnifiedAutomation.UaServer.CertificateGroupModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.CertificateGroupModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.CertificateGroupModel.#ctor(UnifiedAutomation.UaServer.CertificateGroupModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.CertificateGroupModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CertificateGroupModel.CertificateTypes">
            <summary>
            Specifies the NodeIds of the CertificateTypes which may be assigned to
            applications which belong to the certificate group.
            </summary>
            <remarks>
            For example, a certificate group with the NodeId of
            <see cref="T:UnifiedAutomation.UaServer.RsaMinApplicationCertificateModel"/> and
            the NodeId RsaSha256ApplicationCertificate specified allows an application to
            have one ApplicationInstance certificate for each type. Abstract base types may
            be used in this value and indicate that any subtype is allowed. If this list is
            empty, the certificate group does not allow certificate s to be assigned to
            applications (i.e. the Certificate Group exists to allow the associated trust
            list to be read or updated). All CertificateTypes for a given certificate group
            shall be subtypes of a single common type which shall be either
            <see cref="T:UnifiedAutomation.UaServer.ApplicationCertificateModel"/> or
            <see cref="T:UnifiedAutomation.UaServer.HttpsCertificateModel"/>.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CertificateGroupModel.TrustList">
            <summary>
            The trust list associated with the certificate group.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ConditionModel">
             <summary>
             The ConditionType defines all general characteristics of a Condition. All other
             ConditionTypes derive from it.
             </summary>
             <remarks>
             The FALSE state of the EnabledState shall not be extended with a substate
             machine. The ConditionType inherits all Properties of the BaseEventType.
            
             SourceNode identifies the ConditionSource. If the ConditionSource is not a Node
             in the AddressSpace, the NodeId is set to null. The SourceNode is the Node
             which the condition is associated with, it may be the same as the InputNode for
             an alarm, but it may be a separate node. For example, a motor which is a
             variable with a value that is an RPM may be the ConditionSource for Conditions
             that are related to the motor, as well as a temperature sensor associated with
             the motor. In the former, the InputNode for the High RPM alarm is the value of
             the Motor RPM, while in the later the InputNode of the High Alarm would be the
             value of the temperature sensor that is associated with the motor.
            
             Events are only generated for Conditions that have their Retain field set to
             true.
            
             The NodeId of the Condition instance is used as ConditionId. It is not
             explicitly modelled as a component of the ConditionType. However, it can be
             requested with the following SimpleAttributeOperand in the SelectClause of the
             EventFilter:
            
             Name         | Type          | Description
             -------------|---------------|----------------------------------
             typeId       | NodeId        | NodeId of the ConditionType Node
             browsePath[] | QualifiedName | empty
             attributeId  | IntegerId     | Id of the NodeId Attribute
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ConditionModel.Enable(UnifiedAutomation.UaServer.RequestContext)">
             <summary>
             Changes a Condition instance to the Disabled state.
             </summary>
             <remarks>
             Normally, the MethodId passed to the Call Service is found by browsing the
             Condition instance in the AddressSpace. However, some Servers do not expose
             Condition instances in the AddressSpace. Therefore all Servers shall allow
             Clients to call the Disable Method by specifying ConditionId as the ObjectId
             and the well known NodeId of the Method declaration on the ConditionType as the
             MethodId.
            
             Method result codes:
            
             ResultCode                    | Description
             ------------------------------|----------------------------------------------
             Bad_ConditionAlreadyDisabled  | The addressed Condition is already disabled.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ConditionModel.Disable(UnifiedAutomation.UaServer.RequestContext)">
             <summary>
             Change a Condition instance to the enabled state.
             </summary>
             <remarks>
             Normally, the MethodId passed to the Call Service is found by browsing the
             Condition instance in the AddressSpace. However, some Servers do not expose
             Condition instances in the AddressSpace. Therefore all Servers shall allow
             Clients to call the Enable Method by specifying ConditionId as the ObjectId and
             the well known NodeId of the Method declaration on the ConditionType as the
             MethodId.
            
             Method result codes:
            
             ResultCode                   | Description
             -----------------------------|---------------------------------------------
             Bad_ConditionAlreadyEnabled  | The addressed Condition is already enabled.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ConditionModel.AddComment(UnifiedAutomation.UaServer.RequestContext,System.Byte[],UnifiedAutomation.UaBase.LocalizedText)">
             <summary>
             Applies a comment to a specific state of a Condition instance.
             </summary>
             <remarks>
             Normally, the MethodId passed to the Call Service is found by browsing the
             Condition instance in the AddressSpace. However, some Servers do not expose
             Condition instances in the AddressSpace. Therefore all Servers shall allow
             Clients to call the AddComment Method by specifying ConditionId as the ObjectId
             and the well known NodeId of the Method declaration on the ConditionType as the
             MethodId. The Method cannot be called on the ConditionType Node.
            
             Method result codes:
            
             ResultCode          | Description
             --------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
             Bad_MethodInvalid   | The method id does not refer to a method for the specified object. The addressed Condition does not support adding comments.
             Bad_EventIdUnknown  | The specified EventId is not known to the Server.
             Bad_NodeIdUnknown   | The node id refers to a node that does not exist in the server address space. Used to indicate that the specified Condition is not valid or that the Method was called on the ConditionType Node.
             </remarks>
             <param name="context"></param>
             <param name="eventId">The identifier for the event to comment.</param>
             <param name="comment">The comment to add to the condition.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ConditionModel.UpdateEnabledEffectiveDisplayName">
            <summary>
            Updates the effect display name for the enabled state.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ConditionModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ConditionModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ConditionModel.#ctor(UnifiedAutomation.UaServer.ConditionModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ConditionModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ConditionModel.BranchId">
             <remarks>
             BranchId is Null for all Event Notifications that relate to the current state
             of the Condition instance. If BranchId is not Null it identifies a previous
             state of this Condition instance that still needs attention by an Operator. If
             the current ConditionBranch is transformed into a previous ConditionBranch then
             the Server needs to assign a non-null BranchId. An initial Event for the branch
             will be generated with the values of the ConditionBranch and the new BranchId.
             The ConditionBranch can be updated many times before it is no longer needed.
             When the ConditionBranch no longer requires Operator input the final Event will
             have Retain set to FALSE. The retain bit on the current Event is TRUE, as long
             as any ConditionBranches require Operator input.<!-- See Clause 4.4 for more
             information about the need for creating and maintaining previous
             ConditionBranches and Annex B.1 for an example using branches. --> The BranchId
             DataType is NodeId although the Server is not required to have
             ConditionBranches in the Address Space. The use of a NodeId allows the Server
             to use simple numeric identifiers, strings or arrays of bytes.
            
             \todo Text of Clause 4.4 is short: Some systems require that previous states of
             a Condition are preserved for some time. A common use case is the
             acknowledgement process. In certain environments it is required to acknowledge
             both the transition into Active state and the transition into an inactive
             state. Systems with strict safety rules sometimes require that every transition
             into Active state has to be acknowledged. In situations where state changes
             occur in short succession there can be multiple unacknowledged states and the
             Server has to maintain ConditionBranches for all previous unacknowledged
             states. These branches will be deleted after they have been acknowledged or if
             they reached their final state. Multiple ConditionBranches can also be used for
             other use cases where snapshots of previous states of a Condition require
             additional actions.
            
             \todo"Annex B.1 for an example using branches"
             </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ConditionModel.ClientUserId">
            <summary>
            Is related to the Comment field and contains the identity of the user who
            inserted the most recent Comment.
            </summary>
            <remarks>
            The logic to obtain the ClientUserId is defined in Part 5 of the OPC UA
            Specification.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ConditionModel.Comment">
            <summary>
            Contains the last comment provided for a certain state (ConditionBranch).
            </summary>
            <remarks>
            It may have been provided by an AddComment method, some other method or in some
            other manner. The initial value of this Variable is null, unless it is provided
            in some other manner. If a method provides as an option the ability to set a
            Comment, then the value of this Variable is reset to null if an optional
            comment is not provided.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ConditionModel.ConditionClassId">
            <summary>
            Specifies in which domain this Condition is used.
            </summary>
            <remarks>
            It is the NodeId of the corresponding ConditionClassType. When using this
            Property for filtering, Clients have to specify all individual
            ConditionClassType NodeIds. The OfType operator cannot be applied.
            BaseConditionClassType is used as class whenever a Condition cannot be assigned
            to a more concrete class.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ConditionModel.ConditionClassName">
            <remarks>
            ConditionClassName provides the display name of the ConditionClassType.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ConditionModel.ConditionName">
            <summary>
            Identifies the Condition instance that the Event originated from.
            </summary>
            <remarks>
            It can be used together with the SourceName in a user display to distinguish
            between different Condition instances. If a ConditionSource has only one
            instance of a ConditionType, and the Server has no instance name, the Server
            shall supply the ConditionType browse name.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ConditionModel.ConditionSubClassId">
            <summary>
            Gets or sets the ConditionSubClassId
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ConditionModel.ConditionSubClassName">
            <summary>
            Gets or sets the ConditionSubClassName
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ConditionModel.EnabledState">
             <summary>
             EnabledState indicates whether the Condition is enabled.
             </summary>
             <remarks>
             EnabledState/Id is TRUE if enabled, FALSE otherwise.
             EnabledState/TransitionTime defines when the EnabledState last changed.
             Recommended state names for LocaleIds are listed in the following table.
            
             LocaleId | FALSE State Name | TRUE State Name
             ---------|------------------|-----------------
             en       | Disabled         | Enabled
             de       | Ausgeschaltet    | Eingeschaltet
             fr       | Hors Service     | En Service
            
             A Condition’s EnabledState effects the generation of Event Notifications and as
             such results in the following specific behaviour:
            
             - When the Condition instance enters the Disabled state, the Retain Property of
               this Condition shall be set to FALSE by the Server to indicate to the Client
               that the Condition instance is currently not of interest to Clients.
             - When the Condition instance enters the enabled state, the Condition shall be
               evaluated and all of its Properties updated to reflect the current values. If
               this evaluation causes the Retain Property to transition to TRUE for any
               ConditionBranch, then an Event Notification shall be generated for that
               ConditionBranch.
             - The Server may choose to continue to test for a Condition instance while it
               is Disabled. However, no Event Notifications will be generated while the
               Condition instance is disabled.
             - For any Condition that exists in the AddressSpace the Attributes and the
               following Variables will continue to have valid values even in the Disabled
               state: EventId, Event Type, Source Node, Source Name, Time, and EnabledState.
               Other properties may no longer provide current valid values. All Variables
               that are no longer provided shall return a status of Bad_ConditionDisabled.
               The Event that reports the Disabled state should report the properties as
               NULL or with a status of Bad_ConditionDisabled.
            
             When enabled, changes to the following components shall cause a ConditionType
             Event Notification:
            
             - Quality
             - Severity (inherited from BaseEventType)
             - Comment
            
             This may not be the complete list. Subtypes may define additional Variables
             that trigger Event Notifications. In general changes to Variables of the types
             TwoStateVariableType or ConditionVariableType trigger Event Notifications.
             </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ConditionModel.LastSeverity">
            <summary>
            Provides the previous severity of the ConditionBranch.
            </summary>
            <remarks>
            Initially this Variable contains a zero value; it will return a value only
            after a severity change. The new severity is supplied via the Severity Property
            which is inherited from the BaseEventType.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ConditionModel.Quality">
            <summary>
            Reveals the status of process values or other resources that this Condition
            instance is based upon.
            </summary>
            <remarks>
            If, for example, a process value is “Uncertain”, the associated “LevelAlarm”
            Condition is also questionable. Values for the Quality can be any of the OPC
            StatusCodes defined in Part 8 of the OPC UA Specification as well as Good,
            Uncertain and Bad as defined in Part 4 of the OPC UA Specification. These
            StatusCodes are similar to but slightly more generic than the description of
            data quality in the various field bus Specifications. It is the responsibility
            of the Server to map internal status information to these codes. A Server which
            supports no quality information shall return Good. This quality can also
            reflect the communication status associated with the system that this value or
            resource is based on and from which this Alarm was received. For communication
            errors to the underlying system, especially those that result in some
            unavailable Event fields, the quality shall be Bad_NoCommunication error.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ConditionModel.Retain">
            <remarks>
            Retain when TRUE describes a Condition (or ConditionBranch) as being in a state
            that is interesting for a Client wishing to synchronize its state with the
            Server’s state. The logic to determine how this flag is set is Server specific.
            Typically all Active Alarms would have the Retain flag set; however, it is also
            possible for inactive Alarms to have their Retain flag set to TRUE. In normal
            processing, when a Client receives an Event with the Retain flag set to FALSE,
            the Client should consider this as a ConditionBranch that is no longer of
            interest, in the case of a “current Alarm display” the ConditionBranch would be
            removed from the display.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ConditionModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ConditionModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ConditionModel.GetMethodDispatcher(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Gets the method dispatcher.
            </summary>
            <param name="context">The context.</param>
            <param name="objectId">The object id.</param>
            <param name="methodId">The method id.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ConditionModel.DispatchMethod(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MethodHandle,System.Collections.Generic.IList{UnifiedAutomation.UaBase.Variant},System.Collections.Generic.List{UnifiedAutomation.UaBase.StatusCode},System.Collections.Generic.List{UnifiedAutomation.UaBase.Variant})">
            <summary>
            Dispatches the method.
            </summary>
            <param name="context">The context.</param>
            <param name="methodHandle">The method handle.</param>
            <param name="inputArguments">The input arguments.</param>
            <param name="inputArgumentResults">The input argument results.</param>
            <param name="outputArguments">The output arguments.</param>
            <returns></returns>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ConditionModel.ConditionMethods">
            <summary>
            Gets or sets the Condition methods.
            </summary>
            <value>
            The Condition methods.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AcknowledgeableConditionModel">
             <summary>
             Extends the ConditionType by defining acknowledgement characteristics. It is an
             abstract type.
             </summary>
             <remarks>
             The AcknowledgeableConditionType inherits all Properties of the ConditionType.
            
             AcknowledgeableConditions expose states to indicate whether a Condition has to
             be acknowledged or confirmed.
            
             The Confirmed Acknowledge model is typically used to differentiate between
             acknowledging the presence of a Condition and having done something to address
             the Condition. For example an Operator receiving a motor high temperature
             Notification calls the Acknowledge method to inform the Server that the high
             temperature has been observed. The Operator then takes some action such as
             lowering the load on the motor in order to reduce the temperature. The Operator
             then calls the Confirm method to inform the Server that a corrective action has
             been taken.
            
             AckedState when FALSE indicates that the Condition instance requires
             acknowledgement for the reported Condition state. When the Condition instance
             is acknowledged the AckedState is set to TRUE. ConfirmedState indicates whether
             it requires confirmation. The two states are substates of the TRUE
             EnabledState. The EventId used in the Event Notification is considered the
             identifier of this state and has to be used when calling the methods for
             acknowledgement or confirmation.
            
             A Server may require that previous states be acknowledged. If the
             acknowledgement of a previous state is still open and a new state also requires
             acknowledgement, the Server shall create a branch of the Condition instance. In
             situations where state changes occur in short succession there can be multiple
             unacknowledged states and the Server has to maintain ConditionBranches for all
             previous unacknowledged states. These branches will be deleted after they have
             been acknowledged or if they reached their final state. Clients are expected to
             keep track of all ConditionBranches where AckedState is FALSE to allow
             acknowledgement of those. See also
             <see cref="T:UnifiedAutomation.UaServer.ConditionModel"/> for more information
             about ConditionBranches and the examples in Annex B.1 of Part 9 of the OPC UA
             Specification. The handling of the AckedState and branches also applies to the
             ConfirmState.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AcknowledgeableConditionModel.Acknowledge(UnifiedAutomation.UaServer.RequestContext,System.Byte[],UnifiedAutomation.UaBase.LocalizedText)">
             <summary>
             Acknowledges an Event Notification for a Condition instance state where
             AckedState was set to FALSE.
             </summary>
             <remarks>
             Normally, the MethodId passed to the Call Service is found by browsing the
             Condition instance in the AddressSpace. However, some Servers do not expose
             Condition instances in the AddressSpace. Therefore all Servers shall allow
             Clients to call the Acknowledge Method by specifying ConditionId as the
             ObjectId and the well known NodeId of the Method declaration on the
             AcknowledgeableConditionType as the MethodId. The Method cannot be called on
             the AcknowledgeableConditionType Node.
            
             ResultCode                       | Description
             ---------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
             Bad_ConditionBranchAlreadyAcked  | The EventId does not refer to a state that needs acknowledgement.
             Bad_EventIdUnknown               | The specified EventId is not known to the Server.
             Bad_NodeIdUnknown                | The node id refers to a node that does not exist in the server address space. Used to indicate that the specified Condition is not valid or that the Method was called on the ConditionType Node.
             </remarks>
             <param name="context"></param>
             <param name="eventId">
             EventId identifying a particular Event Notification.
             Only Event Notifications where AckedState/Id was FALSE can be acknowledged.
             </param>
             <param name="comment">
             A localized text to be applied to the Condition.
             </param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AcknowledgeableConditionModel.Confirm(UnifiedAutomation.UaServer.RequestContext,System.Byte[],UnifiedAutomation.UaBase.LocalizedText)">
             <summary>
             Confirms an Event Notification for a Condition instance state where
             ConfirmedState was set to FALSE.
             </summary>
             <remarks>
             Normally, the MethodId passed to the Call Service is found by browsing the
             Condition instance in the AddressSpace. However, some Servers do not expose
             Condition instances in the AddressSpace. Therefore all Servers shall allow
             Clients to call the Confirm Method by specifying ConditionId as the ObjectId
             and the well known NodeId of the Method declaration on the
             AcknowledgeableConditionType as the MethodId. The Method cannot be called on
             the AcknowledgeableConditionType Node.
            
             Method result codes:
            
             ResultCode                           | Description
             -------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
             Bad_ConditionBranchAlreadyConfirmed  | The EventId does not refer to a state that needs confirmation.
             Bad_EventIdUnknown                   | The specified EventId is not known to the Server.
             Bad_NodeIdUnknown                    | The node id refers to a node that does not exist in the server address space. Used to indicate that the specified Condition is not valid or that the Method was called on the ConditionType Node.
             </remarks>
             <param name="context"></param>
             <param name="eventId">
             EventId identifying a particular Event Notification.
             Only Event Notifications where ConfirmedState/Id was TRUE can be confirmed.
             </param>
             <param name="comment">
             A localized text to be applied to the Conditions.
             </param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AcknowledgeableConditionModel.ResetAcked(UnifiedAutomation.UaServer.RequestContext)">
            <summary>
            Sets the state to unacknownledged and unconfirmed.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AcknowledgeableConditionModel.UpdateEnabledEffectiveDisplayName">
            <summary>
            Updates the effect display name for the enabled state.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AcknowledgeableConditionModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AcknowledgeableConditionModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AcknowledgeableConditionModel.#ctor(UnifiedAutomation.UaServer.AcknowledgeableConditionModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AcknowledgeableConditionModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AcknowledgeableConditionModel.AckedState">
             <summary>
             AckedState when FALSE indicates that the Condition instance requires
             acknowledgement for the reported Condition state.
             </summary>
             <remarks>
             When the Condition instance is acknowledged the AckedState is set to TRUE.
             Recommended state names for LocaleIds are listed in the following table.
            
             LocaleId | FALSE State Name | TRUE State Name
             ---------|------------------|-----------------
             en       | Unacknowledged   | Acknowledged
             de       | Unquittiert      | Quittiert
             fr       | Non-acquitté     | Acquitté
             </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AcknowledgeableConditionModel.ConfirmedState">
             <summary>
             Indicates whether the Condition requires confirmation.
             </summary>
             <remarks>
             Recommended state names for LocaleIds are listed in the following table.
            
             LocaleId | FALSE State Name | TRUE State Name
             ---------|------------------|-----------------
             en       | Unconfirmed      | Confirmed
             de       | Unbestätigt      | Bestätigt
             fr       | Non-Confirmé     | Confirmé
             </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AcknowledgeableConditionModel.EnabledState">
            <summary>
            Gets or sets the EnabledState
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AcknowledgeableConditionModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AcknowledgeableConditionModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AcknowledgeableConditionModel.GetMethodDispatcher(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Gets the method dispatcher.
            </summary>
            <param name="context">The context.</param>
            <param name="objectId">The object id.</param>
            <param name="methodId">The method id.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AcknowledgeableConditionModel.DispatchMethod(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MethodHandle,System.Collections.Generic.IList{UnifiedAutomation.UaBase.Variant},System.Collections.Generic.List{UnifiedAutomation.UaBase.StatusCode},System.Collections.Generic.List{UnifiedAutomation.UaBase.Variant})">
            <summary>
            Dispatches the method.
            </summary>
            <param name="context">The context.</param>
            <param name="methodHandle">The method handle.</param>
            <param name="inputArguments">The input arguments.</param>
            <param name="inputArgumentResults">The input argument results.</param>
            <param name="outputArguments">The output arguments.</param>
            <returns></returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AlarmConditionModel">
            <summary>
            An abstract type that extends the AcknowledgeableConditionType by introducing
            an ActiveState, SuppressedState and ShelvingState.
            </summary>
            <remarks>
            The AlarmConditionType inherits all Properties of the
            AcknowledgeableConditionType. The following states are substates of the TRUE
            EnabledState.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AlarmConditionModel.OneShotShelve(UnifiedAutomation.UaServer.RequestContext)">
            <summary>
            Shelves an alarm.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AlarmConditionModel.TimedShelve(UnifiedAutomation.UaServer.RequestContext,System.Double)">
            <summary>
            Shelves an alarm for the specified time.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AlarmConditionModel.Unshelve(UnifiedAutomation.UaServer.RequestContext)">
            <summary>
            Unshelves an alarm.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AlarmConditionModel.Suppress(UnifiedAutomation.UaServer.RequestContext,System.Boolean)">
            <summary>
            Suppresses an alarm.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AlarmConditionModel.Activate(UnifiedAutomation.UaServer.RequestContext,System.Boolean)">
            <summary>
            Activates an alarm
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AlarmConditionModel.UpdateEnabledEffectiveDisplayName">
            <summary>
            Updates the effect display name for the enabled state.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AlarmConditionModel.UpdateActiveEffectiveDisplayName">
            <summary>
            Updates the effective display name for the active state.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AlarmConditionModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AlarmConditionModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AlarmConditionModel.#ctor(UnifiedAutomation.UaServer.AlarmConditionModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AlarmConditionModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AlarmConditionModel.ActiveState">
             <summary>
             ActiveState when set to TRUE indicates that the situation the Condition is
             representing currently exists.
             </summary>
             <remarks>
             When a Condition instance is in the inactive state (ActiveState when set to
             FALSE), it is representing a situation that has returned to a normal state. The
             transitions of Conditions to the inactive and Active states are triggered by
             Server specific actions. Subtypes of the AlarmConditionType will have substate
             models that further define the Active state. Recommended state names for
             LocaleIds are listed in the following table.
            
             LocaleId | FALSE State Name | TRUE State Name
             ---------|------------------|-----------------
             en       | Inactive         | Active
             de       | Inaktiv          | Aktiv
             fr       | Inactive         | Active
             </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AlarmConditionModel.AudibleEnabled">
            <summary>
            Gets or sets the AudibleEnabled
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AlarmConditionModel.AudibleSound">
            <summary>
            Gets or sets the AudibleSound
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AlarmConditionModel.EnabledState">
            <summary>
            Gets or sets the EnabledState
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AlarmConditionModel.FirstInGroup">
            <summary>
            Gets or sets the FirstInGroup
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AlarmConditionModel.FirstInGroupFlag">
            <summary>
            Gets or sets the FirstInGroupFlag
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AlarmConditionModel.InputNode">
            <summary>
            Provides the NodeId of the Variable the Value of which is used as primary input
            in the calculation of the Alarm state.
            </summary>
            <remarks>
            If this Variable is not in the AddressSpace, a Null NodeId shall be provided.
            In some systems, an Alarm may be calculated based on multiple Variables Values,
            it is up to the system to determine which Variable’s NodeId is used.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AlarmConditionModel.LatchedState">
            <summary>
            Gets or sets the LatchedState
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AlarmConditionModel.MaxTimeShelved">
             <summary>
             Optional Property used to set the maximum time that an Alarm Condition may be
             shelved.
             </summary>
             <remarks>
             The value is expressed as duration. Systems can use this Property to prevent
             permanent Shelving of an Alarm. If this Property is present it will be an upper
             limit on the duration passed into a TimedShelve method call. If a value that
             exceeds the value of this property is passed to the TimedShelve method, then a
             Bad_ShelvingTimeOutOfRange error code is returned on the call. If this Property
             is present it will also be enforced for the OneShotShelved state, in that a
             Alarm Condition will transition to the Unshelved state from the OneShotShelved
             state if the duration specified in this Property expires following a
             OneShotShelve operation without a change of any of the other items associated
             with the Condition.
            
             <see cref="T:UnifiedAutomation.UaServer.ShelvedStateMachineModel"/>
             <see cref="M:UnifiedAutomation.UaServer.IShelvedStateMachineMethods.TimedShelve(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.ShelvedStateMachineModel,System.Double)"/>
             <see cref="M:UnifiedAutomation.UaServer.IShelvedStateMachineMethods.OneShotShelve(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.ShelvedStateMachineModel)"/>
             </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AlarmConditionModel.OffDelay">
            <summary>
            Gets or sets the OffDelay
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AlarmConditionModel.OnDelay">
            <summary>
            Gets or sets the OnDelay
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AlarmConditionModel.OutOfServiceState">
            <summary>
            Gets or sets the OutOfServiceState
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AlarmConditionModel.ReAlarmRepeatCount">
            <summary>
            Gets or sets the ReAlarmRepeatCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AlarmConditionModel.ReAlarmTime">
            <summary>
            Gets or sets the ReAlarmTime
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AlarmConditionModel.ShelvingState">
             <summary>
             Suggests whether an Alarm shall (temporarily) be prevented from being displayed
             to the user.
             </summary>
             <remarks>
             It is quite often used to block nuisance Alarms.
            
             <see cref="T:UnifiedAutomation.UaServer.ShelvedStateMachineModel"/> </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AlarmConditionModel.SilenceState">
            <summary>
            Gets or sets the SilenceState
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AlarmConditionModel.SuppressedOrShelved">
             <summary>
             The SuppressedState and the ShelvingState together result in the
             SuppressedOrShelved status of the Condition.
             </summary>
             <remarks>
             When an Alarm is in one of the states, the SuppressedOrShelved property will be
             set TRUE and this Alarm is then typically not displayed by the Client. State
             transitions associated with the Alarm do occur, but they are not typically
             displayed by the Clients as long as the Alarm remains in either the Suppressed
             or Shelved state.
            
             <see cref="T:UnifiedAutomation.UaServer.ShelvedStateMachineModel"/> </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AlarmConditionModel.SuppressedState">
             <summary>
             Used internally by a Server to automatically suppress Alarms due to system
             specific reasons.
             </summary>
             <remarks>
             For example, a system may be configured to suppress Alarms that are associated
             with machinery that is shut down, such as a low level Alarm for a tank that is
             currently not in use. Recommended state names for LocaleIds are listed in the
             following table.
            
             LocaleId | FALSE State Name  | TRUE State Name
             ---------|-------------------|-----------------
             en       | Unsuppressed      | Suppressed
             de       | Nicht unterdrückt | Unterdrückt
             fr       | Présent           | Supprimé
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AlarmConditionModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AlarmConditionModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AlarmConditionModel.GetMethodDispatcher(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Gets the method dispatcher.
            </summary>
            <param name="context">The context.</param>
            <param name="objectId">The object id.</param>
            <param name="methodId">The method id.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AlarmConditionModel.DispatchMethod(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MethodHandle,System.Collections.Generic.IList{UnifiedAutomation.UaBase.Variant},System.Collections.Generic.List{UnifiedAutomation.UaBase.StatusCode},System.Collections.Generic.List{UnifiedAutomation.UaBase.Variant})">
            <summary>
            Dispatches the method.
            </summary>
            <param name="context">The context.</param>
            <param name="methodHandle">The method handle.</param>
            <param name="inputArguments">The input arguments.</param>
            <param name="inputArgumentResults">The input argument results.</param>
            <param name="outputArguments">The output arguments.</param>
            <returns></returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ExclusiveLimitAlarmModel">
            <summary>
            Used to specify the common behaviour for Alarm Types with multiple mutually
            exclusive limits.
            </summary>
            <remarks>
            The LimitState is a Substate of the ActiveState and has a IsTrueSubstate
            reference to the ActiveState.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ExclusiveLimitAlarmModel.SetLimit(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Shelves an alarm.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ExclusiveLimitAlarmModel.UpdateEnabledEffectiveDisplayName">
            <summary>
            Updates the effect display name for the enabled state.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ExclusiveLimitAlarmModel.UpdateActiveEffectiveDisplayName">
            <summary>
            Updates the effective display name for the active state.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ExclusiveLimitAlarmModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ExclusiveLimitAlarmModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ExclusiveLimitAlarmModel.#ctor(UnifiedAutomation.UaServer.ExclusiveLimitAlarmModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ExclusiveLimitAlarmModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ExclusiveLimitAlarmModel.ActiveState">
            <summary>
            Gets or sets the ActiveState
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ExclusiveLimitAlarmModel.LimitState">
            <summary>
            Represents the actual limit that is violated in an ExclusiveLimitAlarm.
            </summary>
            <remarks>
            When the ActiveState of the AlarmConditionType is inactive the LimitState shall
            not be available and shall return NULL on read. Any Events that subscribe for
            fields from the LimitState when the ActiveState is inactive shall return a NULL
            for these unavailable fields.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ExclusiveLimitAlarmModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ExclusiveLimitAlarmModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.FileDirectoryModel">
            <summary>
            An object that represents a directory that can be accessed via the server.
            </summary>
            <remarks>
            This class implements support for the FileDirectoryType object on the server side.
            </remarks>
             <summary>
             Defines a type for the representation of file directories.
             </summary>
             <remarks>
             It is expected that OPC UA Servers will create vendor specific subtypes of the
             <see cref="T:UnifiedAutomation.UaServer.FileDirectoryModel"/> with additional
             functionalities like methods for creating symbolic links or setting access
             permissions. OPC UA Clients providing specialized file transfer user interfaces
             should be prepared to expose such additional methods to the user.
            
             Instances of the ObjectType contain a list of
             <see cref="T:UnifiedAutomation.UaServer.FileDirectoryModel"/> objects
             representing the subdirectories of the file directory represented by the
             instance of this ObjectType.
            
             Instances of the ObjectType contain a list of
             <see cref="T:UnifiedAutomation.UaServer.FileModel"/> objects representing the
             files in the file directory represented by the instance of this ObjectType.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FileDirectoryModel.Dispose">
            <summary>
            Frees any unmanaged resources.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FileDirectoryModel.Dispose(System.Boolean)">
            <summary>
            An overrideable version of the Dispose.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.FileDirectoryModel.NodeId">
            <summary>
            Gets or sets the node identifier.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.FileDirectoryModel.DirectoryOnDisk">
            <summary>
            Gets or sets the directory on disk that is managed by the object.
            </summary>
        </member>
        <member name="E:UnifiedAutomation.UaServer.FileDirectoryModel.CreateDirectoryRequest">
            <summary>
            Occurs when a request to create a new directory is received.
            </summary>
        </member>
        <member name="E:UnifiedAutomation.UaServer.FileDirectoryModel.CreateFileRequest">
            <summary>
            Occurs when a request to create a new file is received.
            </summary>
        </member>
        <member name="E:UnifiedAutomation.UaServer.FileDirectoryModel.DeleteFileRequest">
            <summary>
            Occurs when a request to delete a file is received.
            </summary>
        </member>
        <member name="E:UnifiedAutomation.UaServer.FileDirectoryModel.MoveFileRequest">
            <summary>
            Occurs when a request to move a file is received.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.FileDirectoryModel.Lock">
            <summary>
            An object used to synchronize access to the file object.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FileDirectoryModel.CreateDirectory(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.FileDirectoryModel,System.String,UnifiedAutomation.UaBase.NodeId@)">
             <summary>
             Creates a new FileDirectoryType object organized by this object.
             </summary>
             <remarks>
             <b>Method Result Codes</b>
            
             Result Code               | Description
             --------------------------|-----------------------------------------------------------------------
             Bad_BrowseNameDuplicated  | A directory with the name already exists.
             Bad_UserAccessDenied      | The user does not have permission to perform the requested operation.
             </remarks>
             <param name="context">The request context.</param>
             <param name="model">The parent directory.</param>
             <param name="directoryName">
             The name of the directory to create.
             The name is used for the BrowseName and DisplayName of the directory object and
             also for the directory in the file system.
             For the BrowseName, the directoryName is used for the name part of the
             QualifiedName. The namespace index is Server specific.
             For the DisplayName, the directoryName is used for the text part of the
             LocalizedText. The locale part is Server specific.
             </param>
             <param name="directoryNodeId">The NodeId of the created directory object.</param>
             <returns>Good if the operation succeeds; an error code otherwise.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FileDirectoryModel.CreateFile(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.FileDirectoryModel,System.String,System.Boolean,UnifiedAutomation.UaBase.NodeId@,System.UInt32@)">
             <summary>
             Creates a new <see cref="T:UnifiedAutomation.UaServer.FileModel"/> object
             organized by this object.
             </summary>
             <remarks>
             The created file can be written using the
             <see cref="M:UnifiedAutomation.UaServer.IFileMethods.Write(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.FileModel,System.UInt32,System.Byte[])"/> method of the
             <see cref="T:UnifiedAutomation.UaServer.FileModel"/>.
            
             <b>Method Result Codes</b>
            
             Result Code               | Description
             --------------------------|-----------------------------------------------------------------------
             Bad_BrowseNameDuplicated  | A file with the name already exists.
             Bad_UserAccessDenied      | The user does not have permission to perform the requested operation.
             </remarks>
             <param name="context">The request context.</param>
             <param name="model">The file directory model.</param>
             <param name="fileName">
             The name of the file to create.
             The name is used for the BrowseName and DisplayName of the file object and also
             for the file in the file system.
             For the BrowseName, the FileName is used for the name part of the
             QualifiedName. The namespace index is Server specific.
             For the DisplayName, the FileName is used for the text part of the
             LocalizedText. The locale part is Server specific.
             </param>
             <param name="requestFileOpen">
             Flag indicating whether the new file should be opened with the Write and Read
             bits set in the open mode after the creation of the file.
             If the flag is set to True, the file is created and opened for writing. If the
             flag is set to False, the file is just created.
             </param>
             <param name="fileNodeId">The NodeId of the created file object.</param>
             <param name="fileHandle">
             The FileHandle is returned if RequestFileOpen is set to True.
             The FileNodeId and the FileHandle can be used to access the new file through
             the <see cref="T:UnifiedAutomation.UaServer.FileModel"/> object representing the
             new file.
             If RequestFileOpen is set to False, the returned value shall be 0 and shall be
             ignored by the caller.
             </param>
             <returns>Good if the operation succeeds; an error code otherwise.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FileDirectoryModel.Delete(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.FileDirectoryModel,UnifiedAutomation.UaBase.NodeId)">
             <summary>
             Deletes a file or directory organized by this object.
             </summary>
             <remarks>
             <b>Method Result Codes</b>
            
             Result Code           | Description
             ----------------------|-------------------------------------------------------------------------------
             Bad_NotFound          | A file or directory with the provided NodeId is not organized by this object.
             Bad_InvalidState      | The file or directory is locked and thus cannot be deleted.
             Bad_UserAccessDenied  | The user does not have permission to perform the requested operation.
             </remarks>
             <param name="context">The request context.</param>
             <param name="model">The file directory model.</param>
             <param name="objectToDelete">
             The NodeId of the file or directory to delete.
             In the case of a directory, all file and directory objects below the directory
             to delete are deleted recursively.
             </param>
             <returns>Good if the operation succeeds; an error code otherwise.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FileDirectoryModel.MoveOrCopy(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.FileDirectoryModel,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,System.Boolean,System.String,UnifiedAutomation.UaBase.NodeId@)">
             <summary>
             Moves or copies a file or directory organized by this object to another
             directory or renames a file or directory.
             </summary>
             <remarks>
             <b>Method Result Codes</b>
            
             Result Code               | Description
             --------------------------|-------------------------------------------------------------------------------
             Bad_BrowseNameDuplicated  | A file or directory with the name already exists.
             Bad_NotFound              | A file or directory with the provided NodeId is not organized by this object.
             Bad_InvalidState          | The file or directory is locked and thus cannot be moved or copied.
             Bad_UserAccessDenied      | The user does not have permission to perform the requested operation.
             </remarks>
             <param name="context">The request context.</param>
             <param name="model">The file directory model.</param>
             <param name="objectToMoveOrCopy">
             The NodeId of the file or directory to move or copy.
             </param>
             <param name="targetDirectory">
             The NodeId of the target directory of the move or copy command.
             If the file or directory is just renamed, the targetDirectory matches the
             ObjectId passed to the method call.
             </param>
             <param name="createCopy">
             A flag indicating whether a copy of the file or directory should be created at
             the target directory.
             </param>
             <param name="newName">
             The new name of the file or directory in the new location.
             If the string is empty, the name is unchanged.
             </param>
             <param name="newNodeId">
             The NodeId of the moved or copied object.
             Even if the object is moved, the Server may return a new NodeId.
             </param>
             <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FileDirectoryModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.FileDirectoryModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FileDirectoryModel.#ctor(UnifiedAutomation.UaServer.FileDirectoryModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.FileDirectoryModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FileDirectoryModel.GetMethodDispatcher(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Gets the method dispatcher.
            </summary>
            <param name="context">The context.</param>
            <param name="objectId">The object id.</param>
            <param name="methodId">The method id.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FileDirectoryModel.DispatchMethod(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MethodHandle,System.Collections.Generic.IList{UnifiedAutomation.UaBase.Variant},System.Collections.Generic.List{UnifiedAutomation.UaBase.StatusCode},System.Collections.Generic.List{UnifiedAutomation.UaBase.Variant})">
            <summary>
            Dispatches the method.
            </summary>
            <param name="context">The context.</param>
            <param name="methodHandle">The method handle.</param>
            <param name="inputArguments">The input arguments.</param>
            <param name="inputArgumentResults">The input argument results.</param>
            <param name="outputArguments">The output arguments.</param>
            <returns></returns>
        </member>
        <member name="P:UnifiedAutomation.UaServer.FileDirectoryModel.FileDirectoryMethods">
            <summary>
            Gets or sets the FileDirectory methods.
            </summary>
            <value>
            The FileDirectory methods.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.CreateDirectoryRequestEventArgs">
            <summary>
            The arguments passed when the CreateDirectoryRequest event is raised.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.CreateDirectoryRequestEventArgs.#ctor(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.FileDirectoryModel,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.CreateDirectoryRequestEventArgs"/> class.
            </summary>
            <param name="context">The context.</param>
            <param name="parent">The parent.</param>
            <param name="newName">The new name.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CreateDirectoryRequestEventArgs.Context">
            <summary>
            Gets the request context passed to the method call.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CreateDirectoryRequestEventArgs.Parent">
            <summary>
            Gets the parent directory.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CreateDirectoryRequestEventArgs.NewName">
            <summary>
            Gets the name of the directory to create.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CreateDirectoryRequestEventArgs.StatusCode">
            <summary>
            Gets or sets the status code.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CreateDirectoryRequestEventArgs.NewNodeId">
            <summary>
            Gets or sets the new node identifier for the directory.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.CreateFileRequestEventArgs">
            <summary>
            The arguments passed when the CreateFileRequest event is raised.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.CreateFileRequestEventArgs.#ctor(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.FileDirectoryModel,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.CreateFileRequestEventArgs" /> class.
            </summary>
            <param name="context">The context.</param>
            <param name="parent">The parent.</param>
            <param name="newName">The new name.</param>
            <param name="openFile">if set to <c>true</c> then return a handle to the new file.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CreateFileRequestEventArgs.Context">
            <summary>
            Gets the request context passed to the open method call.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CreateFileRequestEventArgs.Parent">
            <summary>
            Gets the parent directory.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CreateFileRequestEventArgs.NewName">
            <summary>
            Gets the name of the file to create.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CreateFileRequestEventArgs.OpenFile">
            <summary>
            Gets a flag indicating if the file should be opened after it is created.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CreateFileRequestEventArgs.StatusCode">
            <summary>
            Gets or sets the status code.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CreateFileRequestEventArgs.NewNodeId">
            <summary>
            Gets or sets the new node identifier for the file.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CreateFileRequestEventArgs.FileHandle">
            <summary>
            Gets or sets the new handle for the file.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.DeleteFileRequestEventArgs">
            <summary>
            The arguments passed when the DeleteFileRequest event is raised.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DeleteFileRequestEventArgs.#ctor(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.FileDirectoryModel,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.DeleteFileRequestEventArgs" /> class.
            </summary>
            <param name="context">The context.</param>
            <param name="parent">The parent directory.</param>
            <param name="fileToDelete">The file to delete.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DeleteFileRequestEventArgs.Context">
            <summary>
            Gets the request context passed to the method call.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DeleteFileRequestEventArgs.Parent">
            <summary>
            Gets the directory containing the file to delete.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DeleteFileRequestEventArgs.FileToDelete">
            <summary>
            Gets the file to delete.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DeleteFileRequestEventArgs.StatusCode">
            <summary>
            Gets or sets the status code.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.MoveFileRequestEventArgs">
            <summary>
            The arguments passed when the MoveFileRequest event is raised.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.MoveFileRequestEventArgs.#ctor(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.FileDirectoryModel,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.MoveFileRequestEventArgs" /> class.
            </summary>
            <param name="context">The context.</param>
            <param name="parent">The parent directory.</param>
            <param name="fileToMove">The file to move.</param>
            <param name="targetDirectory">The target directory.</param>
            <param name="newName">The new name.</param>
            <param name="makeCopy">If set to <c>true</c> then the file is copied.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.MoveFileRequestEventArgs.Context">
            <summary>
            Gets the request context passed to the method call.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.MoveFileRequestEventArgs.Parent">
            <summary>
            Gets the parent that contains the file or directory.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.MoveFileRequestEventArgs.FileToMove">
            <summary>
            Gets the file or directory to move or copy.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.MoveFileRequestEventArgs.TargetDirectory">
            <summary>
            Gets the target directory.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.MoveFileRequestEventArgs.NewName">
            <summary>
            Gets the new name for the file or directory.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.MoveFileRequestEventArgs.MakeCopy">
            <summary>
            Gets a value indicating whether to make a copy the file.
            </summary>
            <value>
            <c>TRUE</c> if make a copy; otherwise, <c>FALSE</c>.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.MoveFileRequestEventArgs.StatusCode">
            <summary>
            Gets or sets the status code.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.MoveFileRequestEventArgs.NewNodeId">
            <summary>
            Gets or sets the new node identifier for the file.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.FileModel">
             <summary>
             An object that represents a file that can be accessed via the server.
             </summary>
             <remarks>
             This class implements support for the FileType object on the server side.
            
             Any number of open read handles is allowed but only one handle
             may be open for write at a time.
             Subclasses may be used to replace the FileStream with other
             abstract stream implementations.
             There are two events (<see cref="E:UnifiedAutomation.UaServer.FileModel.OpenRequested"/> and <see cref="E:UnifiedAutomation.UaServer.FileModel.CloseRequested"/>) which
             can be used to determine permissions.
            
             See \ref DemoServerExampleFileModel for example code.
            
             </remarks>
            <summary>
            This ObjectType defines a type for files.
            </summary>
            <remarks>
            Note that all methods on a file require a FileHandle, which is returned in the
            <see cref="M:UnifiedAutomation.UaServer.IFileMethods.Open(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.FileModel,System.Byte,System.UInt32@)"/> method.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FileModel.Dispose">
            <summary>
            Frees any unmanaged resources.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FileModel.Dispose(System.Boolean)">
            <summary>
            An overrideable version of the Dispose.
            </summary>
        </member>
        <member name="E:UnifiedAutomation.UaServer.FileModel.OpenRequested">
            <summary>
            Occurs when the file is opened.
            </summary>
        </member>
        <member name="E:UnifiedAutomation.UaServer.FileModel.CloseRequested">
            <summary>
            Occurs when the file is closed.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.FileModel.FileOnDisk">
            <summary>
            Gets or sets the disk file which can be accessed via the file object.
            </summary>
            <remarks>
            This should be null if a subclass implements a more complex I/O model.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.FileModel.MaxFileSize">
            <summary>
            Gets or sets the maximum size of the file in bytes.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.FileModel.NodeAccessInfo">
            <summary>
            Gets or sets the NodeAccessInfo to specify user access in Open method.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FileModel.Open(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.FileModel,System.Byte,System.UInt32@)">
            <summary>
            Used to open a file represented by an Object of FileType.
            </summary>
            <remarks>
            When a client opens a file, it gets a FileHandle that is valid while the
            session is open. Clients shall use the
            <see cref="M:UnifiedAutomation.UaServer.IFileMethods.Close(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.FileModel,System.UInt32)"/> Method to release
            the handle when they do not need access to the file anymore. Clients can open
            the same file several times for reading. A request to open for writing shall
            return Bad_NotWritable when the file is already opened.
            </remarks>
            <param name="context">The context.</param>
            <param name="model">The model.</param>
            <param name="mode">
            Indicates whether the file should be opened only for read operations or for
            read and write operations and where the initial position is set.
            The mode is an 8-bit unsigned integer used as bit mask with the structure
            defined in the following table:
            Field          | Bit | Description
            ---------------|-----|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
            Read           | 0   | The file is opened for reading. If this bit is not set the <see cref="M:UnifiedAutomation.UaServer.IFileMethods.Read(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.FileModel,System.UInt32,System.Int32,System.Byte[]@)"/> Method cannot be executed.
            Write          | 1   | The file is opened for writing. If this bit is not set the <see cref="M:UnifiedAutomation.UaServer.IFileMethods.Write(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.FileModel,System.UInt32,System.Byte[])"/> Method cannot be executed.
            EraseExisting  | 2   | This bit can only be set if the file is opened for writing (Write bit is set). The existing content of the file is erased and an empty file is provided.
            Append         | 3   | When the Append bit is set the file is opened at end of the file, otherwise at begin of the file. The <see cref="M:UnifiedAutomation.UaServer.IFileMethods.SetPosition(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.FileModel,System.UInt32,System.UInt64)"/> Method can be used to change the position.
            See also <see cref="T:UnifiedAutomation.UaBase.FileAccessModes">FileAccessModes</see> enumeration.
            </param>
            <param name="fileHandle">
            A handle for the file used in other method calls indicating not the file (this
            is done by the Object of the Method call) but the access request and thus the
            position in the file.
            The FileHandle is generated by the server and is unique for the Session.
            Clients cannot transfer the FileHandle to another Session but need to get a new
            FileHandle by calling the
            <see cref="M:UnifiedAutomation.UaServer.IFileMethods.Open(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.FileModel,System.Byte,System.UInt32@)"/> Method.
            </param>
            <returns>
            The result of the operation.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FileModel.Close(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.FileModel,System.UInt32)">
            <summary>
            Closes a file represented by a FileType.
            </summary>
            <remarks>
             When a client closes a file, the handle becomes invalid.
            </remarks>
            <param name="context"></param>
            <param name="model"></param>
            <param name="fileHandle">
            A handle returned by the <see cref="M:UnifiedAutomation.UaServer.FileModel.Open(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.FileModel,System.Byte,System.UInt32@)"/> method,
            indicating the access request and thus indirectly the
            position inside the file.
            </param>
            <returns>
            The result of the operation.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FileModel.Read(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.FileModel,System.UInt32,System.Int32,System.Byte[]@)">
            <summary>
            Reads a part of the file starting from the current file
            position.
            </summary>
            <remarks>
            The file position is advanced by the number of bytes read.
            </remarks>
            <param name="context">The context.</param>
            <param name="model">The model.</param>
            <param name="fileHandle">
            A handle returned by the <see cref="M:UnifiedAutomation.UaServer.FileModel.Open(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.FileModel,System.Byte,System.UInt32@)"/> method,
            indicating the access request and thus indirectly the position
            the file.
            </param>
            <param name="length">
            Defines the length in byte that should be returned in data, starting from the
            current position of the file handle.
            If the end of file is reached, only all data till the end of the file are
            returned. If the specified length is longer than the maximum allowed message
            size of the communication, only those data fitting into the message size are
            returned. Only positive values are allowed.
            </param>
            <param name="data">
            Contains the returned data of the file.
            </param>
            <returns>
            The result of the operation.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FileModel.Write(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.FileModel,System.UInt32,System.Byte[])">
            <summary>
            Writes a part of the file starting from the current file
            position.
            </summary>
            <remarks>
            The file position is advanced by the number of bytes written
            </remarks>
            <param name="context">The context.</param>
            <param name="model">The file model.</param>
            <param name="fileHandle">
            A handle returned by the <see cref="M:UnifiedAutomation.UaServer.FileModel.Open(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.FileModel,System.Byte,System.UInt32@)"/> method,
            indicating the access request and thus indirectly the
            position inside the file.
            </param>
            <param name="data">
            Contains the data to be written at the position of the file.
            It is server-dependent whether the written data are persistently stored if the
            session is ended without calling the
            <see cref="M:UnifiedAutomation.UaServer.IFileMethods.Close(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.FileModel,System.UInt32)"/> Method with the
            FileHandle.
            </param>
            <returns>
            The result of the operation.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FileModel.SetPosition(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.FileModel,System.UInt32,System.UInt64)">
            <summary>
            Used to set the current position of the FileHandle.
            </summary>
            <param name="context">The context.</param>
            <param name="model">The file model.</param>
            <param name="fileHandle">
            A handle returned by the <see cref="M:UnifiedAutomation.UaServer.FileModel.Open(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.FileModel,System.Byte,System.UInt32@)"/> method,
            indicating the access request and thus indirectly the
            position inside the file.
            </param>
            <param name="position">
            The position to be set for the FileHandle in the file.
            If <see cref="M:UnifiedAutomation.UaServer.IFileMethods.Read(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.FileModel,System.UInt32,System.Int32,System.Byte[]@)"/> or
            <see cref="M:UnifiedAutomation.UaServer.IFileMethods.Write(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.FileModel,System.UInt32,System.Byte[])"/> is called, it
            starts at that position. If the position is higher than the file size, the
            position is set to the end of the file.
            </param>
            <returns>
            The result of the operation.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FileModel.GetPosition(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.FileModel,System.UInt32,System.UInt64@)">
            <summary>
            Provides the current position of the FileHandle.
            </summary>
            <param name="context">The context.</param>
            <param name="model">The file model.</param>
            <param name="fileHandle">
            A handle returned by the <see cref="M:UnifiedAutomation.UaServer.FileModel.Open(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.FileModel,System.Byte,System.UInt32@)"/> method,
            indicating the access request and thus indirectly the
            position inside the file.
            </param>
            <param name="position">
            The position of the FileHandle in the file.
            If <see cref="M:UnifiedAutomation.UaServer.IFileMethods.Read(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.FileModel,System.UInt32,System.Int32,System.Byte[]@)"/> or
            <see cref="M:UnifiedAutomation.UaServer.IFileMethods.Write(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.FileModel,System.UInt32,System.Byte[])"/> is called, it
            starts at that position.
            </param>
            <returns>
            The result of the operation.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FileModel.HasAccess(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.UserAccessMask)">
            <summary>
            Determines whether the current context has specified access to the file.
            </summary>
            <param name="context">The request context.</param>
            <param name="accessMasks">The desired access masks. UserAccessMask.Read and
            UserAccessMask.Write will be evaluated.
            </param>
            <returns>
            <c>true</c>, if the specified context has access; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.FileModel.OpenFileHandle">
            <summary>
            Caches information about an open file handle.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.FileModel.OpenFileHandle.FileHandle">
            <summary>
            The unique id assigned to the file handle
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.FileModel.OpenFileHandle.Session">
            <summary>
            The session which owns the file handle.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.FileModel.OpenFileHandle.Stream">
            <summary>
            The stream used to read or write.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.FileModel.OpenFileHandle.Mode">
            <summary>
            The mode how the stream will be accessed.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.FileModel.OpenFileHandle.IsReadOnly">
            <summary>
            Gets a value indicating whether the stream is read only.
            </summary>
            <value>
            <c>true</c> if the stream is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:UnifiedAutomation.UaServer.FileModel.Lock">
            <summary>
            An object used to synchronize access to the file object.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.FileModel.NextFileHandle">
            <summary>
            Gets or sets the next file handle to assign.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FileModel.CleanupExpiredHandles">
            <summary>
            Cleans up any expired handles.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FileModel.OpenStream(UnifiedAutomation.UaServer.FileModel.OpenFileHandle)">
            <summary>
            Opens a stream for the file referenced by <see cref="P:UnifiedAutomation.UaServer.FileModel.FileOnDisk"/>.
            </summary>
            <param name="handle">The handle.</param>
            <returns>
            If FileOnDisk is null, a memory stream is created.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FileModel.FindHandle(UnifiedAutomation.UaServer.RequestContext,System.UInt32)">
            <summary>
            Finds the handle.
            </summary>
            <param name="context">The context.</param>
            <param name="fileHandle">The file handle.</param>
            <returns>An open handle.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FileModel.SaveHandle(UnifiedAutomation.UaServer.FileModel.OpenFileHandle)">
            <summary>
            Assigns a unique id to the handle and saves the handle.
            </summary>
            <param name="handle">The handle.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FileModel.CloseHandle(UnifiedAutomation.UaServer.FileModel.OpenFileHandle)">
            <summary>
            Closes the stream associated with the handle and sets the size of the File object.
            </summary>
            <param name="handle">The handle.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FileModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.FileModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FileModel.#ctor(UnifiedAutomation.UaServer.FileModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.FileModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.FileModel.MimeType">
            <summary>
            Contains the media type of the file based on RFC 2046.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.FileModel.OpenCount">
            <summary>
            Indicates the number of currently valid file handles on the file.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.FileModel.Size">
            <summary>
            Defines the size of the file in Bytes.
            </summary>
            <remarks>
            When a file is opened for writing the size might not be accurate.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.FileModel.UserWritable">
            <summary>
            Indicates whether the file is writable, taking user access rights into account.
            </summary>
            <remarks>
            The Property does not take into account whether the file is currently opened
            for writing by another client and thus currently locked and not writable by
            others.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.FileModel.Writable">
            <summary>
            Indicates whether the file is writable.
            </summary>
            <remarks>
            It does not take any user access rights into account, i.e. although the file is
            writable this may be restricted to a certain user/user group. The Property does
            not take into account whether the file is currently opened for writing by
            another client and thus currently locked and not writable by others.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FileModel.GetMethodDispatcher(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Gets the method dispatcher.
            </summary>
            <param name="context">The context.</param>
            <param name="objectId">The object id.</param>
            <param name="methodId">The method id.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FileModel.DispatchMethod(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MethodHandle,System.Collections.Generic.IList{UnifiedAutomation.UaBase.Variant},System.Collections.Generic.List{UnifiedAutomation.UaBase.StatusCode},System.Collections.Generic.List{UnifiedAutomation.UaBase.Variant})">
            <summary>
            Dispatches the method.
            </summary>
            <param name="context">The context.</param>
            <param name="methodHandle">The method handle.</param>
            <param name="inputArguments">The input arguments.</param>
            <param name="inputArgumentResults">The input argument results.</param>
            <param name="outputArguments">The output arguments.</param>
            <returns></returns>
        </member>
        <member name="P:UnifiedAutomation.UaServer.FileModel.FileMethods">
            <summary>
            Gets or sets the File methods.
            </summary>
            <value>
            The File methods.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.OpenFileEventArgs">
            <summary>
            The arguments passed when the <see
            cref="E:UnifiedAutomation.UaServer.FileModel.OpenRequested">OpenRequested
            </see> event is raised.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.OpenFileEventArgs.#ctor(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.FileAccessModes,System.IO.FileInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.OpenFileEventArgs" /> class.
            </summary>
            <param name="context">The context.</param>
            <param name="mode">The mode.</param>
            <param name="file">The file being accessed by object.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.OpenFileEventArgs.Context">
            <summary>
            Gets the request context passed to the open file call.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.OpenFileEventArgs.Mode">
            <summary>
            Gets the type of access requested.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.OpenFileEventArgs.File">
            <summary>
            Gets the file that is accessed by the open file call.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.OpenFileEventArgs.Stream">
            <summary>
            Gets or sets the stream.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.OpenFileEventArgs.StatusCode">
            <summary>
            Gets or sets the status code.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.CloseFileEventArgs">
            <summary>
            The arguments passed when the <see
            cref="E:UnifiedAutomation.UaServer.FileModel.CloseRequested">CloseRequested
            </see> event is raised.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.CloseFileEventArgs.#ctor(UnifiedAutomation.UaServer.RequestContext,System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.CloseFileEventArgs"/> class.
            </summary>
            <param name="context">The context.</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CloseFileEventArgs.Context">
            <summary>
            Gets the context.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CloseFileEventArgs.Stream">
            <summary>
            Gets the stream.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CloseFileEventArgs.StatusCode">
            <summary>
            Gets or sets the status code.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CloseFileEventArgs.DoNotCloseStream">
            <summary>
            Gets or sets a value indicating whether the caller should not close the stream.
            </summary>
            <value>
            <c>true</c> if the caller should not close the stream; otherwise <c>false</c>.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ModelControllerBase">
            <summary>
            A base class for model controllers.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ModelControllerBase.ModelHandle">
            <summary>
            Gets or sets the metadata handle.
            </summary>
            <value>
            The metadata handle.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ModelControllerBase.UserData">
            <summary>
            Gets or sets the user data.
            </summary>
            <value>
            The user data.
            </value>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ModelControllerBase.GetModelHandle(UnifiedAutomation.UaBase.StringTable,System.Object)">
            <summary>
            Gets the metadata handle.
            </summary>
            <param name="namespaceUris">The namespace uris.</param>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ModelControllerBase.GetValue(UnifiedAutomation.UaBase.IMapperContext,UnifiedAutomation.UaBase.ModelMapping)">
            <summary>
            Gets the value associated with the mapping.
            </summary>
            <param name="context">The request context.</param>
            <param name="mapping">The mapping.</param>
            <returns>
            The value. null if he mapping was not understood.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ModelControllerBase.SetValue(UnifiedAutomation.UaBase.IMapperContext,UnifiedAutomation.UaBase.ModelMapping,UnifiedAutomation.UaBase.DataValue)">
            <summary>
            Sets the value associated with the mapping.
            </summary>
            <param name="context">The request context.</param>
            <param name="mapping">The mapping.</param>
            <param name="value">The value.</param>
            <returns>
            True if the mapping was understood. False otherwise.
            </returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ServerDiagnosticsModel">
            <summary>
            Defines application specific behavoir for the Server object.
            </summary>
            <summary>
            This ObjectType defines diagnostic information about the OPC UA Server.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerDiagnosticsModel.#ctor(UnifiedAutomation.UaServer.ServerManager)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ServerDiagnosticsModel"/> class.
            </summary>
            <param name="server">The server.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerDiagnosticsModel.GetModelHandle(UnifiedAutomation.UaBase.StringTable,System.Object)">
            <summary>
            Gets the metadata handle.
            </summary>
            <param name="namespaceUris">The namespace uris.</param>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerDiagnosticsModel.GetServerDiagnosticsSummary(UnifiedAutomation.UaServer.ServerDiagnosticsSummaryModel)">
            <summary>
            Gets the server diagnostics.
            </summary>
            <param name="diagnostics">The diagnostics.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerDiagnosticsModel.GetServerDiagnosticsSummary(UnifiedAutomation.UaBase.IMapperContext)">
            <summary>
            Gets the session diagnostics.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerDiagnosticsModel.GetSessionDiagnosticsArray(UnifiedAutomation.UaBase.IMapperContext)">
            <summary>
            Gets the session security diagnostics.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerDiagnosticsModel.GetSessionSecurityDiagnosticsArray(UnifiedAutomation.UaBase.IMapperContext)">
            <summary>
            Gets the session security diagnostics.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerDiagnosticsModel.GetSubscriptionDiagnosticsArray(UnifiedAutomation.UaBase.IMapperContext)">
            <summary>
            Gets the session security diagnostics.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerDiagnosticsModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ServerDiagnosticsModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerDiagnosticsModel.#ctor(UnifiedAutomation.UaServer.ServerDiagnosticsModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ServerDiagnosticsModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerDiagnosticsModel.EnabledFlag">
             <summary>
             Identifies whether or not diagnostic information is collected by the Server.
             </summary>
             <remarks>
             It can also be used by a client to enable or disable the collection of
             diagnostic information of the Server. The following settings of the boolean
             value apply: TRUE indicates that the Server collects diagnostic information,
             and setting the value to TRUE leads to re setting and enabling the collection.
             FALSE indicates that no statistic information is collected, and setting the
             value to FALSE disables the collection without resetting the statistic values.
            
             Static diagnostic Nodes that always appear in the address space will return
             Bad_NotReadable when the Value attribute of such a Node is read or subscribed
             to and diagnostics are turned off. Dynamic diagnostic nodes (such as the
             Session nodes) will not appear in the address space when diagnostics are turned
             off.
             </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerDiagnosticsModel.SamplingIntervalDiagnosticsArray">
             <summary>
             An array of diagnostic information per sampling rate (see
             <see cref="T:UnifiedAutomation.UaBase.SamplingIntervalDiagnosticsDataType"/>).
             </summary>
             <remarks>
             There is one entry for each sampling rate currently used by the Server. Its
             type definition node is the variable type
             <see cref="T:UnifiedAutomation.UaServer.SamplingIntervalDiagnosticsArrayModel"/>,
             providing a Variable for each entry in the array (see
             <see cref="T:UnifiedAutomation.UaServer.SamplingIntervalDiagnosticsArrayModel"/>
             ).
            
             The sampling interval diagnostics are only collected by Servers which use a
             fixed set of sampling intervals. In these cases, length of the array and the
             set of contained variables will be determined by the Server configuration and
             the NodeId assigned to a given sampling interval diagnostics variable shall not
             change as long as the Server configuration does not change. A Server may not
             expose the SamplingIntervalDiagnosticsArray if it does not use fixed sampling
             rates.
             </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerDiagnosticsModel.ServerDiagnosticsSummary">
            <summary>
            Contains diagnostic summary information for the Server.
            </summary>
            <remarks>
            See <see cref="T:UnifiedAutomation.UaBase.ServerDiagnosticsSummaryDataType"/>.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerDiagnosticsModel.SessionsDiagnosticsSummary">
            <summary>
            Contains diagnostic information per session (see
            <see cref="T:UnifiedAutomation.UaServer.SessionsDiagnosticsSummaryModel"/>).
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerDiagnosticsModel.SubscriptionDiagnosticsArray">
            <summary>
            An array of subscription diagnostic information per subscription (see
            <see cref="T:UnifiedAutomation.UaBase.SubscriptionDiagnosticsDataType"/>).
            </summary>
            <remarks>
            There is one entry for each notification channel actually established in the
            Server. Its type definition node is the variable type
            <see cref="T:UnifiedAutomation.UaServer.SubscriptionDiagnosticsArrayModel"/>,
            providing a variable for each entry in the array (see
            <see cref="T:UnifiedAutomation.UaServer.SubscriptionDiagnosticsArrayModel"/>).
            Those variables are also used as variables referenced by other variables.
            </remarks>
        </member>
        <member name="T:UnifiedAutomation.UaServer.SessionDiagnosticsObjectModel">
            <summary>
            Defines application specific behavoir for the Server object.
            </summary>
            <summary>
            This object type defines diagnostic information about a session of the OPC UA
            Server.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SessionDiagnosticsObjectModel.#ctor(UnifiedAutomation.UaServer.ServerManager)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.SessionDiagnosticsObjectModel"/> class.
            </summary>
            <param name="server">The server.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SessionDiagnosticsObjectModel.GetSessionDiagnostics(UnifiedAutomation.UaServer.SessionDiagnosticsVariableModel)">
            <summary>
            Gets the session diagnostics.
            </summary>
            <param name="diagnostics">The diagnostics.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SessionDiagnosticsObjectModel.GetSessionSecurityDiagnostics(UnifiedAutomation.UaServer.SessionSecurityDiagnosticsModel)">
            <summary>
            Gets the session diagnostics.
            </summary>
            <param name="diagnostics">The diagnostics.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SessionDiagnosticsObjectModel.GetModelHandle(UnifiedAutomation.UaBase.StringTable,System.Object)">
            <summary>
            Gets the metadata handle.
            </summary>
            <param name="namespaceUris">The namespace uris.</param>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SessionDiagnosticsObjectModel.GetSessionDiagnostics(UnifiedAutomation.UaBase.IMapperContext)">
            <summary>
            Gets the session diagnostics.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SessionDiagnosticsObjectModel.GetSessionSecurityDiagnostics(UnifiedAutomation.UaBase.IMapperContext)">
            <summary>
            Gets the session security diagnostics.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SessionDiagnosticsObjectModel.GetSubscriptionDiagnosticsArray(UnifiedAutomation.UaBase.IMapperContext)">
            <summary>
            Gets the session security diagnostics.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SessionDiagnosticsObjectModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.SessionDiagnosticsObjectModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SessionDiagnosticsObjectModel.#ctor(UnifiedAutomation.UaServer.SessionDiagnosticsObjectModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.SessionDiagnosticsObjectModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionDiagnosticsObjectModel.SessionDiagnostics">
            <summary>
            Contains general diagnostic information about the session
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionDiagnosticsObjectModel.SessionSecurityDiagnostics">
            <summary>
            Contains security-related diagnostic information.
            </summary>
            <remarks>
            Because the information of this variable is security-related, it should not be
            made accessible to all users, but only to authorised users.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionDiagnosticsObjectModel.SubscriptionDiagnosticsArray">
            <summary>
            An array of subscription diagnostic information per opened subscription, (see).
            </summary>
            <remarks>
            Its type definition node is the variable type
            <see cref="T:UnifiedAutomation.UaServer.SubscriptionDiagnosticsArrayModel"/>
            providing a variable for each entry in the array.
            </remarks>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ServerModel">
            <summary>
            Defines application specific behavoir for the Server object.
            </summary>
            <summary>
            Defines the capabilities supported by the OPC UA Server.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerModel.#ctor(UnifiedAutomation.UaServer.ServerManager)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ServerModel"/> class.
            </summary>
            <param name="server">The server.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerModel.GetModelHandle(UnifiedAutomation.UaBase.StringTable,System.Object)">
            <summary>
            Gets the metadata handle.
            </summary>
            <param name="namespaceUris">The namespace uris.</param>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerModel.GetNamespaceArray(UnifiedAutomation.UaBase.IMapperContext)">
            <summary>
            Gets the namespace array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerModel.GetServerArray(UnifiedAutomation.UaBase.IMapperContext)">
            <summary>
            Gets the server URI array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerModel.GetCurrentTime(UnifiedAutomation.UaBase.IMapperContext)">
            <summary>
            Gets the current time.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerModel.GetServerStatus(UnifiedAutomation.UaBase.IMapperContext)">
            <summary>
            Gets the server status.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerModel.GetBuildInfo(UnifiedAutomation.UaBase.IMapperContext)">
            <summary>
            Gets the build info.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ServerModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerModel.#ctor(UnifiedAutomation.UaServer.ServerModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ServerModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerModel.Auditing">
            <summary>
            A Boolean specifying if the Server is currently generating audit events.
            </summary>
            <remarks>
            It is set to TRUE if the Server generates audit events, otherwise to false. The
            profiles defined in Part 7 of the OPC UA Specification specify what kind of
            audit events are generated by the Server.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerModel.EstimatedReturnTime">
            <summary>
            Indicates the time at which the Server is expected to have a ServerStatus.State
            of RUNNING_0.
            </summary>
            <remarks>
            A Client that observes a shutdown or a ServiceLevel of 0 should either wait
            until after this time to attempt to reconnect to this Server or enter into slow
            retry logic. For example, most Clients will attempt to reconnect after a
            failure immediately and then progressively increase the delay between attempts
            until some maximum delay. This time can be used to trigger the Client to start
            its reconnect logic with some delay.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerModel.LocalTime">
            <summary>
            Gets or sets the LocalTime
            </summary>
            <details>
            Indicates the time zone the Server is is  running in.
            </details>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerModel.NamespaceArray">
             <summary>
             Defines an array of namespace URIs.
             </summary>
             <remarks>
             This variable is also referred as namespace table. The indexes into the
             namespace table are referred to as namespace indexes. Namespace indexes are
             used in NodeIds in OPC UA Services, rather than the longer namespace URI. Index
             0 is reserved for the OPC UA namespace, and index 1 is reserved for the local
             Server. Clients may read the entire namespace table or they may read individual
             entries in the namespace table. The Server shall not modify or delete entries
             of the namespace table while any client has an open session to the Server,
             because clients may cache the namespace table. A Server may add entries to the
             namespace table even if clients are connected to the Server. It is recommended
             that Servers not change the indexes of the namespace table but only add
             entries, because the client may cache NodeIds using the indexes.
            
             Nevertheless, it might not always be possible for Servers to avoid changing
             indexes in the namespace table. Clients that cache namespace indexes of NodeIds
             should always check when starting a session to verify that the cached namespace
             indexes have not changed.
             </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerModel.Namespaces">
            <summary>
            Provides a list of
            <see cref="T:UnifiedAutomation.UaServer.NamespaceMetadataModel"/> objects with
            additional information about the namespaces used in the Server.
            </summary>
            <remarks>
            See also the description of
            <see cref="T:UnifiedAutomation.UaServer.NamespaceMetadataModel"/>.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerModel.ServerArray">
             <summary>
             Defines an array of Server URIs.
             </summary>
             <remarks>
             This Variable is also referred to as the server table. Each URI in this array
             represents a globally-unique logical name for a Server within the scope of the
             network in which it is installed. Each OPC UA Server instance has a single URI
             that is used in the server table of other OPC UA Servers. Index 0 is reserved
             for the URI of the local Server. Values above 0 are used to identify remote
             Servers and are specific to a Server. Part 4 of the OPC UA Specification
             describes discovery mechanism that can be used to resolve URIs into URLs. The
             Server URI is case sensitive.
            
             The URI of the ServerArray with index 0 shall be identical to the URI of the
             NamespaceArray with index 1, since both represent the local Server. The indexes
             into the server table are referred to as server indexes or server names. They
             are used in OPC UA Services to identify target nodes of references that reside
             in remote Servers.
            
             Clients may read the entire table or they may read individual entries in the
             table. The Server shall not modify or delete entries of this table while any
             client has an open session to the Server, because clients may cache the server
             table. A Server may add entries to the server table even if clients are
             connected to the Server.
             </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerModel.ServerCapabilities">
            <summary>
            Defines the capabilities supported by the OPC UA Server.
            </summary>
            <remarks>
            See <see cref="T:UnifiedAutomation.UaServer.ServerCapabilitiesModel"/> for its
            description.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerModel.ServerDiagnostics">
            <summary>
            Defines diagnostic information about the OPC UA Server.
            </summary>
            <remarks>
            See <see cref="T:UnifiedAutomation.UaServer.ServerDiagnosticsModel"/> for its
            description.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerModel.ServerRedundancy">
            <summary>
            Describes the redundancy capabilities provided by the Server.
            </summary>
            <remarks>
            This object is required even if the Server does not provide any redundancy
            support. If the Server supports redundancy, then a subtype of
            <see cref="T:UnifiedAutomation.UaServer.ServerRedundancyModel"/> is used to
            describe its capabilities. Otherwise, it provides an object of type
            <see cref="T:UnifiedAutomation.UaServer.ServerRedundancyModel"/> with the
            property RedundancySupport set to none. See also the description of
            <see cref="T:UnifiedAutomation.UaServer.ServerRedundancyModel"/>.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerModel.ServerStatus">
            <summary>
            Contains elements that describe the status of the Server.
            </summary>
            <remarks>
            See <see cref="T:UnifiedAutomation.UaBase.ServerStatusDataType"/> for a
            description of its elements.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerModel.ServiceLevel">
            <summary>
            Describes the ability of the Server to provide its data to the client.
            </summary>
            <remarks>
            The value range is from 0 to 255, where 0 indicates the worst and 255 indicates
            the best. Part 4 of the OPC UA Specification defines required sub-ranges for
            different scenarios. The intent is to provide the clients an indication of
            availability among redundant Servers.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerModel.UrisVersion">
            <summary>
            Gets or sets the UrisVersion
            </summary>
            <details>
            Defines the version of the ServerArray and the NamespaceArray.
            </details>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerModel.VendorServerInfo">
            <summary>
            Represents the browse entry point for vendor-defined Server information.
            </summary>
            <remarks>
            This object is required to be present even if there are no vendor-defined
            objects beneath it. See
            <see cref="T:UnifiedAutomation.UaServer.VendorServerInfoModel"/> for its
            description.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerModel.GetMethodDispatcher(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Gets the method dispatcher.
            </summary>
            <param name="context">The context.</param>
            <param name="objectId">The object id.</param>
            <param name="methodId">The method id.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerModel.DispatchMethod(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MethodHandle,System.Collections.Generic.IList{UnifiedAutomation.UaBase.Variant},System.Collections.Generic.List{UnifiedAutomation.UaBase.StatusCode},System.Collections.Generic.List{UnifiedAutomation.UaBase.Variant})">
            <summary>
            Dispatches the method.
            </summary>
            <param name="context">The context.</param>
            <param name="methodHandle">The method handle.</param>
            <param name="inputArguments">The input arguments.</param>
            <param name="inputArgumentResults">The input argument results.</param>
            <param name="outputArguments">The output arguments.</param>
            <returns></returns>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerModel.ServerMethods">
            <summary>
            Gets or sets the Server methods.
            </summary>
            <value>
            The Server methods.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.SubscriptionDiagnosticsModel">
            <summary>
            Defines application specific behavoir for the Server object.
            </summary>
            <summary>
            This complex variable type is used for diagnostic information. Its data
            variables reflect its data type, having the same semantic ().
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SubscriptionDiagnosticsModel.#ctor(UnifiedAutomation.UaServer.ServerManager)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.SessionDiagnosticsObjectModel"/> class.
            </summary>
            <param name="server">The server.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SubscriptionDiagnosticsModel.GetSubscriptionDiagnostics(UnifiedAutomation.UaServer.SubscriptionDiagnosticsModel)">
            <summary>
            Gets the subscription diagnostics.
            </summary>
            <param name="diagnostics">The diagnostics.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SubscriptionDiagnosticsModel.GetModelHandle(UnifiedAutomation.UaBase.StringTable,System.Object)">
            <summary>
            Gets the metadata handle.
            </summary>
            <param name="namespaceUris">The namespace uris.</param>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SubscriptionDiagnosticsModel.GetSubscriptionDiagnostics(UnifiedAutomation.UaBase.IMapperContext)">
            <summary>
            Gets the subscription diagnostics.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SubscriptionDiagnosticsModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.SubscriptionDiagnosticsModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SubscriptionDiagnosticsModel.#ctor(UnifiedAutomation.UaServer.SubscriptionDiagnosticsModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.SubscriptionDiagnosticsModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SubscriptionDiagnosticsModel.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SubscriptionDiagnosticsModel.CurrentKeepAliveCount">
            <summary>
            Gets or sets the CurrentKeepAliveCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SubscriptionDiagnosticsModel.CurrentLifetimeCount">
            <summary>
            Gets or sets the CurrentLifetimeCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SubscriptionDiagnosticsModel.DataChangeNotificationsCount">
            <summary>
            Gets or sets the DataChangeNotificationsCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SubscriptionDiagnosticsModel.DisableCount">
            <summary>
            Gets or sets the DisableCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SubscriptionDiagnosticsModel.DisabledMonitoredItemCount">
            <summary>
            Gets or sets the DisabledMonitoredItemCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SubscriptionDiagnosticsModel.DiscardedMessageCount">
            <summary>
            Gets or sets the DiscardedMessageCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SubscriptionDiagnosticsModel.EnableCount">
            <summary>
            Gets or sets the EnableCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SubscriptionDiagnosticsModel.EventNotificationsCount">
            <summary>
            Gets or sets the EventNotificationsCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SubscriptionDiagnosticsModel.EventQueueOverflowCount">
            <summary>
            Gets or sets the EventQueueOverflowCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SubscriptionDiagnosticsModel.LatePublishRequestCount">
            <summary>
            Gets or sets the LatePublishRequestCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SubscriptionDiagnosticsModel.MaxKeepAliveCount">
            <summary>
            Gets or sets the MaxKeepAliveCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SubscriptionDiagnosticsModel.MaxLifetimeCount">
            <summary>
            Gets or sets the MaxLifetimeCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SubscriptionDiagnosticsModel.MaxNotificationsPerPublish">
            <summary>
            Gets or sets the MaxNotificationsPerPublish
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SubscriptionDiagnosticsModel.ModifyCount">
            <summary>
            Gets or sets the ModifyCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SubscriptionDiagnosticsModel.MonitoredItemCount">
            <summary>
            Gets or sets the MonitoredItemCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SubscriptionDiagnosticsModel.MonitoringQueueOverflowCount">
            <summary>
            Gets or sets the MonitoringQueueOverflowCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SubscriptionDiagnosticsModel.NextSequenceNumber">
            <summary>
            Gets or sets the NextSequenceNumber
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SubscriptionDiagnosticsModel.NotificationsCount">
            <summary>
            Gets or sets the NotificationsCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SubscriptionDiagnosticsModel.Priority">
            <summary>
            Gets or sets the Priority
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SubscriptionDiagnosticsModel.PublishingEnabled">
            <summary>
            Gets or sets the PublishingEnabled
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SubscriptionDiagnosticsModel.PublishingInterval">
            <summary>
            Gets or sets the PublishingInterval
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SubscriptionDiagnosticsModel.PublishRequestCount">
            <summary>
            Gets or sets the PublishRequestCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SubscriptionDiagnosticsModel.RepublishMessageCount">
            <summary>
            Gets or sets the RepublishMessageCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SubscriptionDiagnosticsModel.RepublishMessageRequestCount">
            <summary>
            Gets or sets the RepublishMessageRequestCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SubscriptionDiagnosticsModel.RepublishRequestCount">
            <summary>
            Gets or sets the RepublishRequestCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SubscriptionDiagnosticsModel.SessionId">
            <summary>
            Gets or sets the SessionId
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SubscriptionDiagnosticsModel.SubscriptionId">
            <summary>
            Gets or sets the SubscriptionId
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SubscriptionDiagnosticsModel.TransferredToAltClientCount">
            <summary>
            Gets or sets the TransferredToAltClientCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SubscriptionDiagnosticsModel.TransferredToSameClientCount">
            <summary>
            Gets or sets the TransferredToSameClientCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SubscriptionDiagnosticsModel.TransferRequestCount">
            <summary>
            Gets or sets the TransferRequestCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SubscriptionDiagnosticsModel.UnacknowledgedMessageCount">
            <summary>
            Gets or sets the UnacknowledgedMessageCount
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ReadTrustListEventArgs">
            <summary>
            The arguments passed when a ReadTrustList event occurs.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ReadTrustListEventArgs.#ctor(UnifiedAutomation.UaServer.TrustListModel,UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.TrustListMasks)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ReadTrustListEventArgs"/> class.
            </summary>
            <param name="model">The model.</param>
            <param name="context">The context.</param>
            <param name="masks">The masks.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ReadTrustListEventArgs.Model">
            <summary>
            Gets the model.
            </summary>
            <value>
            The model.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ReadTrustListEventArgs.Context">
            <summary>
            Gets the context.
            </summary>
            <value>
            The context.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ReadTrustListEventArgs.Masks">
            <summary>
            Gets the masks.
            </summary>
            <value>
            The masks.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ReadTrustListEventArgs.StatusCode">
            <summary>
            Gets or sets the status code.
            </summary>
            <value>
            The status code.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ReadTrustListEventArgs.TrustList">
            <summary>
            Gets or sets the trust list.
            </summary>
            <value>
            The trust list.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.WriteTrustListEventArgs">
            <summary>
            The arguments passed when a WriteTrustList event occurs.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.WriteTrustListEventArgs.#ctor(UnifiedAutomation.UaServer.TrustListModel,UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.TrustListDataType)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.WriteTrustListEventArgs"/> class.
            </summary>
            <param name="model">The model.</param>
            <param name="context">The context.</param>
            <param name="trustList">The trust list.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.WriteTrustListEventArgs.Model">
            <summary>
            Gets the model.
            </summary>
            <value>
            The model.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.WriteTrustListEventArgs.Context">
            <summary>
            Gets the context.
            </summary>
            <value>
            The context.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.WriteTrustListEventArgs.TrustList">
            <summary>
            Gets the trust list.
            </summary>
            <value>
            The trust list.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.WriteTrustListEventArgs.StatusCode">
            <summary>
            Gets or sets the status code.
            </summary>
            <value>
            The status code.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.WriteTrustListEventArgs.RestartRequired">
            <summary>
            Gets or sets a value indicating whether a restart is required.
            </summary>
            <value>
            <c>true</c> if a restart is required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.CertificateAddedEventArgs">
            <summary>
            The arguments passed when a AddCertificate event occurs.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.CertificateAddedEventArgs.#ctor(UnifiedAutomation.UaServer.TrustListModel,UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.ICertificate,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.CertificateAddedEventArgs" /> class.
            </summary>
            <param name="model">The model.</param>
            <param name="context">The context.</param>
            <param name="certificate">The certificate.</param>
            <param name="isTrusted">if set to <c>true</c> if the certificate is trusted.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CertificateAddedEventArgs.Model">
            <summary>
            Gets the model.
            </summary>
            <value>
            The model.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CertificateAddedEventArgs.Context">
            <summary>
            Gets the context.
            </summary>
            <value>
            The context.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CertificateAddedEventArgs.Certificate">
            <summary>
            Gets the certificate.
            </summary>
            <value>
            The certificate.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CertificateAddedEventArgs.IsTrusted">
            <summary>
            Gets a value indicating whether the certificate is trusted.
            </summary>
            <value>
            <c>true</c> if the certificate is trusted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CertificateAddedEventArgs.StatusCode">
            <summary>
            Gets or sets the status code.
            </summary>
            <value>
            The status code.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.RemoveCertificateEventArgs">
            <summary>
            The arguments passed when a RemoveCertificate event occurs.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RemoveCertificateEventArgs.#ctor(UnifiedAutomation.UaServer.TrustListModel,UnifiedAutomation.UaServer.RequestContext,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.RemoveCertificateEventArgs" /> class.
            </summary>
            <param name="model">The model.</param>
            <param name="context">The context.</param>
            <param name="thumbprint">The thumbprint.</param>
            <param name="isTrusted">if set to <c>true</c> if the certificate is a trusted certificate.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.RemoveCertificateEventArgs.Model">
            <summary>
            Gets the model.
            </summary>
            <value>
            The model.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.RemoveCertificateEventArgs.Context">
            <summary>
            Gets the context.
            </summary>
            <value>
            The context.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.RemoveCertificateEventArgs.Thumbprint">
            <summary>
            Gets the thumbprint.
            </summary>
            <value>
            The thumbprint.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.RemoveCertificateEventArgs.IsTrusted">
            <summary>
            Gets a value indicating whether the certificate is a trusted certificate.
            </summary>
            <value>
            <c>true</c> if the certificate is a trusted certificate; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.RemoveCertificateEventArgs.StatusCode">
            <summary>
            Gets or sets the status code.
            </summary>
            <value>
            The status code.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.TrustListModel">
            <summary>
            An object which represents a trust list.
            </summary>
             <summary>
             Defines a <see cref="T:UnifiedAutomation.UaServer.FileModel"/> that can be used
             to access a trust list.
             </summary>
             <remarks>
             The CertificateManager uses this type to implement the Pull Model.
            
             Servers use this type when implementing the Push Model.
            
             An instance of a TrustListType must restrict access to appropriate users or
             applications. This may be a CertificateManager administrative user that can
             change the contents of a trust list, it may be an administrative user that is
             reading a trust list to deploy to an application host or it may be an
             application that can only access the trust list assigned to it.
            
             The trust list file is a UA Binary encoded stream containing an instance of
             TrustListDataType.
            
             \todo Open method
            
             The Open method shall not support modes other than Read (0x01) and the Write +
             EraseExisting (0x06).
            
             When a Client opens the file for writing, the Server will not actually update
             the trust list until the
             <see cref="M:UnifiedAutomation.UaServer.ITrustListMethods.CloseAndUpdate(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.TrustListModel,System.UInt32,System.Boolean@)"/>
             method is called. Simply calling Close will discard the updates. The bit masks
             in the TrustListDataType structure allow the Client to only update part of the
             trust list.
            
             When the
             <see cref="M:UnifiedAutomation.UaServer.ITrustListMethods.CloseAndUpdate(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.TrustListModel,System.UInt32,System.Boolean@)"/>
             method is called, the Server will validate all new Certificates and CRLs. If
             this validation fails, the trust list is not updated and the Server returns the
             appropriate certificate error code.
            
             If auditing is supported, the CertificateManager shall generate the
             TrustListUpdatedAuditEventType when the
             <see cref="M:UnifiedAutomation.UaServer.ITrustListMethods.CloseAndUpdate(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.TrustListModel,System.UInt32,System.Boolean@)"/>,
             <see cref="M:UnifiedAutomation.UaServer.ITrustListMethods.AddCertificate(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.TrustListModel,System.Byte[],System.Boolean)"/> or
             <see cref="M:UnifiedAutomation.UaServer.ITrustListMethods.RemoveCertificate(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.TrustListModel,System.String,System.Boolean)"/>
             methods are called.
             </remarks>
        </member>
        <member name="E:UnifiedAutomation.UaServer.TrustListModel.ReadTrustListRequested">
            <summary>
            Occurs when the trust list is opened for reading.
            </summary>
        </member>
        <member name="E:UnifiedAutomation.UaServer.TrustListModel.WriteTrustListRequested">
            <summary>
            Occurs when the trust list has been uploaded and the changes need to be applied.
            </summary>
        </member>
        <member name="E:UnifiedAutomation.UaServer.TrustListModel.AddCertificateRequested">
            <summary>
            Occurs when the trust list has been uploaded and the changes need to be applied.
            </summary>
        </member>
        <member name="E:UnifiedAutomation.UaServer.TrustListModel.RemoveCertificateRequested">
            <summary>
            Occurs when the remove certificate method is called.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.TrustListModel.StorePath">
            <summary>
            Gets or sets the store path.
            </summary>
            <value>
            The store path.
            </value>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TrustListModel.Open(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.FileModel,System.Byte,System.UInt32@)">
            <summary>
            Opens the specified context.
            </summary>
            <param name="context">The context.</param>
            <param name="model">The model.</param>
            <param name="mode">The mode.</param>
            <param name="fileHandle">The file handle.</param>
            <returns>
            The result of the operation.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TrustListModel.OpenWithMasks(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.TrustListModel,System.UInt32,System.UInt32@)">
            <summary>
             Allows a Client to read only a portion of the trust list.
            </summary>
            <remarks>
            This method can only be used to read the trust list.
            </remarks>
            <param name="context">The context.</param>
            <param name="model">The model.</param>
            <param name="masks">The parts of the trust list that are include in the file to read.</param>
            <param name="fileHandle">The handle of the newly opened file.</param>
            <returns>
            The result of the operation.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TrustListModel.CloseAndUpdate(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.TrustListModel,System.UInt32,System.Boolean@)">
             <summary>
             Closes the file and applies the changes to the trust list.
             </summary>
             <remarks>
             It can only be called if the file was opened for writing.
            
             If the file cannot be processed, this method still closes the file and discards
             the data before returning an error. This method is required if the Server
             supports writes.
            
             The structure uploaded includes a mask which specifies which fields are
             updated. If a bit is not set, the associated field is not changed.
             </remarks>
             <param name="context">The context.</param>
             <param name="model">The model.</param>
             <param name="fileHandle">Handle of the previously opened file.</param>
             <param name="restartRequired">if set to <c>true</c> a restart is required.</param>
             <returns>
             The result of the operation.
             </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TrustListModel.AddCertificate(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.TrustListModel,System.Byte[],System.Boolean)">
             <summary>
             Allows a Client to add a single certificate to the trust list.
             </summary>
             <remarks>
             The Server always validates the certificate before adding
             it and returns the appropriate error code on failure.
            
             This method cannot be called if the file object is open.
             </remarks>
             <param name="context">The context.</param>
             <param name="model">The model.</param>
             <param name="certificate">
             The DER encoded certificate to add.
             </param>
             <param name="isTrustedCertificate">
             Flag indicating whether the certificate is not an issuer certificate.
             If TRUE, the certificate is added to the trusted certificates list. If FALSE,
             the certificate is added to the issuer certificates list.
             </param>
             <returns>Any error that occurred during processing.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TrustListModel.RemoveCertificate(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.TrustListModel,System.String,System.Boolean)">
            <summary>
            Allows a Client to remove a single certificate from the trust list.
            </summary>
            <remarks>
            It returns Bad_InvalidArgument if the thumbprint does not match a certificate
            in the trust list. This method cannot be called if the file object is open.
            </remarks>
            <param name="context">The context.</param>
            <param name="model">The model.</param>
            <param name="thumbprint">The SHA1 hash of the certificate to remove.</param>
            <param name="isTrustedCertificate">
            Flag indicating whether the certificate is not an issuer certificate.
            If TRUE, the certificate is removed from the trusted certificates list. If
            FALSE, the certificate is removed from the issuer certificates list.
            </param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TrustListModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.TrustListModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TrustListModel.#ctor(UnifiedAutomation.UaServer.TrustListModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.TrustListModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.TrustListModel.LastUpdateTime">
            <summary>
            Indicates when the trust list was last updated via trust list object methods.
            </summary>
            <remarks>
            This can be used to determine whether a device has an up to date trust list or
            to detect unexpected modifications. Out of band changes are not necessarily
            reported by this value.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TrustListModel.GetMethodDispatcher(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Gets the method dispatcher.
            </summary>
            <param name="context">The context.</param>
            <param name="objectId">The object id.</param>
            <param name="methodId">The method id.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TrustListModel.DispatchMethod(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MethodHandle,System.Collections.Generic.IList{UnifiedAutomation.UaBase.Variant},System.Collections.Generic.List{UnifiedAutomation.UaBase.StatusCode},System.Collections.Generic.List{UnifiedAutomation.UaBase.Variant})">
            <summary>
            Dispatches the method.
            </summary>
            <param name="context">The context.</param>
            <param name="methodHandle">The method handle.</param>
            <param name="inputArguments">The input arguments.</param>
            <param name="inputArgumentResults">The input argument results.</param>
            <param name="outputArguments">The output arguments.</param>
            <returns></returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.BaseNodeManager">
            <summary>
            A base class for all node managers.
            </summary>
            <summary>
            A base class for all node managers.
            </summary>
            <summary>
            A base class for all node managers.
            </summary>
            <summary>
            A base class for all node managers.
            </summary>
            <summary>
            A base class for all node managers.
            </summary>
            \ingroup UaServerApi
            <summary>
            A base class for all node managers.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.NodeAccessInfoFromShema(UnifiedAutomation.UaSchema.NodeAccessInfo)">
            <summary>
            Returns the INodeAccessInfo from the Extension defines in a NodeSet XML file
            </summary>
            <param name="nodeAccessInfo">The parsed extension. The sum of the number of groups and the
            number of users must not be greater than 2.
            If more groups or users are specified, null is returned.
            </param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.CreateTypeDictionary(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.CreateTypeDictionarySettings)">
            <summary>
            Creates a class that can be used to dynamically build data types descriptions.
            </summary>
            <param name="context">The request context.</param>
            <param name="settings">The settings used to initialize the dictionary.</param>
            <returns>The new schema dictionary object.</returns>
            <remarks>
            Each object creates an OPC Binary and XML Schema dictionary for the types added to it.
            
            Each object has a NamespaceURI which is used for both dictionaries. By default the same URI
            is used for the NodeIds created to represent the types, however, this can be overridden.
            
            When creating dictionaries the number of types should not get too large. The simplest way to 
            control this is to create a multiple dictionaries with different URIs. 
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.CreateGenericDataType(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.GenericDataType,System.UInt16)">
            <summary>
            Creates the nodes required to represent a generic data type in the address space,
            </summary>
            <param name="context">The request context.</param>
            <param name="dataType">The description of the data type to add.</param>
            <param name="namespaceIndex">The index of the namespace to use for any new NodeIds.</param>
            <remarks>
            The DataType, DefaultBinary Encoding, OPC Binary TypeDescription, DefaultXML Encoding and XML Schema TypeDescription Nodes are created.
            The NamespaceIndex overrides any namespace specified in the NodeIds defined in the data type object itself.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.BaseNodeManager.SupportedMethods">
            <summary>
            Gets the supported methods.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.GetNodeMetadata(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.BrowseHandle,UnifiedAutomation.UaServer.NodeMetadataMask,UnifiedAutomation.UaBase.NodeClass)">
            <summary>
            Gets the node metadata.
            </summary>
            <param name="context">The request context.</param>
            <param name="browseHandle">The browse handle.</param>
            <param name="fieldsToReturn">The fields to return.</param>
            <param name="nodeClassFilter">The node class filter.</param>
            <returns>
            The metadata with only the requested fields. null if the node does not have the requested node class.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.GetNodeAttributes(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.BrowseHandle,UnifiedAutomation.UaBase.NodeClass)">
            <summary>
            Gets the node attributes.
            </summary>
            <param name="context">The request context.</param>
            <param name="browseHandle">The browse handle.</param>
            <param name="expectedNodeClass">The expected node class.</param>
            <returns>
            The subtype of Node depending on the NodeClass. null if the node is not the expected node class.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.ReadAttribute(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.NodeAttributeHandle)">
            <summary>
            Reads the attribute.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodeHandle">The node handle.</param>
            <returns>
            The value of the requested attribute. Returns null if the attribute cannot be read with this method (meaning the I/O manager needs to be used).
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.ReadValue``1(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.NodeAttributeHandle,UnifiedAutomation.UaBase.QualifiedName,``0)">
            <summary>
            Reads the attribute value for a child node.
            </summary>
            <typeparam name="T">The data type of the attribute to read.</typeparam>
            <param name="context">The request context.</param>
            <param name="nodeHandle">The node handle.</param>
            <param name="componentName">Name of the component.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The value of the variable identified by the component name. The defaultValue if any error occurs.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.ReadValue``1(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.NodeAttributeHandle,UnifiedAutomation.UaBase.QualifiedName[],``0)">
            <summary>
            Reads the attribute value for a child node.
            </summary>
            <typeparam name="T">The data type of the value to read.</typeparam>
            <param name="context">The request context.</param>
            <param name="nodeHandle">The node handle.</param>
            <param name="browsePath">The browse path.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The value of the variable identified by the browse path. The defaultValue if any error occurs.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.WriteAttribute(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.NodeAttributeHandle,UnifiedAutomation.UaBase.Variant)">
            <summary>
            Writes the attribute.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodeHandle">The node handle.</param>
            <param name="valueToWrite">The value to write.</param>
            <returns>Writes the attribute. Returns null if the attribute cannot be written with this method (meaning the I/O manager needs to be used).</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.WriteValue(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.NodeAttributeHandle,UnifiedAutomation.UaBase.QualifiedName,UnifiedAutomation.UaBase.Variant)">
            <summary>
            Writes the attribute value for a child node.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodeHandle">The node handle.</param>
            <param name="componentName">Name of the component.</param>
            <param name="valueToWrite">The value to write.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.WriteValue(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.NodeAttributeHandle,UnifiedAutomation.UaBase.QualifiedName[],UnifiedAutomation.UaBase.Variant)">
            <summary>
            Writes the attribute value for a child node.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodeHandle">The node handle.</param>
            <param name="browsePath">The browse path.</param>
            <param name="valueToWrite">The value to write.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.CopyNode(UnifiedAutomation.UaBase.Node,System.Boolean)">
            <summary>
            Copies the node.
            </summary>
            <param name="source">The source.</param>
            <param name="copyValue">If set to <c>true</c>, the value is copied. If set to <c>false</c>, a reference to the value is returned.</param>
            <returns>A copy of the node.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.BeginHistoryReadDataTransaction(UnifiedAutomation.UaServer.RequestContext,System.UInt32,UnifiedAutomation.UaBase.TimestampsToReturn,UnifiedAutomation.UaServer.TransactionType,UnifiedAutomation.UaBase.HistoryReadDetails,System.Delegate,System.Object,UnifiedAutomation.UaServer.HistoryDataTransactionHandle@)">
            <summary>
            Begins the history transaction.
            </summary>
            <param name="context">The request context.</param>
            <param name="totalItemCountHint">The total item count hint.</param>
            <param name="timestampsToReturn">The timestamps to return.</param>
            <param name="transactionType">Type of the transaction.</param>
            <param name="details">The details.</param>
            <param name="callback">The callback called when an operation completes.</param>
            <param name="callbackData">The callback data.</param>
            <param name="handle">The historical data transaction handle.</param>
            <returns>Good, if the transaction could be created, an error code otherwise.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.FinishHistoryReadDataTransaction(UnifiedAutomation.UaServer.HistoryDataTransactionHandle)">
            <summary>
            Finishes the history transaction.
            </summary>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.BeginHistoryReadRaw(UnifiedAutomation.UaServer.HistoryDataOperationHandle,UnifiedAutomation.UaBase.HistoryReadValueId)">
            <summary>
            Begins an operation to read raw history data.
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <param name="valueToRead">The value to read.</param>
            <returns>Good, if successful; otherwise an error code.</returns>
            <remarks>If this method returns Good, the callback passed to BeginHistoryReadDataTransaction must be called when the operation completes.</remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.HistoryReadRaw(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.ReadRawModifiedDetails,UnifiedAutomation.UaServer.HistoryDataHandle,System.String,UnifiedAutomation.UaBase.QualifiedName,UnifiedAutomation.UaServer.HistoryContinuationPoint@)">
            <summary>
            Reads the raw history for a single variable.
            </summary>
            <param name="context">The request context.</param>
            <param name="details">The details.</param>
            <param name="nodeHandle">The node handle.</param>
            <param name="indexRange">The index range.</param>
            <param name="dataEncoding">The data encoding.</param>
            <param name="continuationPoint">The continuation point.</param>
            <returns>The result if the operation was processed. null if the operation needs to be processed as part of a batch in FinishHistoryReadDataTransaction.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.CreateHistoryContinuationPoint(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.ReadRawModifiedDetails,UnifiedAutomation.UaServer.HistoryDataHandle,System.String,UnifiedAutomation.UaBase.QualifiedName)">
            <summary>
            Creates the history continuation point.
            </summary>
            <param name="context">The context.</param>
            <param name="details">The details.</param>
            <param name="nodeHandle">The node handle.</param>
            <param name="indexRange">The index range.</param>
            <param name="dataEncoding">The data encoding.</param>
            <returns>The continuation point, null if there is no history data available for the node.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.HistoryReadRaw(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.HistoryDataTransactionHandle,UnifiedAutomation.UaBase.ReadRawModifiedDetails,System.Collections.Generic.IList{UnifiedAutomation.UaServer.HistoryDataOperationHandle},System.Collections.Generic.IList{UnifiedAutomation.UaBase.HistoryReadValueId},System.Collections.Generic.IList{UnifiedAutomation.UaServer.HistoryContinuationPoint})">
            <summary>
            Reads the raw history for a group of variables.
            </summary>
            <param name="context">The request context.</param>
            <param name="transaction">The transaction.</param>
            <param name="details">The details.</param>
            <param name="operationHandles">The operation handles.</param>
            <param name="valuesToRead">The values to read.</param>
            <param name="continuationPoints">The continuation points.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.BeginHistoryReadProcessed(UnifiedAutomation.UaServer.HistoryDataOperationHandle,UnifiedAutomation.UaBase.HistoryReadValueId)">
            <summary>
            Begins an operation to read processed history data.
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <param name="valueToRead">The value to read.</param>
            <returns>
            Good, if successful; otherwise an error code.
            </returns>
            <remarks>If this method returns Good, the callback passed to BeginHistoryReadDataTransaction must be called when the operation completes.</remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.HistoryReadProcessed(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.ReadProcessedDetails,UnifiedAutomation.UaServer.HistoryDataHandle,UnifiedAutomation.UaBase.NodeId,System.String,UnifiedAutomation.UaBase.QualifiedName,UnifiedAutomation.UaServer.HistoryContinuationPoint@)">
            <summary>
            Reads the processed history for a single variable.
            </summary>
            <param name="context">The request context.</param>
            <param name="details">The details.</param>
            <param name="nodeHandle">The node handle.</param>
            <param name="aggregateId">The aggregate id.</param>
            <param name="indexRange">The index range.</param>
            <param name="dataEncoding">The data encoding.</param>
            <param name="continuationPoint">The continuation point.</param>
            <returns>
            The result if the operation was processed. null if the operation needs to be processed as part of a batch in FinishHistoryReadDataTransaction.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.CreateHistoryContinuationPoint(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.ReadProcessedDetails,UnifiedAutomation.UaServer.HistoryDataHandle,System.String,UnifiedAutomation.UaBase.QualifiedName,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Creates the history continuation point.
            </summary>
            <param name="context">The context.</param>
            <param name="details">The details.</param>
            <param name="nodeHandle">The node handle.</param>
            <param name="indexRange">The index range.</param>
            <param name="dataEncoding">The data encoding.</param>
            <param name="aggregateId">The aggregate id.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.ReviseAggregateConfiguration(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.HistoryDataHandle,UnifiedAutomation.UaBase.AggregateConfiguration,System.Boolean@)">
            <summary>
            Revises the aggregate configuration.
            </summary>
            <param name="context">The context.</param>
            <param name="nodeHandle">The node handle.</param>
            <param name="configurationToUse">The configuration to use.</param>
            <param name="stepped">Whether the variable uses stepped or sloped interpolation.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.HistoryReadProcessed(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.HistoryDataTransactionHandle,UnifiedAutomation.UaBase.ReadProcessedDetails,System.Collections.Generic.IList{UnifiedAutomation.UaServer.HistoryDataOperationHandle},System.Collections.Generic.IList{UnifiedAutomation.UaBase.HistoryReadValueId},System.Collections.Generic.IList{UnifiedAutomation.UaServer.HistoryContinuationPoint})">
            <summary>
            Reads the processed history for a group of variables.
            </summary>
            <param name="context">The request context.</param>
            <param name="transaction">The transaction.</param>
            <param name="details">The details.</param>
            <param name="operationHandles">The operation handles.</param>
            <param name="valueToRead">The value to read.</param>
            <param name="continuationPoints">The continuation points.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.BeginHistoryReadAtTime(UnifiedAutomation.UaServer.HistoryDataOperationHandle,UnifiedAutomation.UaBase.HistoryReadValueId)">
            <summary>
            Begins an operation to read raw history data.
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <param name="valueToRead">The value to read.</param>
            <returns>
            Good, if successful; otherwise an error code.
            </returns>
            <remarks>If this method returns Good, the callback passed to BeginHistoryReadDataTransaction must be called when the operation completes.</remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.HistoryReadAtTime(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.ReadAtTimeDetails,UnifiedAutomation.UaServer.HistoryDataHandle,System.String,UnifiedAutomation.UaBase.QualifiedName,UnifiedAutomation.UaServer.HistoryContinuationPoint@)">
            <summary>
            Reads the history at specific time for a single variable.
            </summary>
            <param name="context">The request context.</param>
            <param name="details">The details.</param>
            <param name="nodeHandle">The node handle.</param>
            <param name="indexRange">The index range.</param>
            <param name="dataEncoding">The data encoding.</param>
            <param name="continuationPoint">The continuation point.</param>
            <returns>The result if the operation was processed. null if the operation needs to be processed as part of a batch in FinishHistoryReadDataTransaction.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.CreateHistoryContinuationPoint(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.ReadAtTimeDetails,UnifiedAutomation.UaServer.HistoryDataHandle,System.String,UnifiedAutomation.UaBase.QualifiedName)">
            <summary>
            Creates the history continuation point.
            </summary>
            <param name="context">The context.</param>
            <param name="details">The details.</param>
            <param name="nodeHandle">The node handle.</param>
            <param name="indexRange">The index range.</param>
            <param name="dataEncoding">The data encoding.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.HistoryReadAtTime(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.HistoryDataTransactionHandle,UnifiedAutomation.UaBase.ReadAtTimeDetails,System.Collections.Generic.IList{UnifiedAutomation.UaServer.HistoryDataOperationHandle},System.Collections.Generic.IList{UnifiedAutomation.UaBase.HistoryReadValueId},System.Collections.Generic.IList{UnifiedAutomation.UaServer.HistoryContinuationPoint})">
            <summary>
            Reads the history at specific time for a group of variables.
            </summary>
            <param name="context">The request context.</param>
            <param name="transaction">The transaction.</param>
            <param name="details">The details.</param>
            <param name="operationHandles">The operation handles.</param>
            <param name="valuesToRead">The values to read.</param>
            <param name="continuationPoints">The continuation points.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.BeginHistoryUpdateDataTransaction(UnifiedAutomation.UaServer.RequestContext,System.UInt32,UnifiedAutomation.UaServer.TransactionType,System.Delegate,System.Object,UnifiedAutomation.UaServer.HistoryDataTransactionHandle@)">
            <summary>
            Begins the history transaction.
            </summary>
            <param name="context">The request context.</param>
            <param name="totalItemCountHint">The total item count hint.</param>
            <param name="transactionType">Type of the transaction.</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <param name="handle">The historical data transaction handle.</param>
            <returns>Good, if the transaction could be created; an error code otherwise.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.FinishHistoryUpdateDataTransaction(UnifiedAutomation.UaServer.HistoryDataTransactionHandle)">
            <summary>
            Finishes the history transaction.
            </summary>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.BeginHistoryUpdateData(UnifiedAutomation.UaServer.HistoryDataOperationHandle,UnifiedAutomation.UaBase.UpdateDataDetails)">
            <summary>
            Begins an operation to update raw history data.
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <param name="details">The details.</param>
            <returns>Good, if successful; otherwise an error code.</returns>
            <remarks>If this method returns Good, the callback passed to BeginHistoryUpdateDataTransaction must be called when the operation completes.</remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.HistoryUpdateData(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.HistoryDataHandle,UnifiedAutomation.UaBase.UpdateDataDetails)">
            <summary>
            Updates the data history for a single variable.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodeHandle">The node handle.</param>
            <param name="details">The details.</param>
            <returns>The result if the operation was processed. null if the operation needs to be processed as part of a batch in FinishHistoryReadDataTransaction.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.HistoryUpdateData(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.HistoryDataTransactionHandle,System.Collections.Generic.IList{UnifiedAutomation.UaServer.HistoryDataOperationHandle},System.Collections.Generic.IList{UnifiedAutomation.UaBase.UpdateDataDetails})">
            <summary>
            Updates the data history for a group of variables.
            </summary>
            <param name="context">The request context.</param>
            <param name="transaction">The transaction.</param>
            <param name="operationHandles">The operation handles.</param>
            <param name="details">The details.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.BeginHistoryUpdateStructureData(UnifiedAutomation.UaServer.HistoryDataOperationHandle,UnifiedAutomation.UaBase.UpdateStructureDataDetails)">
            <summary>
            Begins an operation to update structured history data.
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <param name="details">The details.</param>
            <returns>Good, if successful; Otherwise an error code.</returns>
            <remarks>If this method returns Good, the callback passed to BeginHistoryUpdateDataTransaction must be called when the operation completes.</remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.HistoryUpdateStructureData(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.HistoryDataHandle,UnifiedAutomation.UaBase.UpdateStructureDataDetails)">
            <summary>
            Updates structured history data for a single variable.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodeHandle">The node handle.</param>
            <param name="details">The details.</param>
            <returns>The result if the operation was processed. null if the operation needs to be processed as part of a batch in FinishHistoryReadDataTransaction.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.HistoryUpdateStructureData(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.HistoryDataTransactionHandle,System.Collections.Generic.IList{UnifiedAutomation.UaServer.HistoryDataOperationHandle},System.Collections.Generic.IList{UnifiedAutomation.UaBase.UpdateStructureDataDetails})">
            <summary>
            Updates structured history data for a group of variables.
            </summary>
            <param name="context">The request context.</param>
            <param name="transaction">The transaction.</param>
            <param name="operationHandles">The operation handles.</param>
            <param name="details">The details.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.BeginHistoryDeleteRaw(UnifiedAutomation.UaServer.HistoryDataOperationHandle,UnifiedAutomation.UaBase.DeleteRawModifiedDetails)">
            <summary>
            Begins an operation to delete raw history data.
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <param name="details">The details.</param>
            <returns>
            Good, if successful; otherwise an error code.
            </returns>
            <remarks>If this method returns Good, the callback passed to BeginHistoryUpdateDataTransaction must be called when the operation completes.</remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.HistoryDeleteRaw(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.HistoryDataHandle,UnifiedAutomation.UaBase.DeleteRawModifiedDetails)">
            <summary>
            Delete raw history data for a single variable.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodeHandle">The node handle.</param>
            <param name="details">The details.</param>
            <returns>The result if the operation was processed. null if the operation needs to be processed as part of a batch in FinishHistoryReadDataTransaction.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.HistoryDeleteRaw(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.HistoryDataTransactionHandle,System.Collections.Generic.IList{UnifiedAutomation.UaServer.HistoryDataOperationHandle},System.Collections.Generic.IList{UnifiedAutomation.UaBase.DeleteRawModifiedDetails})">
            <summary>
            Delete raw history data for a group of variables.
            </summary>
            <param name="context">The request context.</param>
            <param name="transaction">The transaction.</param>
            <param name="operationHandles">The operation handles.</param>
            <param name="details">The details.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.BeginHistoryDeleteAtTime(UnifiedAutomation.UaServer.HistoryDataOperationHandle,UnifiedAutomation.UaBase.DeleteAtTimeDetails)">
            <summary>
            Begins an operation to delete history data at specific times.
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <param name="details"></param>
            <returns>
            Good, if successful; otherwise an error code.
            </returns>
            <remarks>If this method returns Good, the callback passed to BeginHistoryUpdateDataTransaction must be called when the operation completes.</remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.HistoryDeleteAtTime(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.HistoryDataHandle,UnifiedAutomation.UaBase.DeleteAtTimeDetails)">
            <summary>
            Deletes history data at specific times for a single variable.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodeHandle">The node handle.</param>
            <param name="details">The details.</param>
            <returns>The result if the operation was processed. null if the operation needs to be processed as part of a batch in FinishHistoryReadDataTransaction.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.HistoryDeleteAtTime(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.HistoryDataTransactionHandle,System.Collections.Generic.IList{UnifiedAutomation.UaServer.HistoryDataOperationHandle},System.Collections.Generic.IList{UnifiedAutomation.UaBase.DeleteAtTimeDetails})">
            <summary>
            Deletes history data at specific times for a group of variables.
            </summary>
            <param name="context">The request context.</param>
            <param name="transaction">The transaction.</param>
            <param name="operationHandles">The operation handles.</param>
            <param name="details">The details.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.LoadContinuationPoint(UnifiedAutomation.UaServer.RequestContext,System.Byte[])">
            <summary>
            Loads a history continuation point.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.SaveContinuationPoint(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.HistoryContinuationPoint)">
            <summary>
            Saves a history continuation point.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.Startup">
            <summary>
            Called when the node manager is started.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.Shutdown">
            <summary>
            Called when the node manager is stopped.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.SessionOpened(UnifiedAutomation.UaServer.Session)">
            <summary>
            Called when a new session is created.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.SessionActivated(UnifiedAutomation.UaServer.Session)">
            <summary>
            Called when a session is activated.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.SessionClosed(UnifiedAutomation.UaServer.Session)">
            <summary>
            Called when a new session is closed.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.GetBrowseHandle(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.ViewHandle,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.BrowseHandle@)">
            <summary>
            Gets the browse handle for the specified node.
            </summary>
            <param name="context">The request context.</param>
            <param name="view">The view.</param>
            <param name="nodeId">The node id.</param>
            <param name="handle">The handle.</param>
            <returns>
            Good if successful; An error code otherwise.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.GetViewHandle(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.ViewDescription,UnifiedAutomation.UaServer.ViewHandle@)">
            <summary>
            Gets the view handle for the specified view.
            </summary>
            <param name="context">The request context.</param>
            <param name="view">The view.</param>
            <param name="handle">The handle.</param>
            <returns>Good if successful; An error code otherwise.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.GetNodeHandle(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,System.UInt32,UnifiedAutomation.UaServer.NodeAttributeHandle@)">
            <summary>
            Gets the node handle for the specified node and attribute.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodeId">The node id.</param>
            <param name="attributeId">The attribute id.</param>
            <param name="handle">The handle.</param>
            <returns>
            Good if successful; An error code otherwise.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.GetNotifierHandle(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.NotifierHandle@)">
            <summary>
            Gets the notifier handle for the specified notifier.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodeId">The node id.</param>
            <param name="handle">The handle.</param>
            <returns>
            Good if successful; An error code otherwise.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.GetMethodHandle(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.MethodHandle@)">
            <summary>
            Gets the method handle for the specified object and method.
            </summary>
            <param name="context">The request context.</param>
            <param name="objectId">The object id.</param>
            <param name="methodId">The method id.</param>
            <param name="handle">The handle.</param>
            <returns>
            Good if successful; An error code otherwise.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.GetHistoryDataHandle(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.HistoryDataHandle@)">
            <summary>
            Gets the history data handle for the specified variable.
            </summary>
            <param name="context">The request context.</param>
            <param name="variableId">The variable id.</param>
            <param name="handle">The handle.</param>
            <returns>
            Good if successful; An error code otherwise.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.GetHistoryEventHandle(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.HistoryEventHandle@)">
            <summary>
            Gets the history events handle for the specified notifier.
            </summary>
            <param name="context">The request context.</param>
            <param name="notifierId">The notifier id.</param>
            <param name="handle">The handle.</param>
            <returns>
            Good if successful; An error code otherwise.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.BeginBrowse(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.BrowseOperationHandle,UnifiedAutomation.UaServer.ContinuationPoint,System.Boolean,System.Delegate,System.Object)">
            <summary>
            Begins a browse operation.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodeToBrowse">The node to browse.</param>
            <param name="continuationPoint">The continuation point.</param>
            <param name="releaseContinuationPoint">If set to <c>true</c>, [release continuation point].</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <returns>Good if successful; an error code otherwise.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.BeginTranslate(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.BrowseOperationHandle,UnifiedAutomation.UaBase.RelativePath,System.UInt32,System.Delegate,System.Object)">
            <summary>
            Begins a translate browse paths operation.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodeToBrowse">The node to browse.</param>
            <param name="relativePath">The relative path.</param>
            <param name="index">The index.</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <returns>Good if successful; An error code otherwise.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.AddCrossReference(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.INodeManager)">
            <summary>
            Adds the cross reference.
            </summary>
            <param name="sourceNodeId">The source node id.</param>
            <param name="manager">The manager.</param>
            <remarks>
            The source node is a node managed by the NodeManager being called. This method tells the
            NodeManager that references from the source exist in another NodeManager. When the source
            is browsed the NodeManager will call the BrowseCrossReference method on the NodeManger
            passed to this method.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.RemoveCrossReference(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.INodeManager)">
            <summary>
            Removes the cross reference.
            </summary>
            <param name="sourceNodeId">The source node id.</param>
            <param name="manager">The manager.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.BaseNodeManager.BrowseAsyncData">
            <summary>
            Stores data related to a browse operation.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.Browse(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.ContinuationPoint,System.Collections.Generic.List{UnifiedAutomation.UaBase.ReferenceDescription})">
            <summary>
            Browses the node specified in the continuation point.
            </summary>
            <param name="context">The context.</param>
            <param name="continuationPoint">The continuation point.</param>
            <param name="results">The results.</param>
            <returns>A new continuation point if the operation halts. null if the operation completes.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.ProcessReferences(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.ContinuationPoint,System.Collections.Generic.List{UnifiedAutomation.UaBase.ReferenceNode},System.Collections.Generic.List{UnifiedAutomation.UaBase.ReferenceDescription})">
            <summary>
            Processes the references in the list.
            </summary>
            /// <remarks>
            UserAccessManager.HasAccess is called in Server.InternalClient.GetNodeMetadata.
            So only references that are allowed are returned.
            </remarks>
            <param name="context">The request context.</param>
            <param name="continuationPoint">The continuation point.</param>
            <param name="references">The references.</param>
            <param name="results">The results.</param>
            <returns>A new continuation point if the operation halts. null if the operation completes.</returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.BaseNodeManager.TranslateAsyncData">
            <summary>
            Stores data related to a translate operation.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.BaseNodeManager.InternalContinuationPoint">
            <summary>
            A browse handle for nodes stored in memory.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.BaseNodeManager.BuiltInBrowseStage">
            <summary>
            The built-in handle types for the node manager.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.BaseNodeManager.BuiltInBrowseStage.Internal">
            <summary>
            Browsing nodes internal to the node manager.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.BaseNodeManager.BuiltInBrowseStage.External">
            <summary>
            Browsing nodes outside to the node manager.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.BaseNodeManager.BuiltInBrowseStage.VendorDefined">
            <summary>
            The first browse stage that can be used by a subclass.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.BaseNodeManager.DisableAttributeReadAccessCheck">
            <summary>
            Gets or sets a value indicating whether the access right check for ReadAttribute is disabled for in memory nodes.
            </summary>
            <value>
            <c>true</c> if access right check for ReadAttribute is disabled; otherwise, <c>false</c>.
            </value>
            <remarks>
            UserAccessMask.ReadAttribute has been added in SDK version 2.5. This enum value
            allows to control access to all attributes but the Value attribute. In older
            versions of the SDK all non-value attributes could be read. This property can be
            used to reset to old behavior.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.BeginDataTransaction(UnifiedAutomation.UaServer.RequestContext,System.UInt32,System.Double,UnifiedAutomation.UaBase.TimestampsToReturn,UnifiedAutomation.UaServer.TransactionType,System.Delegate,System.Object,UnifiedAutomation.UaServer.TransactionHandle@)">
            <summary>
            Begins the data transaction.
            </summary>
            <param name="context">The request context.</param>
            <param name="totalItemCountHint">The total item count hint.</param>
            <param name="maxAge">The max age.</param>
            <param name="timestampsToReturn">The timestamps to return.</param>
            <param name="transactionType">Type of the transaction.</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <param name="handle">The data transaction handle.</param>
            <returns>Good, if successful; otherwise an error code.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.FinishDataTransaction(UnifiedAutomation.UaServer.TransactionHandle)">
            <summary>
            Finishes the transaction.
            </summary>
            <param name="transaction">The transaction (the value returned from <see cref="M:UnifiedAutomation.UaServer.BaseNodeManager.BeginDataTransaction(UnifiedAutomation.UaServer.RequestContext,System.UInt32,System.Double,UnifiedAutomation.UaBase.TimestampsToReturn,UnifiedAutomation.UaServer.TransactionType,System.Delegate,System.Object,UnifiedAutomation.UaServer.TransactionHandle@)"/>).</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.BeginRead(UnifiedAutomation.UaServer.NodeAttributeOperationHandle,UnifiedAutomation.UaBase.ReadValueId)">
            <summary>
            Begins a read operation (must not block).
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <param name="settings">The settings.</param>
            <returns>Good, if successful; otherwise an error code.</returns>
            <remarks>If this method returns Good, the callback passed to BeginDataTransaction must be called when the operation completes.</remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.BeginWrite(UnifiedAutomation.UaServer.NodeAttributeOperationHandle,UnifiedAutomation.UaBase.WriteValue)">
            <summary>
            Begins the write.
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <param name="settings">The settings.</param>
            <returns>Good, if successful; otherwise an error code.</returns>
            <remarks>If this method returns Good, the callback passed to BeginDataTransaction must be called when the operation completes.</remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.BeginStartDataMonitoring(UnifiedAutomation.UaServer.NodeAttributeOperationHandle,System.UInt32,UnifiedAutomation.UaBase.MonitoredItemCreateRequest,UnifiedAutomation.UaServer.DataChangeEventHandler)">
            <summary>
            Begins a start data monitoring operation (must not block).
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <param name="monitoredItemId">The monitored item id.</param>
            <param name="settings">The settings.</param>
            <param name="callback">The callback.</param>
            <returns>Good, if successful; otherwise an error code.</returns>
            <remarks>If this method returns Good, the callback passed to BeginDataTransaction must be called when the operation completes.</remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.ValidateDataEncoding(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.NodeAttributeHandle,UnifiedAutomation.UaBase.QualifiedName)">
            <summary>
            Validates the data encoding.
            </summary>
            <param name="context">The context.</param>
            <param name="nodeHandle">The node handle.</param>
            <param name="dataEncoding">The data encoding.</param>
            <returns>Good if the encoding is valid; An error otherwise.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.BeginModifyDataMonitoring(UnifiedAutomation.UaServer.MonitoredItemOperationHandle,UnifiedAutomation.UaBase.MonitoredItemModifyRequest)">
            <summary>
            Begins a modify data operation (must not block).
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <param name="settings">The settings.</param>
            <returns>Good, if successful; otherwise an error code.</returns>
            <remarks>If this method returns Good, the callback passed to BeginDataTransaction must be called when the operation completes.</remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.BeginStopDataMonitoring(UnifiedAutomation.UaServer.MonitoredItemOperationHandle)">
            <summary>
            Begins a stop data monitoring operation (must not block).
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <returns>Good, if successful; otherwise an error code.</returns>
            <remarks>If this method returns Good, the callback passed to BeginDataTransaction must be called when the operation completes.</remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.BeginSetDataMonitoringMode(UnifiedAutomation.UaServer.MonitoredItemOperationHandle,UnifiedAutomation.UaBase.MonitoringMode,UnifiedAutomation.UaBase.MonitoringParameters)">
            <summary>
            Begins a set data monitoring mode operation (must not block).
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <param name="monitoringMode">The monitoring mode.</param>
            <param name="parameters">The parameters.</param>
            <returns>Good, if successful; otherwise an error code.</returns>
            <remarks>If this method returns Good, the callback passed to BeginDataTransaction must be called when the operation completes.</remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.FinishReadTransaction(UnifiedAutomation.UaServer.TransactionHandle)">
            <summary>
            Finishes the read transaction.
            </summary>
            <param name="transaction">The transaction (the value returned from <see cref="M:UnifiedAutomation.UaServer.BaseNodeManager.BeginDataTransaction(UnifiedAutomation.UaServer.RequestContext,System.UInt32,System.Double,UnifiedAutomation.UaBase.TimestampsToReturn,UnifiedAutomation.UaServer.TransactionType,System.Delegate,System.Object,UnifiedAutomation.UaServer.TransactionHandle@)"/>).</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.Read(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.NodeAttributeHandle,System.String,UnifiedAutomation.UaBase.QualifiedName)">
            <summary>
            Reads the attribute.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodeHandle">The node handle.</param>
            <param name="indexRange">The index range.</param>
            <param name="dataEncoding">The data encoding.</param>
            <returns>
            A value containing an error code if an error occurs. The attribute value otherwise.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.Read(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.TransactionHandle,System.Collections.Generic.IList{UnifiedAutomation.UaServer.NodeAttributeOperationHandle},System.Collections.Generic.IList{UnifiedAutomation.UaBase.ReadValueId})">
            <summary>
            Reads the attributes.
            </summary>
            <param name="context">The request context.</param>
            <param name="transaction">The transaction (the value returned from <see cref="M:UnifiedAutomation.UaServer.BaseNodeManager.BeginDataTransaction(UnifiedAutomation.UaServer.RequestContext,System.UInt32,System.Double,UnifiedAutomation.UaBase.TimestampsToReturn,UnifiedAutomation.UaServer.TransactionType,System.Delegate,System.Object,UnifiedAutomation.UaServer.TransactionHandle@)"/>).</param>
            <param name="operationHandles">The operation handles.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.ReadInMemoryNode(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.NodeAttributeHandle,System.String,UnifiedAutomation.UaBase.QualifiedName)">
            <summary>
            Reads the in memory node.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.Translate(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.DataValue)">
            <summary>
            Translates the specified text based on the strings stored in the ResourceManager.
            </summary>
            <param name="context">The request context.</param>
            <param name="dv">The value to translate..</param>
            <returns>The translated value.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.GetUserAccessLevel(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Gets the user access level.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodeId">The node id.</param>
            <returns>The user access level for the node id.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.ReadMappedNode(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.NodeAttributeHandle,System.String,UnifiedAutomation.UaBase.QualifiedName)">
            <summary>
            Reads the mapped node.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodeHandle">The node handle.</param>
            <param name="indexRange">The index range.</param>
            <param name="dataEncoding">The data encoding.</param>
            <returns>The value of the mapped node.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.ApplyIndexRangeAndEncoding(UnifiedAutomation.UaServer.NodeAttributeHandle,UnifiedAutomation.UaBase.DataValue,System.String,UnifiedAutomation.UaBase.QualifiedName)">
            <summary>
            Applies the index range and the encoding (modifies the input DataValue).
            </summary>
            <param name="handle">The handle.</param>
            <param name="input">The input.</param>
            <param name="indexRange">The index range.</param>
            <param name="dataEncoding">The data encoding.</param>
            <returns>A value containing an error code, if an error occurs. The modified input otherwise.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.ApplyIndexRangeAndEncoding(UnifiedAutomation.UaBase.DataValue,System.String,UnifiedAutomation.UaBase.QualifiedName)">
            <summary>
            Applies the index range and the encoding (modifies the input DataValue).
            </summary>
            <param name="input">The input.</param>
            <param name="indexRange">The index range.</param>
            <param name="dataEncoding">The data encoding.</param>
            <returns>The value after applying the index range and/or encoding. An error if the index range or encoding is invalid.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.ApplyDataEncoding(UnifiedAutomation.UaBase.DataValue,UnifiedAutomation.UaBase.QualifiedName)">
            <summary>
            Applies the data encoding (modifies the input DataValue).
            </summary>
            <param name="input">The input.</param>
            <param name="dataEncoding">The data encoding.</param>
            <returns>The value after applying the encoding. An error if the encoding is invalid.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.FinishWriteTransaction(UnifiedAutomation.UaServer.TransactionHandle)">
            <summary>
            Finishes the write transaction.
            </summary>
            <param name="transaction">The transaction (the value returned from <see cref="M:UnifiedAutomation.UaServer.BaseNodeManager.BeginDataTransaction(UnifiedAutomation.UaServer.RequestContext,System.UInt32,System.Double,UnifiedAutomation.UaBase.TimestampsToReturn,UnifiedAutomation.UaServer.TransactionType,System.Delegate,System.Object,UnifiedAutomation.UaServer.TransactionHandle@)"/>).</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.Write(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.NodeAttributeHandle,System.String,UnifiedAutomation.UaBase.DataValue)">
            <summary>
            Writes the value to a node attribute.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodeHandle">The node handle.</param>
            <param name="indexRange">The index range.</param>
            <param name="value">The value.</param>
            <returns>The value of the requested attribute. Returns null if the attribute cannot be written with this method (meaning the batch method must be used).</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.Write(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.TransactionHandle,System.Collections.Generic.IList{UnifiedAutomation.UaServer.NodeAttributeOperationHandle},System.Collections.Generic.IList{UnifiedAutomation.UaBase.WriteValue})">
            <summary>
            Writes a value to a group of node attributes.
            </summary>
            <param name="context">The request context.</param>
            <param name="transaction">The transaction (the value returned from <see cref="M:UnifiedAutomation.UaServer.BaseNodeManager.BeginDataTransaction(UnifiedAutomation.UaServer.RequestContext,System.UInt32,System.Double,UnifiedAutomation.UaBase.TimestampsToReturn,UnifiedAutomation.UaServer.TransactionType,System.Delegate,System.Object,UnifiedAutomation.UaServer.TransactionHandle@)"/>).</param>
            <param name="operationHandles">The operation handles.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.CanWriteDataType(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.NodeAttributeHandle,UnifiedAutomation.UaBase.DataValue)">
            <summary>
            Determines whether this instance can write a value with the specified data type to the node in the specified context.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodeHandle">The node handle.</param>
            <param name="value">The value.</param>
            <returns>Good, if a write is permitted; an error code otherwise.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.ReportDataChanges(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.NodeAttributeHandle)">
            <summary>
            Reports the data changes.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodeHandle">The node handle.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.WriteInMemoryNode(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.NodeAttributeHandle,System.String,UnifiedAutomation.UaBase.DataValue)">
            <summary>
            Writes the mapped node.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodeHandle">The node handle.</param>
            <param name="indexRange">The index range.</param>
            <param name="value">The value.</param>
            <returns>Good, if successful; an error code otherwise.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.FinishStartDataMonitoringTransaction(UnifiedAutomation.UaServer.TransactionHandle)">
            <summary>
            Finishes the start data monitoring transaction.
            </summary>
            <param name="transaction">The transaction (the value returned from <see cref="M:UnifiedAutomation.UaServer.BaseNodeManager.BeginDataTransaction(UnifiedAutomation.UaServer.RequestContext,System.UInt32,System.Double,UnifiedAutomation.UaBase.TimestampsToReturn,UnifiedAutomation.UaServer.TransactionType,System.Delegate,System.Object,UnifiedAutomation.UaServer.TransactionHandle@)"/>).</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.StartDataMonitoring(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MonitoredItemHandle,UnifiedAutomation.UaBase.MonitoredItemCreateRequest,UnifiedAutomation.UaServer.DataChangeEventHandler)">
            <summary>
            Start data monitoring for a single node attribute value.
            </summary>
            <remarks>
            Sends an initial DataChange if this operation does not return null and if
            Read(RequestContext context, NodeAttributeHandle nodeHandle, string indexRange,
            QualifiedName dataEncoding) does not return null.
            </remarks>
            <param name="context">The request context.</param>
            <param name="itemHandle">The item handle.</param>
            <param name="settings">The settings.</param>
            <param name="callback">The callback.</param>
            <returns>The result of the operation. Returns null if monitoring cannot be started with this method (meaning the batch method must be used).</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.StartDataMonitoring(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.TransactionHandle,System.Collections.Generic.IList{UnifiedAutomation.UaServer.NodeAttributeOperationHandle},System.Collections.Generic.IList{System.UInt32},System.Collections.Generic.IList{UnifiedAutomation.UaBase.MonitoredItemCreateRequest},System.Collections.Generic.IList{UnifiedAutomation.UaServer.DataChangeEventHandler})">
            <summary>
            Start data monitoring for a group of node attributes.
            </summary>
            <param name="context">The request context.</param>
            <param name="transaction">The transaction (the value returned from <see cref="M:UnifiedAutomation.UaServer.BaseNodeManager.BeginDataTransaction(UnifiedAutomation.UaServer.RequestContext,System.UInt32,System.Double,UnifiedAutomation.UaBase.TimestampsToReturn,UnifiedAutomation.UaServer.TransactionType,System.Delegate,System.Object,UnifiedAutomation.UaServer.TransactionHandle@)"/>).</param>
            <param name="operationHandles">The operation handles.</param>
            <param name="monitoredItemIds">The monitored item ids.</param>
            <param name="settings">The settings.</param>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.StartDataMonitoringInMemoryNode(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MonitoredItemHandle,UnifiedAutomation.UaBase.MonitoredItemCreateRequest,UnifiedAutomation.UaServer.DataChangeEventHandler,UnifiedAutomation.UaServer.DataMonitoringResult)">
            <summary>
            Starts the data monitoring in memory node.
            </summary>
            <param name="context">The request context.</param>
            <param name="itemHandle">The item handle.</param>
            <param name="request">The request.</param>
            <param name="callback">The callback.</param>
            <param name="result">The result.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.StartDataMonitoringSampledNode(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MonitoredItemHandle,UnifiedAutomation.UaBase.MonitoredItemCreateRequest,UnifiedAutomation.UaServer.DataChangeEventHandler,UnifiedAutomation.UaServer.DataMonitoringResult)">
            <summary>
            Starts the data monitoring of a mapped node.
            </summary>
            <param name="context">The request context.</param>
            <param name="itemHandle">The item handle.</param>
            <param name="request">The request.</param>
            <param name="callback">The callback.</param>
            <param name="result">The result.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.FinishModifyDataMonitoringTransaction(UnifiedAutomation.UaServer.TransactionHandle)">
            <summary>
            Finishes the modify data monitoring transaction.
            </summary>
            <param name="transaction">The transaction (the value returned from <see cref="M:UnifiedAutomation.UaServer.BaseNodeManager.BeginDataTransaction(UnifiedAutomation.UaServer.RequestContext,System.UInt32,System.Double,UnifiedAutomation.UaBase.TimestampsToReturn,UnifiedAutomation.UaServer.TransactionType,System.Delegate,System.Object,UnifiedAutomation.UaServer.TransactionHandle@)"/>).</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.ModifyDataMonitoring(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MonitoredItemHandle,UnifiedAutomation.UaBase.MonitoredItemModifyRequest)">
            <summary>
            Modifies data monitoring for a single node attribute value.
            </summary>
            <param name="context">The request context.</param>
            <param name="itemHandle">The item handle.</param>
            <param name="settings">The settings.</param>
            <returns>The result of the operation. Returns null if monitoring cannot be started with this method (meaning the batch method must be used).</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.ModifyDataMonitoring(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.TransactionHandle,System.Collections.Generic.IList{UnifiedAutomation.UaServer.MonitoredItemOperationHandle},System.Collections.Generic.IList{UnifiedAutomation.UaBase.MonitoredItemModifyRequest})">
            <summary>
            Modifies data monitoring for a group of node attribute values.
            </summary>
            <param name="context">The request context.</param>
            <param name="transaction">The transaction (the value returned from <see cref="M:UnifiedAutomation.UaServer.BaseNodeManager.BeginDataTransaction(UnifiedAutomation.UaServer.RequestContext,System.UInt32,System.Double,UnifiedAutomation.UaBase.TimestampsToReturn,UnifiedAutomation.UaServer.TransactionType,System.Delegate,System.Object,UnifiedAutomation.UaServer.TransactionHandle@)"/>).</param>
            <param name="operationHandles">The operation handles.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.ModifyDataMonitoringInMemoryNode(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MonitoredItemHandle,UnifiedAutomation.UaBase.MonitoredItemModifyRequest,UnifiedAutomation.UaServer.DataMonitoringResult)">
            <summary>
            Modifies data monitoring for an in memory node.
            </summary>
            <param name="context">The request context.</param>
            <param name="itemHandle">The item handle.</param>
            <param name="settings">The settings.</param>
            <param name="result">The result.</param>
            <returns>The result of the modify data monitoring operation.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.ModifyDataMonitoringSampledNode(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MonitoredItemHandle,UnifiedAutomation.UaBase.MonitoredItemModifyRequest,UnifiedAutomation.UaServer.DataMonitoringResult)">
            <summary>
            Modifies data monitoring for a mapped node.
            </summary>
            <param name="context">The request context.</param>
            <param name="itemHandle">The item handle.</param>
            <param name="settings">The settings.</param>
            <param name="result">The result.</param>
            <returns>The result of the modify data monitoring operation.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.FinishStopDataMonitoringTransaction(UnifiedAutomation.UaServer.TransactionHandle)">
            <summary>
            Finishes the stop data monitoring transaction.
            </summary>
            <param name="transaction">The transaction (the value returned from <see cref="M:UnifiedAutomation.UaServer.BaseNodeManager.BeginDataTransaction(UnifiedAutomation.UaServer.RequestContext,System.UInt32,System.Double,UnifiedAutomation.UaBase.TimestampsToReturn,UnifiedAutomation.UaServer.TransactionType,System.Delegate,System.Object,UnifiedAutomation.UaServer.TransactionHandle@)"/>).</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.StopDataMonitoring(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MonitoredItemHandle)">
            <summary>
            Stops the data monitoring for a single node attribute value.
            </summary>
            <param name="context">The request context.</param>
            <param name="itemHandle">The item handle.</param>
            <returns>The result of the operation. Returns null, if monitoring cannot be stopped with this method (meaning the batch method must be used).</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.StopDataMonitoring(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.TransactionHandle,System.Collections.Generic.IList{UnifiedAutomation.UaServer.MonitoredItemOperationHandle})">
            <summary>
            Stops the data monitoring for a group of node attribute values.
            </summary>
            <param name="context">The request context.</param>
            <param name="transaction">The transaction (the value returned from <see cref="M:UnifiedAutomation.UaServer.BaseNodeManager.BeginDataTransaction(UnifiedAutomation.UaServer.RequestContext,System.UInt32,System.Double,UnifiedAutomation.UaBase.TimestampsToReturn,UnifiedAutomation.UaServer.TransactionType,System.Delegate,System.Object,UnifiedAutomation.UaServer.TransactionHandle@)"/>).</param>
            <param name="operationHandles">The operation handles.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.StopDataMonitoringInMemoryNode(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MonitoredItemHandle)">
            <summary>
            Stops data monitoring for an in memory node.
            </summary>
            <param name="context">The request context.</param>
            <param name="itemHandle">The item handle.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.StopDataMonitoringSampledNode(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MonitoredItemHandle)">
            <summary>
            Stops data monitoring for an mapped node.
            </summary>
            <param name="context">The request context.</param>
            <param name="itemHandle">The item handle.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.FinishSetDataMonitoringModeTransaction(UnifiedAutomation.UaServer.TransactionHandle)">
            <summary>
            Finishes the set data monitoring mode  transaction.
            </summary>
            <param name="transaction">The transaction (the value returned from <see cref="M:UnifiedAutomation.UaServer.BaseNodeManager.BeginDataTransaction(UnifiedAutomation.UaServer.RequestContext,System.UInt32,System.Double,UnifiedAutomation.UaBase.TimestampsToReturn,UnifiedAutomation.UaServer.TransactionType,System.Delegate,System.Object,UnifiedAutomation.UaServer.TransactionHandle@)"/>).</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.SetDataMonitoringMode(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MonitoredItemHandle,UnifiedAutomation.UaBase.MonitoringMode,UnifiedAutomation.UaBase.MonitoringParameters)">
            <summary>
            Sets the monitoring mode for a single monitored item.
            </summary>
            <param name="context">The request context.</param>
            <param name="itemHandle">The item handle.</param>
            <param name="monitoringMode">The monitoring mode.</param>
            <param name="parameters">The parameters.</param>
            <returns>The result of the operation. Returns null if the monitoring mode cannot be changed with this method (meaning the batch method must be used).</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.SetDataMonitoringMode(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.TransactionHandle,System.Collections.Generic.IList{UnifiedAutomation.UaServer.MonitoredItemOperationHandle},System.Collections.Generic.IList{UnifiedAutomation.UaBase.MonitoringMode},System.Collections.Generic.IList{UnifiedAutomation.UaBase.MonitoringParameters})">
            <summary>
            Sets the monitoring mode for a group of monitored items.
            </summary>
            <param name="context">The request context.</param>
            <param name="transaction">The transaction (the value returned from <see cref="M:UnifiedAutomation.UaServer.BaseNodeManager.BeginDataTransaction(UnifiedAutomation.UaServer.RequestContext,System.UInt32,System.Double,UnifiedAutomation.UaBase.TimestampsToReturn,UnifiedAutomation.UaServer.TransactionType,System.Delegate,System.Object,UnifiedAutomation.UaServer.TransactionHandle@)"/>).</param>
            <param name="operationHandles">The operation handles.</param>
            <param name="monitoringModes">The monitoring modes.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.SetDataMonitoringModeInMemoryNode(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MonitoredItemHandle,UnifiedAutomation.UaBase.MonitoringMode,UnifiedAutomation.UaBase.MonitoringParameters)">
            <summary>
            Sets the monitoring mode for an in memory node.
            </summary>
            <param name="context">The request context.</param>
            <param name="itemHandle">The item handle.</param>
            <param name="monitoringMode">The monitoring mode.</param>
            <param name="parameters">The parameters.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.SetDataMonitoringModeSampledNode(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MonitoredItemHandle,UnifiedAutomation.UaBase.MonitoringMode,UnifiedAutomation.UaBase.MonitoringParameters)">
            <summary>
            Sets the monitoring mode for a mapped node.
            </summary>
            <param name="context">The request context.</param>
            <param name="itemHandle">The item handle.</param>
            <param name="monitoringMode">The monitoring mode.</param>
            <param name="parameters">The parameters.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.InMemoryNodeReadStarted(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.NodeAttributeHandle,UnifiedAutomation.UaBase.Node)">
            <summary>
            Called before an in-memory node is read.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodeHandle">The node handle.</param>
            <param name="node">The node.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.InMemoryNodeWriteCompleted(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.NodeAttributeHandle,UnifiedAutomation.UaBase.Node)">
            <summary>
            Called after an in-memory node is updated.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodeHandle">The node handle.</param>
            <param name="node">The node.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.InMemoryNodeMonitoringStarted(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.NodeAttributeHandle,System.Double)">
            <summary>
            Called when data monitoring starts.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodeHandle">The node handle.</param>
            <param name="samplingInterval">The sampling interval.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.InMemoryNodeMonitoringModified(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.NodeAttributeHandle,System.Double)">
            <summary>
            Called when data monitoring is modified.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodeHandle">The node handle.</param>
            <param name="samplingInterval">The sampling interval.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.InMemoryNodeMonitoringStopped(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.NodeAttributeHandle)">
            <summary>
            Called when data monitoring is stopped.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodeHandle">The node handle.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.BaseNodeManager.DataMonitoredItem">
            <summary>
            Stores the state for a monitored item for an in-memory node.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.BeginEventTransaction(UnifiedAutomation.UaServer.RequestContext,System.UInt32,UnifiedAutomation.UaServer.TransactionType,System.Delegate,System.Object,UnifiedAutomation.UaServer.TransactionHandle@)">
            <summary>
            Begins the transaction.
            </summary>
            <param name="context">The request context.</param>
            <param name="totalItemCountHint">The total item count hint.</param>
            <param name="transactionType">Type of the transaction.</param>
            <param name="callback">The callback to raise when an opereation completes.</param>
            <param name="callbackData">The callback data.</param>
            <param name="handle">The transaction handle.</param>
            <returns>Good, if the transaction could be created, an error code otherwise.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.FinishEventTransaction(UnifiedAutomation.UaServer.TransactionHandle)">
            <summary>
            Finishes the transaction.
            </summary>
            <param name="transaction">The transaction (the value returned from <see cref="M:UnifiedAutomation.UaServer.BaseNodeManager.BeginEventTransaction(UnifiedAutomation.UaServer.RequestContext,System.UInt32,UnifiedAutomation.UaServer.TransactionType,System.Delegate,System.Object,UnifiedAutomation.UaServer.TransactionHandle@)"/>).</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.BeginStartEventMonitoring(UnifiedAutomation.UaServer.NotifierOperationHandle,UnifiedAutomation.UaBase.MonitoredItemCreateRequest,System.UInt32,UnifiedAutomation.UaServer.EventNotificationEventHandler)">
            <summary>
            Starts monitoring an item.
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <param name="settings">The settings.</param>
            <param name="monitoredItemId">The monitored item id.</param>
            <param name="callback">The callback to use when events occur.</param>
            <returns>Good, if the monitored item can be created, an error code otherwise.</returns>
            <remarks>If this method returns Good, the callback passed to BeginTransaction must be called when the operation completes.</remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.BeginModifyEventMonitoring(UnifiedAutomation.UaServer.MonitoredItemOperationHandle,UnifiedAutomation.UaBase.MonitoredItemModifyRequest)">
            <summary>
            Modifies the monitoring for an item.
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <param name="settings">The settings.</param>
            <returns>Good, if the monitored item can be modified, an error code otherwise.</returns>
            <remarks>If this method returns Good, the callback passed to BeginTransaction must be called when the operation completes.</remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.BeginStopEventMonitoring(UnifiedAutomation.UaServer.MonitoredItemOperationHandle)">
            <summary>
            Stops monitoring an item.
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <returns>Good, if the monitored item can be modified, an error code otherwise.</returns>
            <remarks>If this method returns Good, the callback passed to BeginTransaction must be called when the operation completes.</remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.BeginSetEventMonitoringMode(UnifiedAutomation.UaServer.MonitoredItemOperationHandle,UnifiedAutomation.UaBase.MonitoringMode,UnifiedAutomation.UaBase.MonitoringParameters)">
            <summary>
            Changes the monitoring mode for an item.
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <param name="monitoringMode">The monitoring mode.</param>
            <param name="parameters">The parameters.</param>
            <returns>Good, if the monitored item can be modified; an error code otherwise.</returns>
            <remarks>If this method returns Good, the callback passed to BeginEventTransaction must be called when the operation completes.</remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.EventMonitoringStarted(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.MonitoredItemHandle,UnifiedAutomation.UaBase.MonitoringParameters,UnifiedAutomation.UaServer.EventNotificationEventHandler)">
            <summary>
            Called when monitoring starts for a notifier from another IEventManager higher in the hierarchy.
            </summary>
            <param name="context">The context.</param>
            <param name="notifierId">The id for the notifier in the other IEventManager.</param>
            <param name="itemHandle">The item handle.</param>
            <param name="parameters">The parameters.</param>
            <param name="callback">The callback to use when events occur.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.EventMonitoringModified(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.MonitoredItemHandle,UnifiedAutomation.UaBase.MonitoringParameters)">
            <summary>
            Called when monitoring changes for a notifier from another IEventManager higher in the hierarchy.
            </summary>
            <param name="context">The context.</param>
            <param name="notifierId">The id for the notifier in the other IEventManager.</param>
            <param name="itemHandle">The item handle.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.EventMonitoringStopped(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.MonitoredItemHandle)">
            <summary>
            Called when monitoring stops for a notifier from another IEventManager higher in the hierarchy.
            </summary>
            <param name="context">The context.</param>
            <param name="notifierId">The id for the notifier in the other IEventManager.</param>
            <param name="itemHandle">The item handle.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.ConditionRefresh(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.MonitoredItemHandle,UnifiedAutomation.UaServer.EventNotificationEventHandler)">
            <summary>
            Called when the condition refresh is called for a notifier higher in the hierarchy.
            </summary>
            <param name="context">The context.</param>
            <param name="notifierId">The id for the notifier.</param>
            <param name="itemHandle">The item handle.</param>
            <param name="callback">The callback to call with the current state of all conditions.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.AddNotifier(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.IEventManager)">
            <summary>
            Adds a link from an IEventManager to a notifier.
            </summary>
            <param name="notifierId">The notifier id.</param>
            <param name="manager">The event manager.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.RemoveNotifier(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.IEventManager)">
            <summary>
            Removes a link from IEventManager to a notifier.
            </summary>
            <param name="notifierId">The notifier id.</param>
            <param name="manager">The manager.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.ReportEvent(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Reports an event for the notifier id.
            </summary>
            <param name="notifierId">The notifier id.</param>
            <param name="e">The event.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.OnMonitoringStarted(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.EventMonitoredItem)">
            <summary>
            Called when event monitoring has started for a notifier.
            </summary>
            <param name="notifierId">The notifier id.</param>
            <param name="monitoredItem">The monitored item.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.OnMonitoringModified(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.EventMonitoredItem)">
            <summary>
            Called when event monitoring has been modified for a notifier.
            </summary>
            <param name="notifierId">The notifier id.</param>
            <param name="monitoredItem">The monitored item.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.OnMonitoringStopped(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.EventMonitoredItem)">
            <summary>
            Called when event monitoring has stopped for a notifier.
            </summary>
            <param name="notifierId">The notifier id.</param>
            <param name="monitoredItem">The monitored item.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.OnConditionRefresh(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.MonitoredItemHandle,UnifiedAutomation.UaServer.EventNotificationEventHandler)">
            <summary>
            Called when condition refresh has been called for the notifier.
            </summary>
            <param name="notifierId">The notifier id.</param>
            <param name="itemHandle">The item handle.</param>
            <param name="callback">The callback to use to report the current state of all conditions.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.Enable(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.ConditionModel)">
            <summary>
            Enables a condition.
            </summary>
            <param name="context">The request context.</param>
            <param name="model">The condition being enabled.</param>
            <returns>Good, if the condition was enabled successfully. False otherwise.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.Disable(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.ConditionModel)">
            <summary>
            Disables a condition.
            </summary>
            <param name="context">The request context.</param>
            <param name="model">The condition being disabled.</param>
            <returns>Good, if the condition was disabled successfully. False otherwise.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.AddComment(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.ConditionModel,System.Byte[],UnifiedAutomation.UaBase.LocalizedText)">
            <summary>
            Adds a comment to a condition.
            </summary>
            <param name="context">The request context.</param>
            <param name="model">The condition to add a comment to.</param>
            <param name="eventId">The event id.</param>
            <param name="comment">The comment.</param>
            <returns>
            Good, if the comment was added successfully. False otherwise.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.Acknowledge(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.AcknowledgeableConditionModel,System.Byte[],UnifiedAutomation.UaBase.LocalizedText)">
            <summary>
            Acknowledges a condition.
            </summary>
            <param name="context">The request context.</param>
            <param name="model">The condition being acknowledged.</param>
            <param name="eventId">The event id.</param>
            <param name="comment">The comment.</param>
            <returns>
            Good, if the condition was acknowledged successfully. False otherwise.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.Confirm(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.AcknowledgeableConditionModel,System.Byte[],UnifiedAutomation.UaBase.LocalizedText)">
            <summary>
            Confirms a condition.
            </summary>
            <param name="context">The request context.</param>
            <param name="model">The condition being confirmed.</param>
            <param name="eventId">The event id.</param>
            <param name="comment">The comment.</param>
            <returns>
            Good, if the condition was confirmed successfully. False otherwise.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.PlaceInService(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.AlarmConditionModel)">
            <summary>
            </summary>
            <param name="context">The request context.</param>
            <param name="model">The alarm to place in.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.RemoveFromService(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.AlarmConditionModel)">
            <summary>
            
            </summary>
            <param name="context">The request context.</param>
            <param name="model">The alarm to remove.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.Reset(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.AlarmConditionModel)">
            <summary>
            </summary>
            <param name="context">The request context.</param>
            <param name="model">The alarm to reset.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.Silence(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.AlarmConditionModel)">
            <summary>
            </summary>
            <param name="context">The request context.</param>
            <param name="model">The alarm to make silent.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.Suppress(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.AlarmConditionModel)">
            <summary>
            </summary>
            <param name="context">The request context.</param>
            <param name="model">The alarm to supress.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.Unsuppress(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.AlarmConditionModel)">
            <summary>
            </summary>
            <param name="context">The request context.</param>
            <param name="model">The alarm to unsupress.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.OneShotShelve(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.ShelvedStateMachineModel)">
            <summary>
            Shelves a condition until the next time it goes into the active state.
            </summary>
            <param name="context">The request context.</param>
            <param name="model">The state machine for the condition being shelved.</param>
            <returns>Good, if the condition was shelved successfully. False otherwise.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.TimedShelve(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.ShelvedStateMachineModel,System.Double)">
            <summary>
            Shelves a condition for a period of time.
            </summary>
            <param name="context">The request context.</param>
            <param name="model">The state machine for the condition being shelved.</param>
            <param name="shelvingTime">The shelving time.</param>
            <returns>
            Good, if the condition was shelved successfully. False otherwise.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.Unshelve(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.ShelvedStateMachineModel)">
            <summary>
            Unshelves a condition.
            </summary>
            <param name="context">The request context.</param>
            <param name="model">The state machine for the condition being shelved.</param>
            <returns>Good, if the condition was unshelved successfully. False otherwise.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.FinishStartEventMonitoringTransaction(UnifiedAutomation.UaServer.TransactionHandle)">
            <summary>
            Finishes the start event monitoring transaction.
            </summary>
            <param name="transaction">The transaction (the value returned from <see cref="M:UnifiedAutomation.UaServer.BaseNodeManager.BeginEventTransaction(UnifiedAutomation.UaServer.RequestContext,System.UInt32,UnifiedAutomation.UaServer.TransactionType,System.Delegate,System.Object,UnifiedAutomation.UaServer.TransactionHandle@)"/>).</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.StartEventMonitoring(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.NotifierHandle,System.UInt32,UnifiedAutomation.UaBase.MonitoredItemCreateRequest,UnifiedAutomation.UaServer.EventNotificationEventHandler)">
            <summary>
            Starts the event monitoring for a single item.
            </summary>
            <param name="context">The request context.</param>
            <param name="notifierHandle">The notifier handle.</param>
            <param name="monitoredItemId">The monitored item id.</param>
            <param name="settings">The settings.</param>
            <param name="callback">The callback to use when an event occurs.</param>
            <returns>null if the operation needs to be done as batch during FinishEventTransaction. non-null if the operation is complete.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.StartEventMonitoring(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.TransactionHandle,System.Collections.Generic.IList{UnifiedAutomation.UaServer.NotifierOperationHandle},System.Collections.Generic.IList{System.UInt32},System.Collections.Generic.IList{UnifiedAutomation.UaBase.MonitoredItemCreateRequest},System.Collections.Generic.IList{UnifiedAutomation.UaServer.EventNotificationEventHandler})">
            <summary>
            Starts the event monitoring for all unprocessed items in the transaction.
            </summary>
            <param name="context">The request context.</param>
            <param name="transaction">The transaction (the value returned from <see cref="M:UnifiedAutomation.UaServer.BaseNodeManager.BeginEventTransaction(UnifiedAutomation.UaServer.RequestContext,System.UInt32,UnifiedAutomation.UaServer.TransactionType,System.Delegate,System.Object,UnifiedAutomation.UaServer.TransactionHandle@)"/>).</param>
            <param name="notifierHandles">The notifier handles.</param>
            <param name="monitoredItemIds">The monitored item ids.</param>
            <param name="settings">The settings.</param>
            <param name="callbacks">The callbacks to use when an event occurs.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.ValidateEventMonitoringRequest(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.NotifierHandle,UnifiedAutomation.UaBase.ReadValueId,UnifiedAutomation.UaBase.MonitoringParameters)">
            <summary>
            Validates the event monitoring request.
            </summary>
            <param name="context">The request context.</param>
            <param name="notifierHandle">The notifier handle.</param>
            <param name="itemToMonitor">The item to monitor.</param>
            <param name="parameters">The parameters.</param>
            <returns>The result of the validation include detailed errors for the event filter.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.FinishModifyEventMonitoringTransaction(UnifiedAutomation.UaServer.TransactionHandle)">
            <summary>
            Finishes the modify event monitoring transaction.
            </summary>
            <param name="transaction">The transaction (the value returned from <see cref="M:UnifiedAutomation.UaServer.BaseNodeManager.BeginEventTransaction(UnifiedAutomation.UaServer.RequestContext,System.UInt32,UnifiedAutomation.UaServer.TransactionType,System.Delegate,System.Object,UnifiedAutomation.UaServer.TransactionHandle@)"/>).</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.ModifyEventMonitoring(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MonitoredItemOperationHandle,UnifiedAutomation.UaBase.MonitoredItemModifyRequest)">
            <summary>
            Modifies the event monitoring for a single item.
            </summary>
            <param name="context">The request context.</param>
            <param name="itemHandle">The item handle.</param>
            <param name="settings">The settings.</param>
            <returns>null if the operation needs to be done as batch during FinishEventTransaction. non-null if the operation is complete.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.ModifyEventMonitoring(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.TransactionHandle,System.Collections.Generic.IList{UnifiedAutomation.UaServer.MonitoredItemOperationHandle},System.Collections.Generic.IList{UnifiedAutomation.UaBase.MonitoredItemModifyRequest})">
            <summary>
            Modifies the event monitoring for all unprocessed items in the transaction.
            </summary>
            <param name="context">The request context.</param>
            <param name="transaction">The transaction (the value returned from <see cref="M:UnifiedAutomation.UaServer.BaseNodeManager.BeginEventTransaction(UnifiedAutomation.UaServer.RequestContext,System.UInt32,UnifiedAutomation.UaServer.TransactionType,System.Delegate,System.Object,UnifiedAutomation.UaServer.TransactionHandle@)"/>).</param>
            <param name="itemHandles">The item handles.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.FinishStopEventMonitoringTransaction(UnifiedAutomation.UaServer.TransactionHandle)">
            <summary>
            Finishes the stop event monitoring transaction.
            </summary>
            <param name="transaction">The transaction (the value returned from <see cref="M:UnifiedAutomation.UaServer.BaseNodeManager.BeginEventTransaction(UnifiedAutomation.UaServer.RequestContext,System.UInt32,UnifiedAutomation.UaServer.TransactionType,System.Delegate,System.Object,UnifiedAutomation.UaServer.TransactionHandle@)"/>).</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.StopEventMonitoring(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MonitoredItemOperationHandle)">
            <summary>
            Stops the event monitoring for a single item.
            </summary>
            <param name="context">The request context.</param>
            <param name="itemHandle">The item handle.</param>
            <returns>null if the operation needs to be done as batch during FinishEventTransaction. non-null if the operation is complete.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.StopEventMonitoring(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.TransactionHandle,System.Collections.Generic.IList{UnifiedAutomation.UaServer.MonitoredItemOperationHandle},System.Collections.Generic.IList{UnifiedAutomation.UaBase.MonitoredItemModifyRequest})">
            <summary>
            Stop the event monitoring for all unprocessed items in the transaction.
            </summary>
            <param name="context">The request context.</param>
            <param name="transaction">The transaction (the value returned from <see cref="M:UnifiedAutomation.UaServer.BaseNodeManager.BeginEventTransaction(UnifiedAutomation.UaServer.RequestContext,System.UInt32,UnifiedAutomation.UaServer.TransactionType,System.Delegate,System.Object,UnifiedAutomation.UaServer.TransactionHandle@)"/>).</param>
            <param name="itemHandles">The item handles.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.FinishSetEventMonitoringModeTransaction(UnifiedAutomation.UaServer.TransactionHandle)">
            <summary>
            Finishes the set event monitoring mode transaction.
            </summary>
            <param name="transaction">The transaction (the value returned from <see cref="M:UnifiedAutomation.UaServer.BaseNodeManager.BeginEventTransaction(UnifiedAutomation.UaServer.RequestContext,System.UInt32,UnifiedAutomation.UaServer.TransactionType,System.Delegate,System.Object,UnifiedAutomation.UaServer.TransactionHandle@)"/>).</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.SetEventMonitoringMode(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MonitoredItemOperationHandle,UnifiedAutomation.UaBase.MonitoringMode)">
            <summary>
            Changes the event monitoring mode for a single item.
            </summary>
            <param name="context">The request context.</param>
            <param name="itemHandle">The item handle.</param>
            <param name="monitoringMode">The monitoring mode.</param>
            <returns>null if the operation needs to be done as batch during FinishEventTransaction. non-null if the operation is complete.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.SetEventMonitoringMode(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.TransactionHandle,System.Collections.Generic.IList{UnifiedAutomation.UaServer.MonitoredItemOperationHandle},System.Collections.Generic.IList{UnifiedAutomation.UaBase.MonitoringMode})">
            <summary>
            Changes the event monitoring mode for all unprocessed items in the transaction.
            </summary>
            <param name="context">The request context.</param>
            <param name="transaction">The transaction (the value returned from <see cref="M:UnifiedAutomation.UaServer.BaseNodeManager.BeginEventTransaction(UnifiedAutomation.UaServer.RequestContext,System.UInt32,UnifiedAutomation.UaServer.TransactionType,System.Delegate,System.Object,UnifiedAutomation.UaServer.TransactionHandle@)"/>).</param>
            <param name="itemHandles">The item handles.</param>
            <param name="monitoringModes">The monitoring modes.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.AddNotifier(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId[])">
            <summary>
            Removes a local notifier.
            </summary>
            <param name="notifierId">The notifier id.</param>
            <param name="parents">The parents.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.IsNotifierForSource(UnifiedAutomation.UaServer.NotifierHandle,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Determines whether the notifier is above the source in the tree.
            </summary>
            <param name="notifierHandle">The notifier handle.</param>
            <param name="sourceId">The source id.</param>
            <returns>
            <c>true</c> if the notifier is above the source; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.BeginCallTransaction(UnifiedAutomation.UaServer.RequestContext,System.UInt32,UnifiedAutomation.UaServer.CallCompleteEventHandler,System.Object,UnifiedAutomation.UaServer.TransactionHandle@)">
            <summary>
            Begins the call transaction.
            </summary>
            <param name="context">The request context.</param>
            <param name="totalItemCountHint">The total item count hint.</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <param name="handle">The call transaction handle.</param>
            <returns>Good if the transaction could be created, an error code otherwise.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.BeginCall(UnifiedAutomation.UaServer.MethodOperationHandle,System.Collections.Generic.IList{UnifiedAutomation.UaBase.Variant})">
            <summary>
            Begins the method call.
            </summary>
            <param name="methodHandle">The method handle.</param>
            <param name="inputArguments">The input arguments.</param>
            <remarks>If this method returns Good, the callback passed to BeginCallTransaction must be called when the operation completes.</remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.FinishCallTransaction(UnifiedAutomation.UaServer.TransactionHandle)">
            <summary>
            Finishes the call transaction.
            </summary>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.GetMethodDispatcher(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MethodHandle)">
            <summary>
            Gets the method handler.
            </summary>
            <param name="context">The request context.</param>
            <param name="methodHandle">The method handle.</param>
            <returns>The method dispatcher. null if no handler is available.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.CallMethod(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MethodHandle,System.Collections.Generic.IList{UnifiedAutomation.UaBase.Variant})">
            <summary>
            Calls the method.
            </summary>
            <param name="context">The request context.</param>
            <param name="methodHandle">The method handle.</param>
            <param name="inputArguments">The input arguments.</param>
            <returns>The result of the operation including any output arguments.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.CallMethod(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MethodHandle,System.Collections.Generic.IList{UnifiedAutomation.UaBase.Variant},System.Collections.Generic.List{UnifiedAutomation.UaBase.StatusCode}@,System.Collections.Generic.List{UnifiedAutomation.UaBase.Variant}@)">
            <summary>
            Calls the method.
            </summary>
            <param name="context">The request context.</param>
            <param name="methodHandle">The method handle.</param>
            <param name="inputArguments">The input arguments.</param>
            <param name="inputArgumentResults">The input argument results.</param>
            <param name="outputArguments">The output arguments.</param>
            <returns>Good, if the call succeeded; an error code otherwise.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.AddNode(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.AddNodeSettings,UnifiedAutomation.UaBase.NodeId@)">
            <summary>
            Adds a new node.
            </summary>
            <param name="context">The request context.</param>
            <param name="settings">The settings.</param>
            <param name="assignedNodeId">The assigned node id.</param>
            <returns>
            Good if successful; Otherwise an error code.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.HasAccessToAddNode(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.BrowseHandle,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Determines whether the specified context has permision to add nodes.
            </summary>
            <param name="context">The context.</param>
            <param name="parent">The parent of the node to add.</param>
            <param name="referenceTypeId">The reference type from the parent to the node to add.</param>
            <param name="typeDefinitionId">The type definition of the node to add.</param>
            <returns><c>true</c>, if the context has permission; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.PersistAddedNode(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.Node)">
            <summary>
            Called when a new persistent node is added.
            </summary>
            <param name="context">The request context.</param>
            <param name="node">The node.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.DeleteNode(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,System.Boolean)">
            <summary>
            Deletes the node.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodeId">The node id.</param>
            <param name="deleteTargetReferences">If set to <c>true</c>, the references
            from other nodes to the node are deleted as well.</param>
            <returns>Good on success; an error code otherwise</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.CollectNodesToDelete(UnifiedAutomation.UaBase.Node,System.Collections.Generic.List{UnifiedAutomation.UaBase.Node})">
            <summary>
            Collects the nodes to delete. The children of the node are added to
            nodesToDelete recursicely.
            </summary>
            <param name="node">The node to delete.</param>
            <param name="nodesToDelete">The children of the node are added to this list.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.HasAccessToDeleteNode(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Determines whether the specified context has permision to delete nodes.
            </summary>
            <param name="context">The context</param>
            <param name="nodeToDelete">The node to delete.</param>
            <returns><c>true</c>, if the context has permission; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.PersistDeletedNode(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.Node)">
            <summary>
            Called when a new persistent node is deleted.
            </summary>
            <param name="context">The request context.</param>
            <param name="node">The node.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.BeforeNodesAdded(UnifiedAutomation.UaServer.RequestContext,System.Collections.Generic.IList{UnifiedAutomation.UaBase.Node})">
            <summary>
            This method can be reimplemented in a subclass. The method is called before nodes
            are added.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodes">The nodes.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.AfterNodesAdded(UnifiedAutomation.UaServer.RequestContext,System.Collections.Generic.IList{UnifiedAutomation.UaBase.Node})">
            <summary>
            This method can be reimplemented in a subclass. The method is called after nodes
            are added.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodes">The nodes.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.BeforeNodesDeleted(UnifiedAutomation.UaServer.RequestContext,System.Collections.Generic.IList{UnifiedAutomation.UaBase.Node})">
            <summary>
            This method can be reimplemented in a subclass. The method is called before nodes
            are deleted.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodes">The nodes.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.AfterNodesDeleted(UnifiedAutomation.UaServer.RequestContext,System.Collections.Generic.IList{UnifiedAutomation.UaBase.Node})">
            <summary>
            This method can be reimplemented in a subclass. The method is called after nodes
            are deleted.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodes">The nodes.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.AfterAddReference(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.Node,UnifiedAutomation.UaBase.NodeId,System.Boolean,UnifiedAutomation.UaBase.ExpandedNodeId)">
            <summary>
            This method can be reimplemented in a subclass. The method is called after adding
            a reference to a node.
            </summary>
            <param name="context">The request context.</param>
            <param name="node">The node.</param>
            <param name="referenceTypeId">The reference type id.</param>
            <param name="isInverse">Set to <c>true</c>, if the reference is an inverse reference.</param>
            <param name="targetId">The target id.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.AfterDeleteReference(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.Node,UnifiedAutomation.UaBase.NodeId,System.Boolean,UnifiedAutomation.UaBase.ExpandedNodeId)">
            <summary>
            This method can be reimplemented in a subclass. The method is called after deleting
            a reference.
            </summary>
            <param name="context">The request context.</param>
            <param name="node">The node.</param>
            <param name="referenceTypeId">The reference type id.</param>
            <param name="isInverse">Set to <c>true</c>, if the reference is an inverse reference.</param>
            <param name="targetId">The target id.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.AddReference(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,System.Boolean,UnifiedAutomation.UaBase.ExpandedNodeId,System.Boolean)">
            <summary>
            Adds a reference.
            </summary>
            <param name="context">The request context.</param>
            <param name="sourceNodeId">The source node id.</param>
            <param name="referenceTypeId">The reference type id.</param>
            <param name="isInverse">If set to <c>true</c>, then the reference is a inverse reference.</param>
            <param name="targetNodeId">The target node id.</param>
            <param name="addBiDirectional">If set to <c>true</c>, then the reverse reference is added as well.</param>
            <returns>Good if successful; Otherwise an error code.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.HasAccessToAddReference(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,System.Boolean)">
            <summary>
            Determines whether the specified context has permission to add the reference.
            </summary>
            <param name="context">The context.</param>
            <param name="sourceId">The source id.</param>
            <param name="referenceTypeId">The reference type id.</param>
            <param name="isInverse">If set to <c>true</c> [is inverse].</param>
            <returns>
            <c>true</c> if the context has permission; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.PersistAddedReference(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.Node,UnifiedAutomation.UaBase.ReferenceNode)">
            <summary>
            Called when a new persistent reference is added.
            </summary>
            <param name="context">The request context.</param>
            <param name="node">The node.</param>
            <param name="reference">The reference.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.DeleteReference(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,System.Boolean,UnifiedAutomation.UaBase.ExpandedNodeId,System.Boolean)">
            <summary>
            Deletes the reference.
            </summary>
            <param name="context">The request context.</param>
            <param name="sourceNodeId">The source node id.</param>
            <param name="referenceTypeId">The reference type id.</param>
            <param name="isInverse">If set to <c>true</c> then the reference is a inverse reference.</param>
            <param name="targetNodeId">The target node id.</param>
            <param name="deleteBiDirectional">If set to <c>true</c> then the reverse reference is deleted as well.</param>
            <returns>
            Good if the reference was added. Otherwise an error code.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.HasAccessToDeleteReference(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,System.Boolean)">
            <summary>
            Determines whether the specified context has permission to delete the reference.
            </summary>
            <param name="context">The context.</param>
            <param name="sourceId">The source id.</param>
            <param name="referenceTypeId">The reference type id.</param>
            <param name="isInverse">If set to <c>true</c>, the reference is inverse.</param>
            <returns>
            <c>true</c>, if the context has permission; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.PersistDeletedReference(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.Node,UnifiedAutomation.UaBase.ReferenceNode)">
            <summary>
            Called when a new persistent reference is deleted.
            </summary>
            <param name="context">The request context.</param>
            <param name="node">The node.</param>
            <param name="reference">The reference.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.BaseNodeManager.NodeIdGenerationSettings">
            <summary>
            Gets the node id generation settings.
            </summary>
            <value>
            The node id generation settings.
            </value>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.CreateObject(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.CreateObjectSettings)">
            <summary>
            Creates a new object node.
            </summary>
            <param name="context">The request context.</param>
            <param name="settings">The settings.</param>
            <returns>The new object node.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.CreateVariable(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.CreateVariableSettings)">
            <summary>
            Creates a new variable node.
            </summary>
            <param name="context">The request context.</param>
            <param name="settings">The settings.</param>
            <returns>The new variable node.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.CreateMethod(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.CreateMethodSettings)">
            <summary>
            Creates a new method node.
            </summary>
            <param name="context">The request context.</param>
            <param name="settings">The settings.</param>
            <returns>The new method node.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.CreateView(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.CreateViewSettings)">
            <summary>
            Creates a new view node.
            </summary>
            <param name="context">The request context.</param>
            <param name="settings">The settings.</param>
            <returns>The new view node.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.CreateObjectTypeNode(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.CreateObjectTypeSettings)">
            <summary>
            Creates a new object type node.
            </summary>
            <param name="context">The request context.</param>
            <param name="settings">The settings.</param>
            <returns>The new object type node.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.CreateVariableTypeNode(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.CreateVariableTypeSettings)">
            <summary>
            Creates a new variable type node.
            </summary>
            <param name="context">The request context.</param>
            <param name="settings">The settings.</param>
            <returns>The new variable type node.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.CreateDataTypeNode(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.CreateDataTypeSettings)">
            <summary>
            Creates a new data type node.
            </summary>
            <param name="context">The request context.</param>
            <param name="settings">
            The information about the DataType node.
            If DataTypeDefinition is a StructureDefinitionSettings, the properties DataTypeNode and
            SuperTypeId of StructureDefinitionSettings are set. DefinitionHelper is set to this NodeManager
            if not set yet.
            </param>
            <returns>The new data type node.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.CreateReferenceTypeNode(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.CreateReferenceTypeSettings)">
            <summary>
            Creates a new reference type node.
            </summary>
            <param name="context">The request context.</param>
            <param name="settings">The settings.</param>
            <returns>The new reference type node.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.EncodingId(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.QualifiedName)">
            <summary>
            </summary>
            <param name="dataTypeId"></param>
            <param name="encodingName"></param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.StructureFields(UnifiedAutomation.UaBase.NodeId)">
            <summary>
            </summary>
            <param name="dataTypeId"></param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.CreateNodeId(System.Boolean,System.UInt16)">
            <summary>
            Creates a new node id.
            </summary>
            <param name="persistent">If set to <c>true</c>, the node will be persisted.</param>
            <param name="namespaceIndex">Index of the namespace.</param>
            <returns>The new node id.</returns>
            <remarks>
            The persistent flag indicates that the NodeId will be saved are used after a server restart.
            This may affect the creation of the NodeId in the subclass. It has no effect on the default implementation.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.CreateNodeId(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.QualifiedName,UnifiedAutomation.UaBase.NodeClass,System.UInt16)">
            <summary>
            Creates a new NodeId.
            </summary>
            <remarks>
            This method can be overrided to get influence on auto generated NodeIds.
            </remarks>
            <param name="parentNodeId">
            The NodeId of the parent node. This argument can be null.
            This argument can be used to construct the new NodeId from the NodeId of the parent.
            The default implementation ignores this argument.
            </param>
            <param name="browseName">
            The BrowseName of the node that shall get a new NodeId.
            This argument can be used to construct the new NodeId.
            The default implementation ignores this argument.
            </param>
            <param name="nodeClass">
            The NodeClass of the node that shall get a new NodeId.
            The default implementation ignores this argument.
            </param>
            <param name="namespaceIndex">
            The NamespaceIndex of the new NodeId.
            </param>
            <returns>The new NodeId.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.BeginHistoryReadEventTransaction(UnifiedAutomation.UaServer.RequestContext,System.UInt32,UnifiedAutomation.UaServer.TransactionType,UnifiedAutomation.UaBase.ReadEventDetails,System.Delegate,System.Object,UnifiedAutomation.UaServer.HistoryEventTransactionHandle@)">
            <summary>
            Begins the event history transaction.
            </summary>
            <param name="context">The request context.</param>
            <param name="totalItemCountHint">The total item count hint.</param>
            <param name="transactionType">Type of the transaction.</param>
            <param name="details">The details.</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <param name="handle">The historical event transaction handle.</param>
            <returns>Good, if the transaction could be created; an error code otherwise.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.FinishHistoryReadEventTransaction(UnifiedAutomation.UaServer.HistoryEventTransactionHandle)">
            <summary>
            Finishes the event history transaction.
            </summary>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.BeginHistoryReadEvent(UnifiedAutomation.UaServer.HistoryEventOperationHandle,UnifiedAutomation.UaBase.HistoryReadValueId)">
            <summary>
            Begins an operation to read event history.
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <param name="notifierToRead">The notifier to read.</param>
            <returns>Good, if successful; Otherwise an error code.</returns>
            <remarks>If this method returns Good the callback passed to BeginHistoryReadEventTransaction must be called when the operation completes.</remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.HistoryReadEvent(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.ReadEventDetails,UnifiedAutomation.UaServer.HistoryEventHandle,UnifiedAutomation.UaServer.HistoryContinuationPoint@)">
            <summary>
            Reads the event history for a single notifier.
            </summary>
            <param name="context">The request context.</param>
            <param name="details">The details.</param>
            <param name="nodeHandle">The node handle.</param>
            <param name="continuationPoint">The continuation point.</param>
            <returns>
            The result if the operation was processed. null if the operation needs to be processed as part of a batch in FinishHistoryReadEventTransaction.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.HistoryReadEvent(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.HistoryEventTransactionHandle,UnifiedAutomation.UaBase.ReadEventDetails,System.Collections.Generic.IList{UnifiedAutomation.UaServer.HistoryEventOperationHandle},System.Collections.Generic.IList{UnifiedAutomation.UaBase.HistoryReadValueId},System.Collections.Generic.IList{UnifiedAutomation.UaServer.HistoryContinuationPoint})">
            <summary>
            Reads the event history for a group of notifiers.
            </summary>
            <param name="context">The request context.</param>
            <param name="transaction">The transaction.</param>
            <param name="details">The details.</param>
            <param name="operationHandles">The operation handles.</param>
            <param name="notifiersToRead">The notifiers to read.</param>
            <param name="continuationPoints">The continuation points.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.BeginHistoryUpdateEventTransaction(UnifiedAutomation.UaServer.RequestContext,System.UInt32,UnifiedAutomation.UaServer.TransactionType,System.Delegate,System.Object,UnifiedAutomation.UaServer.HistoryEventTransactionHandle@)">
            <summary>
            Begins the history transaction.
            </summary>
            <param name="context">The request context.</param>
            <param name="totalItemCountHint">The total item count hint.</param>
            <param name="transactionType">Type of the transaction.</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <param name="handle">The handle.</param>
            <returns>Good, if the transaction could be created; an error code otherwise.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.FinishHistoryUpdateEventTransaction(UnifiedAutomation.UaServer.HistoryEventTransactionHandle)">
            <summary>
            Finishes the history event transaction.
            </summary>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.BeginHistoryUpdateEvent(UnifiedAutomation.UaServer.HistoryEventOperationHandle,UnifiedAutomation.UaBase.UpdateEventDetails)">
            <summary>
            Begins the history update event.
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <param name="details">The details.</param>
            <returns>Good, if the transaction could be created; an error code otherwise.</returns>
            <remarks>If this method returns Good, the callback passed to BeginHistoryUpdateEventTransaction must be called when the operation completes.</remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.HistoryUpdateEvent(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.HistoryEventHandle,UnifiedAutomation.UaBase.UpdateEventDetails)">
            <summary>
            Updates the event history for a single notifier.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodeHandle">The node handle.</param>
            <param name="details">The details.</param>
            <returns>The result if the operation was processed. null if the operation needs to be processed as part of a batch in FinishHistoryUpdateEventTransaction.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.HistoryUpdateEvents(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.HistoryEventTransactionHandle,System.Collections.Generic.IList{UnifiedAutomation.UaServer.HistoryEventOperationHandle},System.Collections.Generic.IList{UnifiedAutomation.UaBase.UpdateEventDetails})">
            <summary>
            Updates the event history for a group of notifiers.
            </summary>
            <param name="context">The request context.</param>
            <param name="transaction">The transaction.</param>
            <param name="operationHandles">The operation handles.</param>
            <param name="details">The details.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.BeginHistoryDeleteEvent(UnifiedAutomation.UaServer.HistoryEventOperationHandle,UnifiedAutomation.UaBase.DeleteEventDetails)">
            <summary>
            Begins an operation to delete event history.
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <param name="details">The details.</param>
            <returns>Good, if successful; otherwise an error code.</returns>
            <remarks>If this method returns Good, the callback passed to BeginHistoryUpdateEventTransaction must be called when the operation completes.</remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.HistoryDeleteEvent(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.HistoryEventHandle,UnifiedAutomation.UaBase.DeleteEventDetails)">
            <summary>
            Deletes event history for a single notifier.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodeHandle">The node handle.</param>
            <param name="details">The details.</param>
            <returns>The result if the operation was processed. null if the operation needs to be processed as part of a batch in FinishHistoryUpdateEventTransaction.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.HistoryDeleteEvents(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.HistoryEventTransactionHandle,System.Collections.Generic.IList{UnifiedAutomation.UaServer.HistoryEventOperationHandle},System.Collections.Generic.IList{UnifiedAutomation.UaBase.DeleteEventDetails})">
            <summary>
            Deletes event history for a group of notifiers.
            </summary>
            <param name="context">The request context.</param>
            <param name="transaction">The transaction.</param>
            <param name="operationHandles">The operation handles.</param>
            <param name="details">The details.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.#ctor(UnifiedAutomation.UaServer.ServerManager,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.BaseNodeManager"/> class.
            </summary>
            <param name="server">The server.</param>
            <param name="namespaceUris">The namespace uris.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.Dispose">
            <summary>
            Frees any unmanaged resources.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.Dispose(System.Boolean)">
            <summary>
            An overrideable version of the Dispose.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.BaseNodeManager.DefaultPermissions">
            <summary>
            THe default permissions for nodes managed by the node manager.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.BaseNodeManager.NamespaceIndexes">
            <summary>
            Gets the namespace indexes supported by the node manager.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.BaseNodeManager.NamespaceUris">
            <summary>
            Gets the namespace uris supported by the node manager.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.BaseNodeManager.DefaultNamespaceIndex">
            <summary>
            Gets or sets the default namespace index.
            </summary>
            <value>
            The default namespace index.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.BaseNodeManager.Server">
            <summary>
            Gets the server manager.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.BaseNodeManager.InMemoryNodeLock">
            <summary>
            Gets the lock to use when accessing the memory nodes.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.BaseNodeManager.InMemoryNodes">
            <summary>
            Gets the set of in memory nodes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.AddNamespaceUri(System.String)">
            <summary>
            Adds the namespace URI.
            </summary>
            <param name="namespaceUri">The namespace URI.</param>
            <returns>The index assigned to the namespace URI.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.IsNodeIdInvalid(UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Determines whether the node id is invalid.
            </summary>
            <param name="nodeId">The node id.</param>
            <returns>
            <c>true</c> if the is node id invalid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.IsNodeIdInvalid(UnifiedAutomation.UaBase.ExpandedNodeId)">
            <summary>
            Determines whether the node id is invalid.
            </summary>
            <returns>
            <c>true</c> if the is node id invalid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.LinkModelToNode(UnifiedAutomation.UaBase.NodeId,System.Object,System.Object,UnifiedAutomation.UaBase.IModelMapper,System.Double)">
             <summary>
             Links an object to a node in the address space. This method can be used if the values
             of the children are stored in a single instance of a class.
             The values of instance can be accessed by using the specified mapper.
             </summary>
             <remarks>
             The UserData property of the node will be used to store the instance. So this property
             must not be set after LinkModelToNode called. This method overwrites the old value of
             UserData.
            
             When calling this method, the NodeHandleType of the children of the node in addressspace
             with NodeClass Variable is set to InternalPolled.
             </remarks>
             <param name="rootId">The NodeId of the instance in address space.</param>
             <param name="instance">The instance of the ModelControllerBase class.</param>
             <param name="syncLock">The sync lock for reading and writing the child nodes.
             If null, the mapped child node will be used.</param>
             <param name="mapper">The mapper (if null a reflection based mapper is used).</param>
             <param name="minimumSamplingInterval">The minimum sampling interval that will be set as
             node attribute for children.</param>
             <returns>
             A handle that can be used to unlink the node.
             </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.UnlinkModelFromNode(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.ModelHandle)">
            <summary>
            Unlinks an object from a node in the address space.
            </summary>
            <param name="rootId">The root id.</param>
            <param name="handle">The handle.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.BaseNodeManager.MappedNode">
            <summary>
            A class that maps an object to a node.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.BaseNodeManager.MappedNode.Lock">
            <summary>
            An object used for synchronization
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.BaseNodeManager.MappedNode.Mapper">
            <summary>
            The mapper used to get and set the value
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.BaseNodeManager.MappedNode.Mapping">
            <summary>
            The object with the node data
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.IsReferenceInView(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.ViewHandle,UnifiedAutomation.UaServer.BrowseHandle,UnifiedAutomation.UaBase.NodeId,System.Boolean,UnifiedAutomation.UaBase.ExpandedNodeId)">
            <summary>
            Determines whether the reference is in the specified view.
            </summary>
            <param name="context">The request context.</param>
            <param name="view">The view.</param>
            <param name="sourceHandle">The source handle.</param>
            <param name="referenceTypeId">The reference type id.</param>
            <param name="isInverse">if set to <c>true</c> then the reference is an inverse reference.</param>
            <param name="targetId">The target id.</param>
            <returns>
            <c>true</c> if the reference is in the view; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.HasAccess(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.BrowseHandle)">
            <summary>
            Determines whether the specified context has access to the browse handle.
            </summary>
            <param name="context">The request context.</param>
            <param name="browseHandle">The browse handle.</param>
            <returns>
            <c>true</c> if the specified context has access; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.HasAccess(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MethodHandle)">
            <summary>
            Determines whether the specified context has access to the browse handle.
            </summary>
            <param name="context">The request context.</param>
            <param name="methodHandle">The method handle.</param>
            <returns>
            <c>true</c> if the specified context has access; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.HasAccess(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.NodeAttributeHandle,UnifiedAutomation.UaServer.UserAccessMask)">
            <summary>
            Determines whether the current context has specified access to the handle.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodeHandle">The node handle.</param>
            <param name="accessMasks">The desired access masks.</param>
            <returns>
            <c>true</c>, if the specified context has access; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.HasAccess(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.HistoryDataHandle,UnifiedAutomation.UaServer.UserAccessMask)">
            <summary>
            Determines whether the specified context has access to the history data handle.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodeHandle">The node handle.</param>
            <param name="accessMasks">The desired access masks.</param>
            <returns>
            <c>true</c>, if the specified context has access; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.HasAccess(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.HistoryEventHandle,UnifiedAutomation.UaServer.UserAccessMask)">
            <summary>
            Determines whether the specified context has access to the history event handle.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodeHandle">The node handle.</param>
            <param name="accessMasks"></param>
            <returns>
            <c>true</c> if the specified context has access; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.ImportUaNodeset(System.Reflection.Assembly,System.String)">
            <summary>
            Imports the nodeset from an embedded resource.
            </summary>
            <param name="assembly">The assembly (if null the calling assembly is used).</param>
            <param name="resourcePath">The resource path.</param>
            <remarks>
            If an exact match is not found the first resource with a path that ends with the resourcePath is used.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.ImportUaNodeset(System.IO.FileInfo)">
            <summary>
            Imports the ua nodeset from a file.
            </summary>
            <param name="file">The file.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.ImportUaNodeset(System.IO.Stream)">
            <summary>
            Imports the nodes from the stream.
            </summary>
            <param name="istrm">The istrm.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.ImportUaNodeset(UnifiedAutomation.UaSchema.UANodeSet)">
            <summary>
            Imports the specified nodeset.
            </summary>
            <param name="nodeset">The nodeset.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.Import(System.Collections.Generic.List{UnifiedAutomation.UaBase.Node})">
            <summary>
            Imports the list of nodes.
            </summary>
            <param name="nodes">The nodes.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.AddReverseReferences(UnifiedAutomation.UaServer.RequestContext,System.Collections.Generic.List{UnifiedAutomation.UaBase.Node})">
            <summary>
            Adds the reverse reference.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.AddReverseReference(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.Node,UnifiedAutomation.UaBase.ReferenceNode)">
            <summary>
            Adds a reverse reference.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.SetMethodDispatcher(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.IMethodDispatcher)">
            <summary>
            Sets the method dispatcher for a method.
            </summary>
            <param name="methodId">The method id.</param>
            <param name="dispatcher">The dispatcher. If NULL any existing dispatcher is removed.</param>
            <remarks>
            This method overrides the default behavoir for selecting method dispatchers (e.g. overriding the
            GetMethodDispatcher method or by linking an Objects with Methods to a model object). 
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.SetNodePermissions(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.INodeAccessInfo,System.Boolean)">
            <summary>
            Sets the permissions for a node.
            </summary>
            <param name="nodeId">The node id.</param>
            <param name="permissions">The permissions for the node.</param>
            <param name="recursive">True if the permissions should be applied to all child nodes; false otherwise.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.SetNodePermissions(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.QualifiedName,UnifiedAutomation.UaBase.INodeAccessInfo)">
            <summary>
            Sets the permissions for a node.
            </summary>
            <param name="parentId">The parent id.</param>
            <param name="browseName">The browse name of the variable.</param>
            <param name="permissions">The permissions for the node.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.GetNodePermission(UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Returns the permissions for a node.
            </summary>
            <param name="nodeId">NodeId of the node.</param>
            <returns>The permissions for the specified node. null if no node with nodeId
            does snot exist in the NodeManager.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.GetNodeUserData(UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Gets the user data for a node.
            </summary>
            <param name="nodeId">The node id.</param>
            <returns>The user data for the node.</returns>
            <remarks>
            The user data for a Node passed as the NodeData in all handles created by the NodeManager.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.SetNodeUserData(UnifiedAutomation.UaBase.NodeId,System.Object)">
            <summary>
            Sets the user data for a node.
            </summary>
            <param name="nodeId">The node id.</param>
            <param name="userData">The user data.</param>
            <remarks>
            The user data for a Node passed as the NodeData in all handles created by the NodeManager.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.SetChildUserData(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.QualifiedName,System.Object)">
            <summary>
            Sets the user data for the child of a node.
            </summary>
            <param name="parentId">The parent id.</param>
            <param name="browseName">The browse name of the child.</param>
            <param name="userData">The user data.</param>
            <remarks>
            The user data for a Node passed as the NodeData in all handles created by the NodeManager.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.SetVariableConfiguration(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.QualifiedName,System.UInt32,System.Object)">
            <summary>
            Sets the variable configuration.
            </summary>
            <param name="parentId">The parent id.</param>
            <param name="browseName">The browse name of the variable.</param>
            <param name="handleType">Type of the handle.</param>
            <param name="handleData">The handle data.</param>
            <returns>The variable if found. null if it could not be found.</returns>
            <remarks>
            The variable configuration controls how the NodeManager handles I/O for the variable value.
            The NodeHandleType defines standard values which can be passed as the handleType.
            The handleData is passed as the UserData when the NodeAttributeHandle.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.SetVariableConfiguration(UnifiedAutomation.UaBase.NodeId,System.UInt32,System.Object)">
            <summary>
            Sets the variable configuration.
            </summary>
            <param name="variableId">The variable id.</param>
            <param name="handleType">Type of the handle.</param>
            <param name="handleData">The handle data.</param>
            <remarks>
            The variable configuration controls how the NodeManager handles I/O for the variable value.
            The NodeHandleType defines standard values which can be passed as the handleType.
            The handleData is passed as the UserData when the NodeAttributeHandle.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.SetVariableDefaultValue(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.QualifiedName,UnifiedAutomation.UaBase.Variant)">
            <summary>
            Sets the variable default value.
            </summary>
            <param name="parentId">The parent id.</param>
            <param name="browseName">The browse name of the variable to find.</param>
            <param name="value">The value.</param>
            <returns>True if successful, false otherwise.</returns>
            <remarks>
            This method sets the value for an in-memory node.
            It will not affect the value if the handleType set for the variable is not NodeHandleType.Internal
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.SetVariableDefaultValue(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.Variant)">
            <summary>
            Sets the variable value configuration.
            </summary>
            <param name="variableId">The variable id.</param>
            <param name="value">The value.</param>
            <returns>True if successful, false otherwise.</returns>
            <remarks>
            This method sets the value for an in-memory node.
            It will not affect the value if the handleType set for the variable is not NodeHandleType.Internal
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.SetNodeAttributeConfiguration(UnifiedAutomation.UaBase.NodeId,System.UInt32,System.UInt32,System.Object)">
            <summary>
            Sets the node attribute configuration.
            </summary>
            <param name="nodeId">The node id.</param>
            <param name="attributeId">The attribute id.</param>
            <param name="handleType">Type of the handle.</param>
            <param name="handleData">The handle data.</param>
            <remarks>
            The node attribute configuration controls how the NodeManager handles I/O for the attribute value.
            The NodeHandleType defines standard values which can be passed as the handleType.
            The handleData is passed as the UserData when the NodeAttributeHandle.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.FindInMemoryNode(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,System.Boolean,UnifiedAutomation.UaBase.StringTable,System.String)">
            <summary>
            Finds the in memory node.
            </summary>
            <param name="sourceId">The source id.</param>
            <param name="referenceTypeId">The reference type id.</param>
            <param name="isInverse">Set to <c>true</c>, if the reference is an inverse reference.</param>
            <param name="namespaceUris">The namespace uris.</param>
            <param name="browsePath">The browse path.</param>
            <returns>The node. null if the nodeId does not refer to an in-memory node managed by the node manager.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.FindInMemoryNode(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,System.Boolean,UnifiedAutomation.UaBase.AbsoluteName[])">
            <summary>
            Finds the in memory node.
            </summary>
            <param name="sourceId">The source id.</param>
            <param name="referenceTypeId">The reference type id.</param>
            <param name="isInverse">Set to <c>true</c> if the reference is an inverse reference.</param>
            <param name="browseNames">The browse names.</param>
            <returns>The node. null if the nodeId does not refer to an in-memory node managed by the node manager.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.FindInMemoryNode(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,System.Boolean,UnifiedAutomation.UaBase.QualifiedName[])">
            <summary>
            Finds the in memory node.
            </summary>
            <param name="sourceId">The source id.</param>
            <param name="referenceTypeId">The reference type id.</param>
            <param name="isInverse">Set to <c>true</c> if the reference is an inverse reference.</param>
            <param name="browseNames">The browse names.</param>
            <returns>The node. null if the nodeId does not refer to an in-memory node managed by the node manager.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManager.FindInMemoryNode(UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Finds the in memory node.
            </summary>
            <param name="nodeId">The node id.</param>
            <returns>The node. null if the nodeId does not refer to an in-memory node managed by the node manager.</returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.Model.ITraceObjectMethods">
            <summary>
            An interface for methods that can be called on the trace object.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Model.ITraceObjectMethods.SetTraceLevel(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.Model.TraceObjectModel,System.Boolean,UnifiedAutomation.UaServer.Model.TraceLevel)">
            <summary>
            Sets the trace level for the server.
            </summary>
            <param name="context">The request context.</param>
            <param name="model">The object which the method is being called on.</param>
            <param name="masterTraceEnabled">True is trace is enabled; False otherwise;</param>
            <param name="defaultTraceLevel">The level of detail in the trace log.</param>
            <returns>Good if the call succeeds; an appropriate error otherwise.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Model.ITraceObjectMethods.Configure(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.Model.TraceObjectModel,System.String,System.UInt32,System.Byte,System.Boolean)">
            <summary>
            Updates the trace configuration.
            </summary>
            <param name="context">The request context.</param>
            <param name="model">The object which the method is being called on.</param>
            <param name="traceFilePath">The path to the trace file.</param>
            <param name="maxEntriesPerLog">The maximum log entries per log file.</param>
            <param name="maxLogFileBackups">The maximum number of log file backups.</param>
            <param name="fastTrace">If true new log entries are flushed immediately to disk; If false log writes are buffered.</param>
            <returns>Good if the call succeeds; an appropriate error otherwise.</returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.Model.TraceObjectModel">
            <summary>
            The trace object which allows  
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Model.TraceObjectModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.Model.TraceObjectModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Model.TraceObjectModel.#ctor(UnifiedAutomation.UaServer.Model.TraceObjectModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.Model.TraceObjectModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Model.TraceObjectModel.GetMethodDispatcher(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Gets the method dispatcher.
            </summary>
            <param name="context">The context.</param>
            <param name="objectId">The object id.</param>
            <param name="methodId">The method id.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Model.TraceObjectModel.DispatchMethod(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MethodHandle,System.Collections.Generic.IList{UnifiedAutomation.UaBase.Variant},System.Collections.Generic.List{UnifiedAutomation.UaBase.StatusCode},System.Collections.Generic.List{UnifiedAutomation.UaBase.Variant})">
            <summary>
            Dispatches the method.
            </summary>
            <param name="context">The context.</param>
            <param name="methodHandle">The method handle.</param>
            <param name="inputArguments">The input arguments.</param>
            <param name="inputArgumentResults">The input argument results.</param>
            <param name="outputArguments">The output arguments.</param>
            <returns></returns>
        </member>
        <member name="P:UnifiedAutomation.UaServer.Model.TraceObjectModel.TraceObjectMethods">
            <summary>
            The implementation for the methods defined on the object.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.Model.DataTypes">
            <summary>
            A class that declares constants for all DataTypes in the Model.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.Model.DataTypes.TraceLevel">
            <summary>
            The identifier for the TraceLevel DataType.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.Model.Objects">
            <summary>
            A class that declares constants for all Objects in the Model.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.Model.Objects.Server_Trace">
            <summary>
            The identifier for the Trace Object.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.Model.ObjectTypes">
            <summary>
            A class that declares constants for all ObjectTypes in the Model.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.Model.Methods">
            <summary>
            A class that declares constants for all Methods in the Model.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.Model.Methods.Server_Trace_Configure">
            <summary>
            The identifier for the Configure Method.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.Model.Methods.Server_Trace_SetTraceLevel">
            <summary>
            The identifier for the SetTraceLevel Method.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.Model.ReferenceTypes">
            <summary>
            A class that declares constants for all ReferenceTyped in the Model.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.Model.Variables">
            <summary>
            A class that declares constants for all Variables in the Model.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.Model.Variables.TraceLevel_EnumStrings">
            <summary>
            The identifier for the EnumStrings Variable.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.Model.Variables.Server_Trace_Configure_InputArguments">
            <summary>
            The identifier for the InputArguments Object.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.Model.Variables.Server_Trace_DefaultTraceLevel">
            <summary>
            The identifier for the DefaultTraceLevel Object.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.Model.Variables.Server_Trace_FastTrace">
            <summary>
            The identifier for the FastTrace Object.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.Model.Variables.Server_Trace_MasterTraceEnabled">
            <summary>
            The identifier for the MasterTraceEnabled Object.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.Model.Variables.Server_Trace_MaxEntriesPerLog">
            <summary>
            The identifier for the MaxEntriesPerLog Object.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.Model.Variables.Server_Trace_MaxLogFileBackups">
            <summary>
            The identifier for the MaxLogFileBackups Object.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.Model.Variables.Server_Trace_SetTraceLevel_InputArguments">
            <summary>
            The identifier for the InputArguments Object.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.Model.Variables.Server_Trace_TraceFilePath">
            <summary>
            The identifier for the TraceFilePath Object.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.Model.VariableTypes">
            <summary>
            A class that declares constants for all VariableTypes in the Model.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.Model.DataTypeIds">
            <summary>
            A class that declares constants for all DataTypes in the Model.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.Model.DataTypeIds.TraceLevel">
            <summary>
            The identifier for the BaseDataType DataType.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.Model.MethodIds">
            <summary>
            A class that declares constants for all Methods in the Model.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.Model.MethodIds.Server_Trace_Configure">
            <summary>
            The identifier for the Server_Trace_Configure Method.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.Model.MethodIds.Server_Trace_SetTraceLevel">
            <summary>
            The identifier for the Server_Trace_SetTraceLevel Method.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.Model.ObjectIds">
            <summary>
            A class that declares constants for all Objects in the Model.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.Model.ObjectIds.Server_Trace">
            <summary>
            The identifier for the Server_Trace Object.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.Model.ObjectTypeIds">
            <summary>
            A class that declares constants for all Objects in the Model.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.Model.ReferenceTypeIds">
            <summary>
            A class that declares constants for all ReferenceTypes in the Model.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.Model.VariableIds">
            <summary>
            A class that declares constants for all Variables in the Model.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.Model.VariableIds.TraceLevel_EnumStrings">
            <summary>
            The identifier for the TraceLevel_EnumStrings Variable.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.Model.VariableIds.Server_Trace_Configure_InputArguments">
            <summary>
            The identifier for the Server_Trace_Configure_InputArguments Variable.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.Model.VariableIds.Server_Trace_DefaultTraceLevel">
            <summary>
            The identifier for the Server_Trace_DefaultTraceLevel Variable.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.Model.VariableIds.Server_Trace_FastTrace">
            <summary>
            The identifier for the Server_Trace_FastTrace Variable.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.Model.VariableIds.Server_Trace_MasterTraceEnabled">
            <summary>
            The identifier for the Server_Trace_MasterTraceEnabled Variable.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.Model.VariableIds.Server_Trace_MaxEntriesPerLog">
            <summary>
            The identifier for the Server_Trace_MaxEntriesPerLog Variable.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.Model.VariableIds.Server_Trace_MaxLogFileBackups">
            <summary>
            The identifier for the Server_Trace_MaxLogFileBackups Variable.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.Model.VariableIds.Server_Trace_SetTraceLevel_InputArguments">
            <summary>
            The identifier for the Server_Trace_SetTraceLevel_InputArguments Variable.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.Model.VariableIds.Server_Trace_TraceFilePath">
            <summary>
            The identifier for the Server_Trace_TraceFilePath Variable.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.Model.VariableTypeIds">
            <summary>
            A class that declares constants for all VariableType in the Model.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.Model.BrowseNames">
            <summary>
            Declares all of the BrowseNames used in the Model.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.Model.BrowseNames.Configure">
            <summary>
            The BrowseName for the Configure component.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.Model.BrowseNames.DefaultTraceLevel">
            <summary>
            The BrowseName for the DefaultTraceLevel component.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.Model.BrowseNames.FastTrace">
            <summary>
            The BrowseName for the FastTrace component.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.Model.BrowseNames.MasterTraceEnabled">
            <summary>
            The BrowseName for the MasterTraceEnabled component.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.Model.BrowseNames.MaxEntriesPerLog">
            <summary>
            The BrowseName for the MaxEntriesPerLog component.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.Model.BrowseNames.MaxLogFileBackups">
            <summary>
            The BrowseName for the MaxLogFileBackups component.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.Model.BrowseNames.SetTraceLevel">
            <summary>
            The BrowseName for the SetTraceLevel component.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.Model.BrowseNames.Trace">
            <summary>
            The BrowseName for the Trace component.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.Model.BrowseNames.TraceFilePath">
            <summary>
            The BrowseName for the TraceFilePath component.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.Model.BrowseNames.TraceLevel">
            <summary>
            The BrowseName for the TraceLevel component.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.Model.Namespaces">
            <summary>
            Defines constants for all namespaces referenced by the Model.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.Model.Namespaces.OpcUa">
            <summary>
            The URI for the OpcUa namespace (.NET code namespace is 'Opc.Ua').
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.Model.Namespaces.OpcUaXsd">
            <summary>
            The URI for the OpcUaXsd namespace (.NET code namespace is 'Opc.Ua').
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.Model.Namespaces.Model">
            <summary>
            The URI for the Model namespace.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.Model.Namespaces.ModelXsd">
            <summary>
            The URI for the ModelXsd namespace.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.Model.TraceLevel">
            <summary>
            The possible encodings for a TraceLevel value.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.Model.TraceLevel.None">
            <remarks />
        </member>
        <member name="F:UnifiedAutomation.UaServer.Model.TraceLevel.Error">
            <remarks />
        </member>
        <member name="F:UnifiedAutomation.UaServer.Model.TraceLevel.Warning">
            <remarks />
        </member>
        <member name="F:UnifiedAutomation.UaServer.Model.TraceLevel.System">
            <remarks />
        </member>
        <member name="F:UnifiedAutomation.UaServer.Model.TraceLevel.Info">
            <remarks />
        </member>
        <member name="F:UnifiedAutomation.UaServer.Model.TraceLevel.InterfaceCall">
            <remarks />
        </member>
        <member name="F:UnifiedAutomation.UaServer.Model.TraceLevel.Constructor">
            <remarks />
        </member>
        <member name="F:UnifiedAutomation.UaServer.Model.TraceLevel.ProgramFlow">
            <remarks />
        </member>
        <member name="F:UnifiedAutomation.UaServer.Model.TraceLevel.Data">
            <remarks />
        </member>
        <member name="T:UnifiedAutomation.UaServer.Model.TraceLevelCollection">
            <summary>
            A collection of TraceLevel objects.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Model.TraceLevelCollection.#ctor">
            <summary>
            Initializes the collection with default values.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Model.TraceLevelCollection.#ctor(System.Int32)">
            <summary>
            Initializes the collection with an initial capacity.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Model.TraceLevelCollection.#ctor(System.Collections.Generic.IEnumerable{UnifiedAutomation.UaServer.Model.TraceLevel})">
            <summary>
            Initializes the collection with another collection.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Model.TraceLevelCollection.op_Implicit(UnifiedAutomation.UaServer.Model.TraceLevel[])~UnifiedAutomation.UaServer.Model.TraceLevelCollection">
            <summary>
            Converts an array to a collection.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Model.TraceLevelCollection.op_Explicit(UnifiedAutomation.UaServer.Model.TraceLevelCollection)~UnifiedAutomation.UaServer.Model.TraceLevel[]">
            <summary>
            Converts a collection to an array.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Model.TraceLevelCollection.Clone">
            <summary>
            Creates a deep copy of the collection.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.QueryHandle">
            <summary>
            A handle for a query.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.QueryHandle.QueryManager">
            <summary>
            
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.QueryHandle.ViewHandle">
            <summary>
            Gets the view handle.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.QueryHandle.#ctor(UnifiedAutomation.UaServer.IQueryManager,UnifiedAutomation.UaServer.INodeManager,UnifiedAutomation.UaServer.IUserAccessManager)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.QueryHandle"/> class.
            </summary>
            <param name="queryManager">The node manager.</param>
            <param name="nodeManager">The node manager.</param>
            <param name="userAccessManager">The user access manager.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.CallTransactionHandle">
            <summary>
            A transaction for one or more call requests for a single IMethodManager.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.CallTransactionHandle.#ctor(UnifiedAutomation.UaServer.RequestContext,System.Delegate,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.CallTransactionHandle"/> class.
            </summary>
            <param name="context">The request context.</param>
            <param name="callback">The callback to invoke when an operation completes.</param>
            <param name="callbackData">The callback data.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CallTransactionHandle.HasItems">
            <summary>
            Gets a value indicating whether this transaction has items.
            </summary>
            <value>
              <c>true</c> if this transaction has items; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CallTransactionHandle.MethodHandles">
            <summary>
            The method handles which are part of the transaction.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CallTransactionHandle.InputArguments">
            <summary>
            The input arguments for each method call in the transaction.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.HistoryEventTransactionHandle">
            <summary>
            A transaction for history event request.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.HistoryEventTransactionHandle.#ctor(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.TransactionType,System.Delegate,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.HistoryDataTransactionHandle"/> class.
            </summary>
            <param name="context">The request context.</param>
            <param name="transactionType">Type of the transaction.</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.HistoryEventTransactionHandle.HistoryEventHandles">
            <summary>
            The history data handles used in the transaction.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.HistoryEventTransactionHandle.Details">
            <summary>
            Gets or sets the details.
            </summary>
            <value>
            The details.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.HistoryDataTransactionHandle">
            <summary>
            A transaction for history data request.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.HistoryDataTransactionHandle.#ctor(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.TransactionType,System.Delegate,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.HistoryDataTransactionHandle"/> class.
            </summary>
            <param name="context">The request context.</param>
            <param name="transactionType">Type of the transaction.</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.HistoryDataTransactionHandle.TimestampsToReturn">
            <summary>
            Gets or sets the timestamps to return.
            </summary>
            <value>
            The timestamps to return.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.HistoryDataTransactionHandle.Details">
            <summary>
            Gets or sets the details.
            </summary>
            <value>
            The details.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.HistoryDataTransactionHandle.HistoryDataHandles">
            <summary>
            The history data handles used in the transaction.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.HistoryEventHandle">
            <summary>
            A handle for a node which supports event history.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.HistoryEventHandle.#ctor(UnifiedAutomation.UaServer.IHistoryReadEventManager,UnifiedAutomation.UaServer.IHistoryUpdateEventManager,UnifiedAutomation.UaServer.INodeManager,UnifiedAutomation.UaServer.IUserAccessManager,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.HistoryEventHandle"/> class.
            </summary>
            <param name="readManager">The history event read manager.</param>
            <param name="updateManager">The history event update manager.</param>
            <param name="nodeManager">The node manager.</param>
            <param name="userAccessManager">The user access manager.</param>
            <param name="nodeId">The node id.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.HistoryEventHandle.ReadManager">
            <summary>
            Gets the manager that handles history event reads for the node.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.HistoryEventHandle.UpdateManager">
            <summary>
            Gets the manager that handles history event updates for the node.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.HistoryEventOperationHandle">
            <summary>
            A handle for a single history event operation within a request.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.HistoryEventOperationHandle.#ctor(UnifiedAutomation.UaServer.HistoryEventHandle)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.HistoryEventOperationHandle"/> class.
            </summary>
            <param name="nodeHandle">The node handle.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.HistoryEventOperationHandle.NodeHandle">
            <summary>
            Gets the node handle.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.HistoryEventOperationHandle.ReadManager">
            <summary>
            Gets the manager that handles history event reads for the node.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.HistoryEventOperationHandle.UpdateManager">
            <summary>
            Gets the manager that handles history event updates for the node.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.HistoryEventOperationHandle.NodeId">
            <summary>
            Gets the node id.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.DataTransactionHandle">
            <summary>
            A transaction for one or more requests for a single IIOManager.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DataTransactionHandle.#ctor(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.TransactionType,System.Delegate,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.DataTransactionHandle"/> class.
            </summary>
            <param name="context">The request context.</param>
            <param name="transactionType">Type of the transaction.</param>
            <param name="callback">The callback to call when an operation completes.</param>
            <param name="callbackData">The callback data.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DataTransactionHandle.MaxAge">
            <summary>
            Gets or sets the max age.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DataTransactionHandle.TimestampsToReturn">
            <summary>
            Gets or sets the timestamps to return.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DataTransactionHandle.HasItems">
            <summary>
            Gets a value indicating whether this transaction has items.
            </summary>
            <value>
              <c>true</c> if this transaction has items; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DataTransactionHandle.NodeHandles">
            <summary>
            The node handles used in the transaction (empty if the transaction operates on item handles).
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DataTransactionHandle.ItemHandles">
            <summary>
            The monitored item handles used in the transaction (empty if the transaction operates on node handles).
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.EventTransactionHandle">
            <summary>
            A transaction for one or more requests for a single IEventManager.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.EventTransactionHandle.#ctor(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.TransactionType,System.Delegate,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.EventTransactionHandle"/> class.
            </summary>
            <param name="context">The request context.</param>
            <param name="transactionType">Type of the transaction.</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.EventTransactionHandle.HasItems">
            <summary>
            Gets a value indicating whether this transaction has items.
            </summary>
            <value>
              <c>true</c> if this transaction has items; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.EventTransactionHandle.NotifierHandles">
            <summary>
            The notifier handles used in the transaction (empty if the transaction operates on item handles).
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.EventTransactionHandle.ItemHandles">
            <summary>
            The monitored item handles used in the transaction (empty if the transaction operates on notifier handles).
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.HandleBase">
            <summary>
            A base class for handles.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.HandleBase.#ctor(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.INodeManager,UnifiedAutomation.UaServer.IUserAccessManager)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.HandleBase"/> class.
            </summary>
            <param name="nodeId">The node id.</param>
            <param name="nodeManager">The node manager that created the handle.</param>
            <param name="userAccessManager">The user access manager.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.HandleBase.NodeId">
            <summary>
            Gets the node id.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.HandleBase.NodeManager">
            <summary>
            Gets the node manager that created the handle.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.HandleBase.UserAccessManager">
            <summary>
            The object that is used to check if the current user has access to the node.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.HandleBase.Type">
            <summary>
            Gets the type of the handle assigned by the creator of the handle.
            </summary>
            <value>
            The type of the handle.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.HandleBase.NodeData">
            <summary>
            Gets or sets the user data associated with the node by the creator of the node.
            </summary>
            <value>
            The node data.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.HandleBase.UserData">
            <summary>
            Gets or sets the opaque data associated with the handle by the creator of the handle.
            </summary>
            <value>
            The handle data.
            </value>
        </member>
        <member name="M:UnifiedAutomation.UaServer.HandleBase.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.HandleBase.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.HistoryContinuationPoint">
             <summary>
            
             </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.HistoryContinuationPoint.#ctor">
            <summary>
            Initializes the object with default values.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.HistoryContinuationPoint.Dispose">
            <summary>
            Frees any unmanaged resources.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.HistoryContinuationPoint.Dispose(System.Boolean)">
            <summary>
            An overrideable version of the Dispose.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.HistoryContinuationPoint.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>
            The id.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.HistoryContinuationPoint.Timestamp">
            <summary>
            Gets or sets the timestamp.
            </summary>
            <value>
            The timestamp.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.HistoryContinuationPoint.UserData">
            <summary>
            Gets or sets the user data.
            </summary>
            <value>
            The user data.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.IHistoryDataSource">
            <summary>
            An interface to an object which provides access to a historical data archive.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IHistoryDataSource.GetEnumerator(UnifiedAutomation.UaServer.RequestContext,System.DateTime)">
            <summary>
            Begins iterating the historical values for a datasource.
            </summary>
            <param name="context">The context.</param>
            <param name="timestamp">The timestamp where the iterating begins.</param>
            <returns>
            A iterator object that can be used to navigate the archive.
            </returns>
            <remarks>
            An iterator that points to the first value if multiple values exist at the timestamp.
            </remarks>
        </member>
        <member name="T:UnifiedAutomation.UaServer.IHistoryDataEnumerator">
            <summary>
            An interface to an object which can provide sequential access the values in a historical archive.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IHistoryDataEnumerator.MoveNext">
            <summary>
            Moves forward in time to the next raw data point in the archive.
            </summary>
            <returns>
            True if successful or false if the current position before the beginning of the archive.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IHistoryDataEnumerator.MoveBack">
            <summary>
            Moves backward in time to the next raw data point in the archive.
            </summary>
            <returns>
            True if successful or false if the current position before the beginning of the archive.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IHistoryDataEnumerator.Reset(System.DateTime)">
            <summary>
            Resets the specified timestamp.
            </summary>
            <param name="timestamp">The timestamp.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IHistoryDataEnumerator.GetValue">
            <summary>
            Gets the value at the specified position.
            </summary>
            <returns>
            The value or null if no data exists at the current position.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IHistoryDataEnumerator.GetModificationInfo">
            <summary>
            Gets the modification info for the value at the specified position.
            </summary>
            <returns>
            The modification info or null if no modification info exists at the current position.
            </returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.IHistoryReadEventManager">
            \ingroup UaServerInterfaces
            <summary>
            An interface to an object that allows reading of historical events.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IHistoryReadEventManager.BeginHistoryReadEventTransaction(UnifiedAutomation.UaServer.RequestContext,System.UInt32,UnifiedAutomation.UaServer.TransactionType,UnifiedAutomation.UaBase.ReadEventDetails,System.Delegate,System.Object,UnifiedAutomation.UaServer.HistoryEventTransactionHandle@)">
            <summary>
            Begins the event history transaction.
            </summary>
            <param name="context">The request context.</param>
            <param name="totalItemCountHint">The total item count hint.</param>
            <param name="transactionType">Type of the transaction.</param>
            <param name="details">The details.</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <param name="handle">The historical event transaction handle.</param>
            <returns>Good if the transaction could be created, an error code otherwise.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IHistoryReadEventManager.FinishHistoryReadEventTransaction(UnifiedAutomation.UaServer.HistoryEventTransactionHandle)">
            <summary>
            Finishes the event history transaction.
            </summary>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IHistoryReadEventManager.BeginHistoryReadEvent(UnifiedAutomation.UaServer.HistoryEventOperationHandle,UnifiedAutomation.UaBase.HistoryReadValueId)">
            <summary>
            Begins an operation to read historical events.
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <param name="notifierToRead">The notifier to read.</param>
            <returns>Good if successful; Otherwise an error code.</returns>
            <remarks>If this method returns Good the callback passed to BeginHistoryReadEventTransaction must be called when the operation completes.</remarks>
        </member>
        <member name="T:UnifiedAutomation.UaServer.HistoryReadEventCompleteEventHandler">
            <summary>
            A function used to report the results of a history read event operation.
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <param name="callbackData">The callback data.</param>
            <param name="result">The result.</param>
            <param name="doNotBlockThread">if set to <c>true</c> then do not block thread.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.IHistoryUpdateEventManager">
            \ingroup UaServerInterfaces
            <summary>
            An interface to an object that allows updating of historical events.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IHistoryUpdateEventManager.BeginHistoryUpdateEventTransaction(UnifiedAutomation.UaServer.RequestContext,System.UInt32,UnifiedAutomation.UaServer.TransactionType,System.Delegate,System.Object,UnifiedAutomation.UaServer.HistoryEventTransactionHandle@)">
            <summary>
            Begins the history transaction.
            </summary>
            <param name="context">The request context.</param>
            <param name="totalItemCountHint">The total item count hint.</param>
            <param name="transactionType">Type of the transaction.</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <param name="handle">The handle.</param>
            <returns>Good if the transaction could be created, an error code otherwise.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IHistoryUpdateEventManager.FinishHistoryUpdateEventTransaction(UnifiedAutomation.UaServer.HistoryEventTransactionHandle)">
            <summary>
            Finishes the history event transaction.
            </summary>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IHistoryUpdateEventManager.BeginHistoryUpdateEvent(UnifiedAutomation.UaServer.HistoryEventOperationHandle,UnifiedAutomation.UaBase.UpdateEventDetails)">
            <summary>
            Begins an operation to update event history.
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <param name="settings">The settings.</param>
            <returns>Good if successful; Otherwise an error code.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IHistoryUpdateEventManager.BeginHistoryDeleteEvent(UnifiedAutomation.UaServer.HistoryEventOperationHandle,UnifiedAutomation.UaBase.DeleteEventDetails)">
            <summary>
            Begins an operation to delete event history.
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <param name="settings">The settings.</param>
            <returns>Good if successful; Otherwise an error code.</returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.HistoryUpdateEventCompleteEventHandler">
            <summary>
            A function used to report the results of a history update data operation.
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <param name="callbackData">The callback data.</param>
            <param name="result">The result.</param>
            <param name="doNotBlockThread">if set to <c>true</c> then do not block thread.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.IHistoryUpdateDataManager">
            \ingroup UaServerInterfaces
            <summary>
            An interface to an object that allows updating of historical data.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IHistoryUpdateDataManager.BeginHistoryUpdateDataTransaction(UnifiedAutomation.UaServer.RequestContext,System.UInt32,UnifiedAutomation.UaServer.TransactionType,System.Delegate,System.Object,UnifiedAutomation.UaServer.HistoryDataTransactionHandle@)">
            <summary>
            Begins the history transaction.
            </summary>
            <param name="context">The request context.</param>
            <param name="totalItemCountHint">The total item count hint.</param>
            <param name="transactionType">Type of the transaction.</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <param name="handle">The historical data transaction handle.</param>
            <returns>Good if the transaction could be created, an error code otherwise.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IHistoryUpdateDataManager.FinishHistoryUpdateDataTransaction(UnifiedAutomation.UaServer.HistoryDataTransactionHandle)">
            <summary>
            Finishes the history transaction.
            </summary>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IHistoryUpdateDataManager.BeginHistoryUpdateData(UnifiedAutomation.UaServer.HistoryDataOperationHandle,UnifiedAutomation.UaBase.UpdateDataDetails)">
            <summary>
            Begins an operation to update raw history data.
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <param name="details">The details.</param>
            <returns>Good if successful; Otherwise an error code.</returns>
            <remarks>If this method returns Good the callback passed to BeginHistoryUpdateDataTransaction must be called when the operation completes.</remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IHistoryUpdateDataManager.BeginHistoryUpdateStructureData(UnifiedAutomation.UaServer.HistoryDataOperationHandle,UnifiedAutomation.UaBase.UpdateStructureDataDetails)">
            <summary>
            Begins an operation to update structured history data.
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <param name="details">The details.</param>
            <returns>Good if successful; Otherwise an error code.</returns>
            <remarks>If this method returns Good the callback passed to BeginHistoryUpdateDataTransaction must be called when the operation completes.</remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IHistoryUpdateDataManager.BeginHistoryDeleteRaw(UnifiedAutomation.UaServer.HistoryDataOperationHandle,UnifiedAutomation.UaBase.DeleteRawModifiedDetails)">
            <summary>
            Begins an operation to delete raw history data.
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <param name="details">The details.</param>
            <returns>Good if successful; Otherwise an error code.</returns>
            <remarks>If this method returns Good the callback passed to BeginHistoryUpdateDataTransaction must be called when the operation completes.</remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IHistoryUpdateDataManager.BeginHistoryDeleteAtTime(UnifiedAutomation.UaServer.HistoryDataOperationHandle,UnifiedAutomation.UaBase.DeleteAtTimeDetails)">
            <summary>
            Begins an operation to delete history data at specific times.
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <param name="details">The details.</param>
            <returns>Good if successful; Otherwise an error code.</returns>
            <remarks>If this method returns Good the callback passed to BeginHistoryUpdateDataTransaction must be called when the operation completes.</remarks>
        </member>
        <member name="T:UnifiedAutomation.UaServer.HistoryUpdateDataCompleteEventHandler">
            <summary>
            A function used to report the results of a history update data operation.
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <param name="callbackData">The callback data.</param>
            <param name="result">The result.</param>
            <param name="doNotBlockThread">if set to <c>true</c> then do not block thread.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.IAdvancedNodeManager">
            <summary>
            Functions that can be used to optimize common operations in a NodeManager.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.IAdvancedNodeManager.SupportedMethods">
            <summary>
            Gets the supported methods.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IAdvancedNodeManager.GetNodeMetadata(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.BrowseHandle,UnifiedAutomation.UaServer.NodeMetadataMask,UnifiedAutomation.UaBase.NodeClass)">
            <summary>
            Gets the node metadata.
            </summary>
            <param name="context">The request context.</param>
            <param name="browseHandle">The browse handle.</param>
            <param name="fieldsToReturn">The fields to return.</param>
            <param name="nodeClassFilter">The node class filter.</param>
            <returns>
            The metadata with only the requested fields. null if the node does not have the requested node class.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IAdvancedNodeManager.GetNodeAttributes(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.BrowseHandle,UnifiedAutomation.UaBase.NodeClass)">
            <summary>
            Gets the node attributes.
            </summary>
            <param name="context">The request context.</param>
            <param name="browseHandle">The browse handle.</param>
            <param name="expectedNodeClass">The expected node class.</param>
            <returns>
            The subtype of Node depending on the NodeClass. null if the node is not the expected node class.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IAdvancedNodeManager.ReadAttribute(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.NodeAttributeHandle)">
            <summary>
            Reads the attribute.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodeHandle">The node handle.</param>
            <returns>
            The value of the requested attribute. Returns null if the attribute cannot be read with this method (meaning the I/O manager needs to be used).
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IAdvancedNodeManager.ReadValue``1(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.NodeAttributeHandle,UnifiedAutomation.UaBase.QualifiedName,``0)">
            <summary>
            Reads the attribute value for a child node.
            </summary>
            <typeparam name="T">The data type of the attribute to read.</typeparam>
            <param name="context">The request context.</param>
            <param name="nodeHandle">The node handle.</param>
            <param name="componentName">Name of the component.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The value of the variable identified by the component name. The defaultValue if any error occurs.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IAdvancedNodeManager.ReadValue``1(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.NodeAttributeHandle,UnifiedAutomation.UaBase.QualifiedName[],``0)">
            <summary>
            Reads the attribute value for a child node.
            </summary>
            <typeparam name="T">The data type of the value to read.</typeparam>
            <param name="context">The request context.</param>
            <param name="nodeHandle">The node handle.</param>
            <param name="browsePath">The browse path.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The value of the variable identified by the browse path. The defaultValue if any error occurs.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IAdvancedNodeManager.WriteAttribute(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.NodeAttributeHandle,UnifiedAutomation.UaBase.Variant)">
            <summary>
            Writes the attribute.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodeHandle">The node handle.</param>
            <param name="valueToWrite">The value to write.</param>
            <returns>Writes the attribute. Returns null if the attribute cannot be written with this method (meaning the I/O manager needs to be used).</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IAdvancedNodeManager.WriteValue(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.NodeAttributeHandle,UnifiedAutomation.UaBase.QualifiedName,UnifiedAutomation.UaBase.Variant)">
            <summary>
            Writes the attribute value for a child node.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodeHandle">The node handle.</param>
            <param name="componentName">Name of the component.</param>
            <param name="valueToWrite">The value to write.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IAdvancedNodeManager.WriteValue(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.NodeAttributeHandle,UnifiedAutomation.UaBase.QualifiedName[],UnifiedAutomation.UaBase.Variant)">
            <summary>
            Writes the attribute value for a child node.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodeHandle">The node handle.</param>
            <param name="browsePath">The browse path.</param>
            <param name="valueToWrite">The value to write.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AdvancedNodeManagerMethods">
            <summary>
            The methods supported by the node manager.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.AdvancedNodeManagerMethods.GetNodeMetadata">
            <summary>
            The GetNodeMetadata method is supported.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.AdvancedNodeManagerMethods.GetNodeAttributes">
            <summary>
            The GetNodeAttributes method is supported.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.AdvancedNodeManagerMethods.ReadAttribute">
            <summary>
            The ReadAttribute method is supported.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.AdvancedNodeManagerMethods.ReadValueWithName">
            <summary>
            The ReadValueWithName method is supported.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.AdvancedNodeManagerMethods.ReadValueWithPath">
            <summary>
            The ReadValueWithPath method is supported.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.AdvancedNodeManagerMethods.WriteAttribute">
            <summary>
            The ReadAttribute method is supported.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.AdvancedNodeManagerMethods.WriteValueWithName">
            <summary>
            The ReadValueWithName method is supported.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.AdvancedNodeManagerMethods.WriteValueWithPath">
            <summary>
            The ReadValueWithPath method is supported.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.IQueryManager">
            \ingroup UaServerInterfaces
            <summary>
            An interface to an object that manages query operations.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IQueryManager.BeginQuery(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.QueryContinuationPoint,System.Boolean,UnifiedAutomation.UaServer.QueryCompletedEventHandler,System.Object)">
            <summary>
            Begins a query operation.
            </summary>
            <param name="context">The request context.</param>
            <param name="continuationPoint">The continuation point.</param>
            <param name="releaseContinuationPoint">if set to <c>true</c> then call is to release the continuation point.</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <returns>Good if successful; An error code otherwise.</returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.QueryCompletedEventHandler">
            <summary>
            A delegate to report the result of a query operation.
            </summary>
            <param name="queryHandle">The handle associated with the operation.</param>
            <param name="callbackData">The callback data associated with the request.</param>
            <param name="queryDataSets">The datasets that meet the query criteria.</param>
            <param name="continuationPoint">A continuation point if the query is not complete.</param>
            <param name="parsingResults">Any errors parsing the NodeTypes passed in the request. NULL for continued queries.</param>
            <param name="filterResult">Any errors with the ContentFilter passed in the request, NULL for continued queries.</param>
            <param name="doNotBlockThread">True if the current thread must not be blocked; false otherwise.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.IMethodManager">
            \ingroup UaServerInterfaces
            <summary>
            An interface to an object that manages access to methods
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IMethodManager.BeginCallTransaction(UnifiedAutomation.UaServer.RequestContext,System.UInt32,UnifiedAutomation.UaServer.CallCompleteEventHandler,System.Object,UnifiedAutomation.UaServer.TransactionHandle@)">
            <summary>
            Begins the call transaction.
            </summary>
            <param name="context">The request context.</param>
            <param name="totalItemCountHint">The total item count hint.</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <param name="handle">The call transaction handle.</param>
            <returns>Good if the transaction could be created, an error code otherwise.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IMethodManager.FinishCallTransaction(UnifiedAutomation.UaServer.TransactionHandle)">
            <summary>
            Calls the request finished.
            </summary>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IMethodManager.BeginCall(UnifiedAutomation.UaServer.MethodOperationHandle,System.Collections.Generic.IList{UnifiedAutomation.UaBase.Variant})">
            <summary>
            Begins the call.
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <param name="inputArguments">The input arguments.</param>
            <returns>Good if the transaction could be created, an error code otherwise.</returns>
            <remarks>If this method returns Good the callback passed to BeginDataTransaction must be called when the operation completes.</remarks>
        </member>
        <member name="T:UnifiedAutomation.UaServer.CallCompleteEventHandler">
            <summary>
            A function that is called when a call operation completes.
            </summary>
            <param name="handle">The handle.</param>
            <param name="callbackData">The callback data.</param>
            <param name="result">The result.</param>
            <param name="doNotBlockThread">if set to <c>true</c> then the current thread should not be blocked.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.IHistoryReadDataManager">
            \ingroup UaServerInterfaces
            <summary>
            An interface to an object that allows reading of historical data.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IHistoryReadDataManager.BeginHistoryReadDataTransaction(UnifiedAutomation.UaServer.RequestContext,System.UInt32,UnifiedAutomation.UaBase.TimestampsToReturn,UnifiedAutomation.UaServer.TransactionType,UnifiedAutomation.UaBase.HistoryReadDetails,System.Delegate,System.Object,UnifiedAutomation.UaServer.HistoryDataTransactionHandle@)">
            <summary>
            Begins the data history transaction.
            </summary>
            <param name="context">The request context.</param>
            <param name="totalItemCountHint">The total item count hint.</param>
            <param name="timestampsToReturn">The timestamps to return.</param>
            <param name="transactionType">Type of the transaction.</param>
            <param name="details">The details.</param>
            <param name="callback">The callback called when an operation completes.</param>
            <param name="callbackData">The callback data.</param>
            <param name="handle">The historical data transaction handle.</param>
            <returns>Good if the transaction could be created, an error code otherwise.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IHistoryReadDataManager.FinishHistoryReadDataTransaction(UnifiedAutomation.UaServer.HistoryDataTransactionHandle)">
            <summary>
            Finishes the data history transaction.
            </summary>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IHistoryReadDataManager.BeginHistoryReadRaw(UnifiedAutomation.UaServer.HistoryDataOperationHandle,UnifiedAutomation.UaBase.HistoryReadValueId)">
            <summary>
            Begins an operation to read raw history data.
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <param name="valueToRead">The value to read.</param>
            <returns>Good if successful; Otherwise an error code.</returns>
            <remarks>If this method returns Good the callback passed to BeginHistoryReadDataTransaction must be called when the operation completes.</remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IHistoryReadDataManager.BeginHistoryReadProcessed(UnifiedAutomation.UaServer.HistoryDataOperationHandle,UnifiedAutomation.UaBase.HistoryReadValueId)">
            <summary>
            Begins an operation to read raw history data.
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <param name="valueToRead">The value to read.</param>
            <returns>Good if successful; Otherwise an error code.</returns>
            <remarks>If this method returns Good the callback passed to BeginHistoryReadDataTransaction must be called when the operation completes.</remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IHistoryReadDataManager.BeginHistoryReadAtTime(UnifiedAutomation.UaServer.HistoryDataOperationHandle,UnifiedAutomation.UaBase.HistoryReadValueId)">
            <summary>
            Begins an operation to read raw history data.
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <param name="valueToRead">The value to read.</param>
            <returns>Good if successful; Otherwise an error code.</returns>
            <remarks>If this method returns Good the callback passed to BeginHistoryReadDataTransaction must be called when the operation completes.</remarks>
        </member>
        <member name="T:UnifiedAutomation.UaServer.HistoryReadDataCompleteEventHandler">
            <summary>
            A function used to report the results of a history read data operation.
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <param name="callbackData">The callback data.</param>
            <param name="result">The result.</param>
            <param name="doNotBlockThread">if set to <c>true</c> then do not block thread.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.TransactionType">
            <summary>
            The set of all transaction types.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.TransactionType.Unknown">
            <summary>
            The transaction type is not known.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.TransactionType.Read">
            <summary>
            A transaction to read the value of one or more attribute values.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.TransactionType.HistoryReadRaw">
            <summary>
            A transaction to read the raw history for one or more variables.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.TransactionType.HistoryReadProcessed">
            <summary>
            A transaction to read the processed history for one or more variables.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.TransactionType.HistoryReadAtTime">
            <summary>
            A transaction to read the history at the specified times for one or more variables.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.TransactionType.HistoryReadEvents">
            <summary>
            A transaction to read the event history for one or more notifiers.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.TransactionType.Write">
            <summary>
            A transaction to write the value of one or more attribute values.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.TransactionType.HistoryUpdateData">
            <summary>
            A transaction to update the history for one or more variables.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.TransactionType.HistoryUpdateStructured">
            <summary>
            A transaction to update the history for one or more structured variables.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.TransactionType.HistoryDeleteRaw">
            <summary>
            A transaction to delete the raw history for one or more variables.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.TransactionType.HistoryDeleteAtTime">
            <summary>
            A transaction to delete the history at specific times for one or more variables.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.TransactionType.HistoryUpdateEvents">
            <summary>
            A transaction to update the event history for one or more notifiers.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.TransactionType.HistoryDeleteEvents">
            <summary>
            A transaction to delete the event history for one or more notifiers.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.TransactionType.Call">
            <summary>
            A transaction to call one or more methods.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.TransactionType.CreateMonitoredItems">
            <summary>
            A transaction to create one or more monitored items.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.TransactionType.ModifyMonitoredItems">
            <summary>
            A transaction to modify one or more monitored items.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.TransactionType.SetMonitoringMode">
            <summary>
            A transaction to set the monitoring mode for one or more monitored items.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.TransactionType.DeleteMonitoredItems">
            <summary>
            A transaction to delete one or more monitored items.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.TransactionType.Browse">
             <summary>
            
             </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.TransactionType.BrowseNext">
             <summary>
            
             </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.TransactionType.Translate">
             <summary>
            
             </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.BaseObjectModel">
            <summary>
            The BaseObjectType is used as type definition whenever there is an object
            having no more concrete type definitions available.
            </summary>
            <remarks>
            Servers should avoid using this ObjectType and use a more specific type, if
            possible. This ObjectType is the base ObjectType and all other ObjectTypes
            shall either directly or indirectly inherit from it. However, it might not be
            possible for Servers to provide all HasSubtype References from this ObjectType
            to its subtypes, and therefore it is not required to provide this information.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseObjectModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.BaseObjectModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseObjectModel.#ctor(UnifiedAutomation.UaServer.BaseObjectModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.BaseObjectModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AggregateConfigurationModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AggregateConfigurationModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AggregateConfigurationModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AggregateConfigurationModel.#ctor(UnifiedAutomation.UaServer.AggregateConfigurationModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AggregateConfigurationModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AggregateConfigurationModel.PercentDataBad">
            <summary>
            Gets or sets the PercentDataBad
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AggregateConfigurationModel.PercentDataGood">
            <summary>
            Gets or sets the PercentDataGood
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AggregateConfigurationModel.TreatUncertainAsBad">
            <summary>
            Gets or sets the TreatUncertainAsBad
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AggregateConfigurationModel.UseSlopedExtrapolation">
            <summary>
            Gets or sets the UseSlopedExtrapolation
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AggregateFunctionModel">
            <summary>
            Defines an AggregateFunction supported by a UA Server.
            </summary>
            <remarks>
            For the AggregateFunctionType, the Description Attribute is mandatory. The
            Description Attribute provides a localized description of the
            AggregateFunction.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AggregateFunctionModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AggregateFunctionModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AggregateFunctionModel.#ctor(UnifiedAutomation.UaServer.AggregateFunctionModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AggregateFunctionModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AlarmMetricsModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AlarmMetricsModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AlarmMetricsModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AlarmMetricsModel.#ctor(UnifiedAutomation.UaServer.AlarmMetricsModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AlarmMetricsModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AlarmMetricsModel.AlarmCount">
            <summary>
            Gets or sets the AlarmCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AlarmMetricsModel.AverageAlarmRate">
            <summary>
            Gets or sets the AverageAlarmRate
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AlarmMetricsModel.CurrentAlarmRate">
            <summary>
            Gets or sets the CurrentAlarmRate
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AlarmMetricsModel.MaximumActiveState">
            <summary>
            Gets or sets the MaximumActiveState
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AlarmMetricsModel.MaximumAlarmRate">
            <summary>
            Gets or sets the MaximumAlarmRate
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AlarmMetricsModel.MaximumReAlarmCount">
            <summary>
            Gets or sets the MaximumReAlarmCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AlarmMetricsModel.MaximumUnAck">
            <summary>
            Gets or sets the MaximumUnAck
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AlarmMetricsModel.StartTime">
            <summary>
            Gets or sets the StartTime
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AlarmMetricsModel.GetMethodDispatcher(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Gets the method dispatcher.
            </summary>
            <param name="context">The context.</param>
            <param name="objectId">The object id.</param>
            <param name="methodId">The method id.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AlarmMetricsModel.DispatchMethod(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MethodHandle,System.Collections.Generic.IList{UnifiedAutomation.UaBase.Variant},System.Collections.Generic.List{UnifiedAutomation.UaBase.StatusCode},System.Collections.Generic.List{UnifiedAutomation.UaBase.Variant})">
            <summary>
            Dispatches the method.
            </summary>
            <param name="context">The context.</param>
            <param name="methodHandle">The method handle.</param>
            <param name="inputArguments">The input arguments.</param>
            <param name="inputArgumentResults">The input argument results.</param>
            <param name="outputArguments">The output arguments.</param>
            <returns></returns>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AlarmMetricsModel.AlarmMetricsMethods">
            <summary>
            Gets or sets the AlarmMetrics methods.
            </summary>
            <value>
            The AlarmMetrics methods.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.IAlarmMetricsMethods">
            <summary>
            The interface for methods implemented on the AlarmMetricsModel object.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IAlarmMetricsMethods.Reset(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.AlarmMetricsModel)">
            <summary>
            </summary>
            <param name="context"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuthorizationServiceConfigurationModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuthorizationServiceConfigurationModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuthorizationServiceConfigurationModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuthorizationServiceConfigurationModel.#ctor(UnifiedAutomation.UaServer.AuthorizationServiceConfigurationModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuthorizationServiceConfigurationModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuthorizationServiceConfigurationModel.IssuerEndpointUrl">
            <summary>
            Gets or sets the IssuerEndpointUrl
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuthorizationServiceConfigurationModel.ServiceCertificate">
            <summary>
            Gets or sets the ServiceCertificate
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuthorizationServiceConfigurationModel.ServiceUri">
            <summary>
            Gets or sets the ServiceUri
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.BaseConditionClassModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseConditionClassModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.BaseConditionClassModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseConditionClassModel.#ctor(UnifiedAutomation.UaServer.BaseConditionClassModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.BaseConditionClassModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.HighlyManagedAlarmConditionClassModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.HighlyManagedAlarmConditionClassModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.HighlyManagedAlarmConditionClassModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.HighlyManagedAlarmConditionClassModel.#ctor(UnifiedAutomation.UaServer.HighlyManagedAlarmConditionClassModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.HighlyManagedAlarmConditionClassModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.MaintenanceConditionClassModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.MaintenanceConditionClassModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.MaintenanceConditionClassModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.MaintenanceConditionClassModel.#ctor(UnifiedAutomation.UaServer.MaintenanceConditionClassModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.MaintenanceConditionClassModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ProcessConditionClassModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ProcessConditionClassModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ProcessConditionClassModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ProcessConditionClassModel.#ctor(UnifiedAutomation.UaServer.ProcessConditionClassModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ProcessConditionClassModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.SafetyConditionClassModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SafetyConditionClassModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.SafetyConditionClassModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SafetyConditionClassModel.#ctor(UnifiedAutomation.UaServer.SafetyConditionClassModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.SafetyConditionClassModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.StatisticalConditionClassModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.StatisticalConditionClassModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.StatisticalConditionClassModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.StatisticalConditionClassModel.#ctor(UnifiedAutomation.UaServer.StatisticalConditionClassModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.StatisticalConditionClassModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.SystemConditionClassModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SystemConditionClassModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.SystemConditionClassModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SystemConditionClassModel.#ctor(UnifiedAutomation.UaServer.SystemConditionClassModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.SystemConditionClassModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.TestingConditionClassModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TestingConditionClassModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.TestingConditionClassModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TestingConditionClassModel.#ctor(UnifiedAutomation.UaServer.TestingConditionClassModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.TestingConditionClassModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.TrainingConditionClassModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TrainingConditionClassModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.TrainingConditionClassModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TrainingConditionClassModel.#ctor(UnifiedAutomation.UaServer.TrainingConditionClassModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.TrainingConditionClassModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.CertificateModel">
            <summary>
            An abstract base type for types that describe the purpose of a certificate.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.CertificateModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.CertificateModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.CertificateModel.#ctor(UnifiedAutomation.UaServer.CertificateModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.CertificateModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ApplicationCertificateModel">
            <summary>
            An abstract base type for types that describe the purpose of an
            ApplicationInstance certificate.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ApplicationCertificateModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ApplicationCertificateModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ApplicationCertificateModel.#ctor(UnifiedAutomation.UaServer.ApplicationCertificateModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ApplicationCertificateModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.RsaMinApplicationCertificateModel">
            <summary>
            This type is used to describe Certificates intended for use as an
            ApplicationInstance certificate.
            </summary>
            <remarks>
            They shall have an RSA key size of 1024 or 2048 bits and are signed with a SHA1
            hash. All applications which support the Basic128Rsa15 and Basic256 profiles
            (see Part 7 of the OPC UA Specification) need a certificate of this type.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RsaMinApplicationCertificateModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.RsaMinApplicationCertificateModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RsaMinApplicationCertificateModel.#ctor(UnifiedAutomation.UaServer.RsaMinApplicationCertificateModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.RsaMinApplicationCertificateModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.RsaSha256ApplicationCertificateModel">
            <summary>
            This type is used to describe certificate s intended for use as an
            ApplicationInstance certificate.
            </summary>
            <remarks>
            They shall have an RSA key size of 2048, 3072 or 4096 bits and are signed with
            a SHA256 hash. All applications which support the Basic256Sha256 profile (see
            Part 7 of the OPC UA Specification) need a certificate of this type.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RsaSha256ApplicationCertificateModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.RsaSha256ApplicationCertificateModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RsaSha256ApplicationCertificateModel.#ctor(UnifiedAutomation.UaServer.RsaSha256ApplicationCertificateModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.RsaSha256ApplicationCertificateModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.HttpsCertificateModel">
            <summary>
            This type is used to describe Certificates that are intended for use as HTTPS
            certificates.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.HttpsCertificateModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.HttpsCertificateModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.HttpsCertificateModel.#ctor(UnifiedAutomation.UaServer.HttpsCertificateModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.HttpsCertificateModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.UserCredentialCertificateModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.UserCredentialCertificateModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.UserCredentialCertificateModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.UserCredentialCertificateModel.#ctor(UnifiedAutomation.UaServer.UserCredentialCertificateModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.UserCredentialCertificateModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ConnectionTransportModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ConnectionTransportModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ConnectionTransportModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ConnectionTransportModel.#ctor(UnifiedAutomation.UaServer.ConnectionTransportModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ConnectionTransportModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.DatagramConnectionTransportModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DatagramConnectionTransportModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.DatagramConnectionTransportModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DatagramConnectionTransportModel.#ctor(UnifiedAutomation.UaServer.DatagramConnectionTransportModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.DatagramConnectionTransportModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DatagramConnectionTransportModel.DiscoveryAddress">
            <summary>
            Gets or sets the DiscoveryAddress
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.DataSetReaderMessageModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DataSetReaderMessageModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.DataSetReaderMessageModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DataSetReaderMessageModel.#ctor(UnifiedAutomation.UaServer.DataSetReaderMessageModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.DataSetReaderMessageModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.JsonDataSetReaderMessageModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.JsonDataSetReaderMessageModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.JsonDataSetReaderMessageModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.JsonDataSetReaderMessageModel.#ctor(UnifiedAutomation.UaServer.JsonDataSetReaderMessageModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.JsonDataSetReaderMessageModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.JsonDataSetReaderMessageModel.DataSetMessageContentMask">
            <summary>
            Gets or sets the DataSetMessageContentMask
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.JsonDataSetReaderMessageModel.NetworkMessageContentMask">
            <summary>
            Gets or sets the NetworkMessageContentMask
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.UadpDataSetReaderMessageModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.UadpDataSetReaderMessageModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.UadpDataSetReaderMessageModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.UadpDataSetReaderMessageModel.#ctor(UnifiedAutomation.UaServer.UadpDataSetReaderMessageModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.UadpDataSetReaderMessageModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.UadpDataSetReaderMessageModel.DataSetClassId">
            <summary>
            Gets or sets the DataSetClassId
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.UadpDataSetReaderMessageModel.DataSetMessageContentMask">
            <summary>
            Gets or sets the DataSetMessageContentMask
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.UadpDataSetReaderMessageModel.DataSetOffset">
            <summary>
            Gets or sets the DataSetOffset
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.UadpDataSetReaderMessageModel.DataSetOrdering">
            <summary>
            Gets or sets the DataSetOrdering
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.UadpDataSetReaderMessageModel.GroupVersion">
            <summary>
            Gets or sets the GroupVersion
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.UadpDataSetReaderMessageModel.NetworkMessageContentMask">
            <summary>
            Gets or sets the NetworkMessageContentMask
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.UadpDataSetReaderMessageModel.NetworkMessageNumber">
            <summary>
            Gets or sets the NetworkMessageNumber
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.UadpDataSetReaderMessageModel.ProcessingOffset">
            <summary>
            Gets or sets the ProcessingOffset
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.UadpDataSetReaderMessageModel.PublishingInterval">
            <summary>
            Gets or sets the PublishingInterval
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.UadpDataSetReaderMessageModel.ReceiveOffset">
            <summary>
            Gets or sets the ReceiveOffset
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.DataSetReaderTransportModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DataSetReaderTransportModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.DataSetReaderTransportModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DataSetReaderTransportModel.#ctor(UnifiedAutomation.UaServer.DataSetReaderTransportModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.DataSetReaderTransportModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.BrokerDataSetReaderTransportModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BrokerDataSetReaderTransportModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.BrokerDataSetReaderTransportModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BrokerDataSetReaderTransportModel.#ctor(UnifiedAutomation.UaServer.BrokerDataSetReaderTransportModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.BrokerDataSetReaderTransportModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.BrokerDataSetReaderTransportModel.AuthenticationProfileUri">
            <summary>
            Gets or sets the AuthenticationProfileUri
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.BrokerDataSetReaderTransportModel.MetaDataQueueName">
            <summary>
            Gets or sets the MetaDataQueueName
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.BrokerDataSetReaderTransportModel.QueueName">
            <summary>
            Gets or sets the QueueName
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.BrokerDataSetReaderTransportModel.RequestedDeliveryGuarantee">
            <summary>
            Gets or sets the RequestedDeliveryGuarantee
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.BrokerDataSetReaderTransportModel.ResourceUri">
            <summary>
            Gets or sets the ResourceUri
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.DataSetReaderModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DataSetReaderModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.DataSetReaderModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DataSetReaderModel.#ctor(UnifiedAutomation.UaServer.DataSetReaderModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.DataSetReaderModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DataSetReaderModel.DataSetFieldContentMask">
            <summary>
            Gets or sets the DataSetFieldContentMask
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DataSetReaderModel.DataSetMetaData">
            <summary>
            Gets or sets the DataSetMetaData
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DataSetReaderModel.DataSetReaderProperties">
            <summary>
            Gets or sets the DataSetReaderProperties
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DataSetReaderModel.DataSetWriterId">
            <summary>
            Gets or sets the DataSetWriterId
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DataSetReaderModel.Diagnostics">
            <summary>
            Gets or sets the Diagnostics
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DataSetReaderModel.MessageReceiveTimeout">
            <summary>
            Gets or sets the MessageReceiveTimeout
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DataSetReaderModel.MessageSettings">
            <summary>
            Gets or sets the MessageSettings
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DataSetReaderModel.PublisherId">
            <summary>
            Gets or sets the PublisherId
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DataSetReaderModel.SecurityGroupId">
            <summary>
            Gets or sets the SecurityGroupId
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DataSetReaderModel.SecurityKeyServices">
            <summary>
            Gets or sets the SecurityKeyServices
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DataSetReaderModel.SecurityMode">
            <summary>
            Gets or sets the SecurityMode
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DataSetReaderModel.Status">
            <summary>
            Gets or sets the Status
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DataSetReaderModel.SubscribedDataSet">
            <summary>
            Gets or sets the SubscribedDataSet
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DataSetReaderModel.TransportSettings">
            <summary>
            Gets or sets the TransportSettings
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DataSetReaderModel.WriterGroupId">
            <summary>
            Gets or sets the WriterGroupId
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DataSetReaderModel.GetMethodDispatcher(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Gets the method dispatcher.
            </summary>
            <param name="context">The context.</param>
            <param name="objectId">The object id.</param>
            <param name="methodId">The method id.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DataSetReaderModel.DispatchMethod(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MethodHandle,System.Collections.Generic.IList{UnifiedAutomation.UaBase.Variant},System.Collections.Generic.List{UnifiedAutomation.UaBase.StatusCode},System.Collections.Generic.List{UnifiedAutomation.UaBase.Variant})">
            <summary>
            Dispatches the method.
            </summary>
            <param name="context">The context.</param>
            <param name="methodHandle">The method handle.</param>
            <param name="inputArguments">The input arguments.</param>
            <param name="inputArgumentResults">The input argument results.</param>
            <param name="outputArguments">The output arguments.</param>
            <returns></returns>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DataSetReaderModel.DataSetReaderMethods">
            <summary>
            Gets or sets the DataSetReader methods.
            </summary>
            <value>
            The DataSetReader methods.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.IDataSetReaderMethods">
            <summary>
            The interface for methods implemented on the DataSetReaderModel object.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IDataSetReaderMethods.CreateDataSetMirror(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.DataSetReaderModel,System.String,UnifiedAutomation.UaBase.RolePermissionType[],UnifiedAutomation.UaBase.NodeId@)">
            <summary>
            </summary>
            <param name="context"></param>
            <param name="model"></param>
            <param name="ParentNodeName"></param>
            <param name="RolePermissions"></param>
            <param name="ParentNodeId">out: </param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IDataSetReaderMethods.CreateTargetVariables(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.DataSetReaderModel,UnifiedAutomation.UaBase.ConfigurationVersionDataType,UnifiedAutomation.UaBase.FieldTargetDataType[],UnifiedAutomation.UaBase.StatusCode[]@)">
            <summary>
            </summary>
            <param name="context"></param>
            <param name="model"></param>
            <param name="ConfigurationVersion"></param>
            <param name="TargetVariablesToAdd"></param>
            <param name="AddResults">out: </param>
            <returns></returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.DataSetWriterMessageModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DataSetWriterMessageModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.DataSetWriterMessageModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DataSetWriterMessageModel.#ctor(UnifiedAutomation.UaServer.DataSetWriterMessageModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.DataSetWriterMessageModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.JsonDataSetWriterMessageModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.JsonDataSetWriterMessageModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.JsonDataSetWriterMessageModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.JsonDataSetWriterMessageModel.#ctor(UnifiedAutomation.UaServer.JsonDataSetWriterMessageModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.JsonDataSetWriterMessageModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.JsonDataSetWriterMessageModel.DataSetMessageContentMask">
            <summary>
            Gets or sets the DataSetMessageContentMask
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.UadpDataSetWriterMessageModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.UadpDataSetWriterMessageModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.UadpDataSetWriterMessageModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.UadpDataSetWriterMessageModel.#ctor(UnifiedAutomation.UaServer.UadpDataSetWriterMessageModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.UadpDataSetWriterMessageModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.UadpDataSetWriterMessageModel.ConfiguredSize">
            <summary>
            Gets or sets the ConfiguredSize
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.UadpDataSetWriterMessageModel.DataSetMessageContentMask">
            <summary>
            Gets or sets the DataSetMessageContentMask
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.UadpDataSetWriterMessageModel.DataSetOffset">
            <summary>
            Gets or sets the DataSetOffset
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.UadpDataSetWriterMessageModel.NetworkMessageNumber">
            <summary>
            Gets or sets the NetworkMessageNumber
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.DataSetWriterTransportModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DataSetWriterTransportModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.DataSetWriterTransportModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DataSetWriterTransportModel.#ctor(UnifiedAutomation.UaServer.DataSetWriterTransportModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.DataSetWriterTransportModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.BrokerDataSetWriterTransportModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BrokerDataSetWriterTransportModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.BrokerDataSetWriterTransportModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BrokerDataSetWriterTransportModel.#ctor(UnifiedAutomation.UaServer.BrokerDataSetWriterTransportModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.BrokerDataSetWriterTransportModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.BrokerDataSetWriterTransportModel.AuthenticationProfileUri">
            <summary>
            Gets or sets the AuthenticationProfileUri
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.BrokerDataSetWriterTransportModel.MetaDataQueueName">
            <summary>
            Gets or sets the MetaDataQueueName
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.BrokerDataSetWriterTransportModel.MetaDataUpdateTime">
            <summary>
            Gets or sets the MetaDataUpdateTime
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.BrokerDataSetWriterTransportModel.QueueName">
            <summary>
            Gets or sets the QueueName
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.BrokerDataSetWriterTransportModel.RequestedDeliveryGuarantee">
            <summary>
            Gets or sets the RequestedDeliveryGuarantee
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.BrokerDataSetWriterTransportModel.ResourceUri">
            <summary>
            Gets or sets the ResourceUri
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.DataSetWriterModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DataSetWriterModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.DataSetWriterModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DataSetWriterModel.#ctor(UnifiedAutomation.UaServer.DataSetWriterModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.DataSetWriterModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DataSetWriterModel.DataSetFieldContentMask">
            <summary>
            Gets or sets the DataSetFieldContentMask
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DataSetWriterModel.DataSetWriterId">
            <summary>
            Gets or sets the DataSetWriterId
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DataSetWriterModel.DataSetWriterProperties">
            <summary>
            Gets or sets the DataSetWriterProperties
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DataSetWriterModel.Diagnostics">
            <summary>
            Gets or sets the Diagnostics
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DataSetWriterModel.KeyFrameCount">
            <summary>
            Gets or sets the KeyFrameCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DataSetWriterModel.MessageSettings">
            <summary>
            Gets or sets the MessageSettings
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DataSetWriterModel.Status">
            <summary>
            Gets or sets the Status
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DataSetWriterModel.TransportSettings">
            <summary>
            Gets or sets the TransportSettings
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.DataTypeEncodingModel">
             <summary>
             Used as type for DataTypeEncodings.
             </summary>
             <remarks>
             Different kinds of DataTypes are handled differently regarding their encoding
             and whether this encoding is represented in the AddressSpace.
            
             Built-in DataTypes are a fixed set of DataTypes (see Part 6 of the OPC UA
             Specification for a complete list of Built-in DataTypes). They have no
             encodings visible in the AddressSpace since the encoding should be known to all
             OPC UA products. Examples of Built-in DataTypes are Int32 and Double.
            
             Simple DataTypes are subtypes of the Built-in DataTypes. They are handled on
             the wire like the Built-in DataType, i.e. they cannot be distinguished on the
             wire from their Built-in supertypes. Since they are handled like Built-in
             DataTypes regarding the encoding they cannot have encodings defined in the
             AddressSpace. Clients can read the DataType Attribute of a Variable or
             VariableType to identify the Simple DataType of the Value Attribute. An example
             of a Simple DataType is Duration. It is handled on the wire as a Double but the
             Client can read the DataType Attribute and thus interpret the value as defined
             by Duration.
            
             Structured DataTypes are DataTypes that represent structured data and are not
             defined as Built-in DataTypes. Structured DataTypes inherit directly or
             indirectly from the DataType Structure. Structured DataTypes may have several
             encodings and the encodings are exposed in the AddressSpace. How the encoding
             of Structured DataTypes is handled on the wire is defined in Part 6 of the OPC
             UA Specification. The encoding of the Structured DataType is transmitted with
             each value, thus Clients are aware of the DataType without reading the DataType
             Attribute. The encoding has to be transmitted so the Client is able to
             interpret the data. An example of a Structured DataType is Argument.
            
             Enumeration DataTypes are DataTypes that represent discrete sets of named
             values. Enumerations are always encoded as Int32 on the wire as defined in Part
             6 of the OPC UA Specification. Enumeration DataTypes inherit directly or
             indirectly from the DataType Enumeration. Enumerations have no encodings
             exposed in the AddressSpace. To expose the human-readable representation of an
             enumerated value the DataType Node may have the EnumStrings Property that
             contains an array of LocalizedText. The Integer representation of the
             enumeration value points to a position within that array. The EnumValues
             Property can be used instead of the EnumStrings to support integer
             representation of enumerations that are not zero-based or have gaps. It
             contains an array of a Structured DataType containing the integer
             representation as well as the human-readable representation. An example of an
             enumeration DataType containing a sparse list of Integers is NodeClass.
            
             In addition to the DataTypes described above, abstract DataTypes are also
             supported, which do not have any encodings and cannot be exchanged on the wire.
             Variables and VariableTypes use abstract DataTypes to indicate that their Value
             may be any one of the subtypes of the abstract DataType. An example of an
             abstract DataType is Integer.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DataTypeEncodingModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.DataTypeEncodingModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DataTypeEncodingModel.#ctor(UnifiedAutomation.UaServer.DataTypeEncodingModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.DataTypeEncodingModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.DataTypeSystemModel">
            <summary>
            Used as type for DataTypeSystems.
            </summary>
            <remarks>
            See Part 3 of the OPC UA Specification for a definition of DataTypeSystems.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DataTypeSystemModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.DataTypeSystemModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DataTypeSystemModel.#ctor(UnifiedAutomation.UaServer.DataTypeSystemModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.DataTypeSystemModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ExtensionFieldsModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ExtensionFieldsModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ExtensionFieldsModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ExtensionFieldsModel.#ctor(UnifiedAutomation.UaServer.ExtensionFieldsModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ExtensionFieldsModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ExtensionFieldsModel.GetMethodDispatcher(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Gets the method dispatcher.
            </summary>
            <param name="context">The context.</param>
            <param name="objectId">The object id.</param>
            <param name="methodId">The method id.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ExtensionFieldsModel.DispatchMethod(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MethodHandle,System.Collections.Generic.IList{UnifiedAutomation.UaBase.Variant},System.Collections.Generic.List{UnifiedAutomation.UaBase.StatusCode},System.Collections.Generic.List{UnifiedAutomation.UaBase.Variant})">
            <summary>
            Dispatches the method.
            </summary>
            <param name="context">The context.</param>
            <param name="methodHandle">The method handle.</param>
            <param name="inputArguments">The input arguments.</param>
            <param name="inputArgumentResults">The input argument results.</param>
            <param name="outputArguments">The output arguments.</param>
            <returns></returns>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ExtensionFieldsModel.ExtensionFieldsMethods">
            <summary>
            Gets or sets the ExtensionFields methods.
            </summary>
            <value>
            The ExtensionFields methods.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.IExtensionFieldsMethods">
            <summary>
            The interface for methods implemented on the ExtensionFieldsModel object.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IExtensionFieldsMethods.AddExtensionField(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.ExtensionFieldsModel,UnifiedAutomation.UaBase.QualifiedName,UnifiedAutomation.UaBase.Variant,UnifiedAutomation.UaBase.NodeId@)">
            <summary>
            </summary>
            <param name="context"></param>
            <param name="model"></param>
            <param name="FieldName"></param>
            <param name="FieldValue"></param>
            <param name="FieldId">out: </param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IExtensionFieldsMethods.RemoveExtensionField(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.ExtensionFieldsModel,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            </summary>
            <param name="context"></param>
            <param name="model"></param>
            <param name="FieldId"></param>
            <returns></returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.IFileMethods">
            <summary>
            The interface for methods implemented on the FileModel object.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IFileMethods.Close(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.FileModel,System.UInt32)">
            <summary>
            Closes a file represented by a
            <see cref="T:UnifiedAutomation.UaServer.FileModel"/>.
            </summary>
            <remarks>
            When a client closes a file, the handle becomes invalid.
            </remarks>
            <param name="context"></param>
            <param name="model"></param>
            <param name="FileHandle">
            A handle returned by the
            <see cref="M:UnifiedAutomation.UaServer.IFileMethods.Open(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.FileModel,System.Byte,System.UInt32@)"/> method, indicating
            the access request and thus indirectly the position inside the file.
            </param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IFileMethods.GetPosition(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.FileModel,System.UInt32,System.UInt64@)">
            <summary>
            Provides the current position of the FileHandle.
            </summary>
            <param name="context"></param>
            <param name="model"></param>
            <param name="FileHandle">
            A handle returned by the
            <see cref="M:UnifiedAutomation.UaServer.IFileMethods.Open(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.FileModel,System.Byte,System.UInt32@)"/> method, indicating
            the access request and thus indirectly the position inside the file.
            </param>
            <param name="Position">
            The position of the FileHandle in the file.
            If <see cref="M:UnifiedAutomation.UaServer.IFileMethods.Read(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.FileModel,System.UInt32,System.Int32,System.Byte[]@)"/> or
            <see cref="M:UnifiedAutomation.UaServer.IFileMethods.Write(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.FileModel,System.UInt32,System.Byte[])"/> is called, it
            starts at that position.
            </param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IFileMethods.Open(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.FileModel,System.Byte,System.UInt32@)">
            <summary>
            Opens a file represented by an object of
            <see cref="T:UnifiedAutomation.UaServer.FileModel"/>.
            </summary>
            <remarks>
            When a client opens a file, it gets a FileHandle that is valid while the
            session is open. Clients shall use the
            <see cref="M:UnifiedAutomation.UaServer.IFileMethods.Close(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.FileModel,System.UInt32)"/> method to release
            the handle when they do not need access to the file anymore. Clients can open
            the same file several times for reading. A request to open for writing shall
            return Bad_NotWritable when the file is already opened.
            </remarks>
            <param name="context"></param>
            <param name="model"></param>
            <param name="Mode">
            Indicates whether the file should be opened only for read operations or for
            read and write operations and where the initial position is set.
            The mode is an 8-bit unsigned integer used as bit mask with the structure
            defined in the following table:
            Field         | Bit | Description
            --------------|-----|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
            Read          | 0   | The file is opened for reading. If this bit is not set the <see cref="M:UnifiedAutomation.UaServer.IFileMethods.Read(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.FileModel,System.UInt32,System.Int32,System.Byte[]@)"/> method cannot be executed.
            Write         | 1   | The file is opened for writing. If this bit is not set the <see cref="M:UnifiedAutomation.UaServer.IFileMethods.Write(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.FileModel,System.UInt32,System.Byte[])"/> method cannot be executed.
            EraseExisting | 2   | This bit can only be set if the file is opened for writing (Write bit is set). The existing content of the file is erased and an empty file is provided.
            Append        | 3   | When the Append bit is set the file is opened at end of the file, otherwise at begin of the file. The <see cref="M:UnifiedAutomation.UaServer.IFileMethods.SetPosition(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.FileModel,System.UInt32,System.UInt64)"/> Method can be used to change the position.
            </param>
            <param name="FileHandle">
            A handle for the file used in other method calls indicating not the file (this
            is done by the object of the method call) but the access request and thus the
            position in the file.
            The FileHandle is generated by the server and is unique for the Session.
            Clients cannot transfer the FileHandle to another Session but need to get a new
            FileHandle by calling the
            <see cref="M:UnifiedAutomation.UaServer.IFileMethods.Open(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.FileModel,System.Byte,System.UInt32@)"/> method.
            </param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IFileMethods.Read(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.FileModel,System.UInt32,System.Int32,System.Byte[]@)">
            <summary>
            Reads a part of the file starting from the current file position.
            </summary>
            <remarks>
            The file position is advanced by the number of bytes read.
            </remarks>
            <param name="context"></param>
            <param name="model"></param>
            <param name="FileHandle">
            A handle returned by the
            <see cref="M:UnifiedAutomation.UaServer.IFileMethods.Open(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.FileModel,System.Byte,System.UInt32@)"/> method, indicating
            the access request and thus indirectly the position inside the file.
            </param>
            <param name="Length">
            Defines the length in bytes that should be returned in data, starting from the
            current position of the file handle.
            If the end of file is reached, all data until the end of the file is returned.
            The Server is allowed to return less data than the specified length. Only
            positive values are allowed.
            </param>
            <param name="Data">
            Contains the returned data of the file.
            If the ByteString is empty, it indicates that the end of the file is reached.
            </param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IFileMethods.SetPosition(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.FileModel,System.UInt32,System.UInt64)">
            <summary>
            Sets the current position of the FileHandle.
            </summary>
            <param name="context"></param>
            <param name="model"></param>
            <param name="FileHandle">
            A handle indicating the access request and thus indirectly the position inside
            the file.
            </param>
            <param name="Position">
            The position to be set for the FileHandle in the file.
            If <see cref="M:UnifiedAutomation.UaServer.IFileMethods.Read(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.FileModel,System.UInt32,System.Int32,System.Byte[]@)"/> or
            <see cref="M:UnifiedAutomation.UaServer.IFileMethods.Write(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.FileModel,System.UInt32,System.Byte[])"/> is called, it
            starts at that position. If the position is higher than the file size, the
            position is set to the end of the file.
            </param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IFileMethods.Write(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.FileModel,System.UInt32,System.Byte[])">
            <summary>
            Writes a part of the file starting from the current file position.
            </summary>
            <remarks>
            The file position is advanced by the number of bytes written
            </remarks>
            <param name="context"></param>
            <param name="model"></param>
            <param name="FileHandle">
            A handle returned by the
            <see cref="M:UnifiedAutomation.UaServer.IFileMethods.Open(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.FileModel,System.Byte,System.UInt32@)"/> method, indicating
            the access request and thus indirectly the position inside the file.
            </param>
            <param name="Data">
            Contains the data to be written at the position of the file.
            It is server-dependent whether the written data are persistently stored if the
            session is ended without calling the
            <see cref="M:UnifiedAutomation.UaServer.IFileMethods.Close(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.FileModel,System.UInt32)"/> method with the
            FileHandle.
            Writing an empty or null ByteString returns a Good result code without any
            effect on the file.
            </param>
            <returns></returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AddressSpaceFileModel">
             <summary>
             This object type defines the file for a namespace provided by the OPC UA
             Server.
             </summary>
             <remarks>
             It represents an XML address space file using the XML schema defined in Part 6
             of the OPC UA Specification.
            
             Servers might provide some vendor-specific mechanisms importing parts of an
             address space as subtype of this object type, for example by defining
             appropriate methods.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AddressSpaceFileModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AddressSpaceFileModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AddressSpaceFileModel.#ctor(UnifiedAutomation.UaServer.AddressSpaceFileModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AddressSpaceFileModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AddressSpaceFileModel.GetMethodDispatcher(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Gets the method dispatcher.
            </summary>
            <param name="context">The context.</param>
            <param name="objectId">The object id.</param>
            <param name="methodId">The method id.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AddressSpaceFileModel.DispatchMethod(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MethodHandle,System.Collections.Generic.IList{UnifiedAutomation.UaBase.Variant},System.Collections.Generic.List{UnifiedAutomation.UaBase.StatusCode},System.Collections.Generic.List{UnifiedAutomation.UaBase.Variant})">
            <summary>
            Dispatches the method.
            </summary>
            <param name="context">The context.</param>
            <param name="methodHandle">The method handle.</param>
            <param name="inputArguments">The input arguments.</param>
            <param name="inputArgumentResults">The input argument results.</param>
            <param name="outputArguments">The output arguments.</param>
            <returns></returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.IAddressSpaceFileMethods">
            <summary>
            The interface for methods implemented on the AddressSpaceFileModel object.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IAddressSpaceFileMethods.ExportNamespace(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.AddressSpaceFileModel)">
            <summary>
            Provides a way to export the namespace from the Server address space to the XML
            file represented by the AddressSpaceFileType.
            </summary>
            <remarks>
            Value attributes are only exported if they represent static configuration
            information. The client is expected to call the ExportNamespace method first to
            update the XML file and then access the file with the methods defined in the
            <see cref="T:UnifiedAutomation.UaServer.FileModel"/>.
            </remarks>
            <param name="context"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ITrustListMethods">
            <summary>
            The interface for methods implemented on the TrustListModel object.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ITrustListMethods.AddCertificate(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.TrustListModel,System.Byte[],System.Boolean)">
             <summary>
             Allows a Client to add a single certificate to the trust list.
             </summary>
             <remarks>
             The Server shall verify that the certificate is valid according to the
             mandatory rules defined in Part 4 of the OPC UA Specification. If an invalid
             certificate is found, the Server shall return an error and shall not update the
             trust list.
            
             This method cannot be called if the file object is open.
            
             <b>Method Result Codes</b>
            
             Result Code            | Description
             -----------------------|-----------------------------------------------------
             Bad_UserAccessDenied   | The current user does not have the rights required.
             Bad_CertificateInvalid | The certificate to add is invalid.
             Bad_InvalidState       | The object is opened.
             </remarks>
             <param name="context"></param>
             <param name="model"></param>
             <param name="Certificate">
             The DER encoded certificate to add.
             </param>
             <param name="IsTrustedCertificate">
             If TRUE, the certificate is added to the trusted certificate s list.
             If FALSE, the certificate is added to the Issuer certificate s list.
             </param>
             <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ITrustListMethods.CloseAndUpdate(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.TrustListModel,System.UInt32,System.Boolean@)">
             <summary>
             Closes the file and applies the changes to the trust list.
             </summary>
             <remarks>
             This method can only be called if the file was opened for writing. If the Close
             method is called, any cached data is discarded and the trust list is not
             changed.
            
             The Server shall verify that every certificate in the new trust list is valid
             according to the mandatory rules defined in Part 4 of the OPC UA Specification.
             If an invalid certificate is found, the Server shall return an error and shall
             not update the trust list. If only part of the trust list is being updated, the
             Server creates a temporary trust list that includes the existing trust list
             plus any updates and validates the temporary trust list.
            
             If the file cannot be processed, this method still closes the file and discards
             the data before returning an error. This method is required if the Server
             supports updates to the trust list.
            
             The structure uploaded includes a mask that specifies which fields are updated.
             If a bit is not set, the associated field is not changed.
            
             <b>Method Result Codes</b>
            
             Result Code            | Description
             -----------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------
             Bad_UserAccessDenied   | The current user does not have the rights required.
             Bad_CertificateInvalid | The Server could not validate all certificate s in the trust list. The DiagnosticInfo shall specify which certificate (s) are invalid and the specific error.
             </remarks>
             <param name="context"></param>
             <param name="model"></param>
             <param name="FileHandle">
             The handle of the previously opened file.
             </param>
             <param name="ApplyChangesRequired">
             A flag indicating whether the
             <see cref="M:UnifiedAutomation.UaServer.IServerConfigurationMethods.ApplyChanges(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.ServerConfigurationModel)"/>
             method must be called before the new trust list will be used by the Server.
             </param>
             <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ITrustListMethods.OpenWithMasks(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.TrustListModel,System.UInt32,System.UInt32@)">
             <summary>
             Allows a Client to read only the portion of the trust list.
             </summary>
             <remarks>
             This method can only be used to read the trust list.
            
             <b>Method Result Codes</b>
            
             Result Code          | Description
             ---------------------|-----------------------------------------------------
             Bad_UserAccessDenied | The current user does not have the rights required.
             </remarks>
             <param name="context"></param>
             <param name="model"></param>
             <param name="Masks">
             The parts of the trust list that are to be included in the file to read.
             </param>
             <param name="FileHandle">
             The handle of the newly opened file.
             </param>
             <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ITrustListMethods.RemoveCertificate(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.TrustListModel,System.String,System.Boolean)">
             <summary>
             Allows a Client to remove a single certificate from the trust list.
             </summary>
             <remarks>
             This method returns Bad_InvalidArgument if the thumbprint does not match a
             certificate in the trust list.
            
             This method cannot be called if the file object is open.
            
             <b>Method Result Codes</b>
            
             Result Code          | Description
             ---------------------|-----------------------------------------------------
             Bad_UserAccessDenied | The current user does not have the rights required.
             Bad_InvalidArgument  | The certificate to remove was not found.
             Bad_InvalidState     | The object is opened.
             </remarks>
             <param name="context"></param>
             <param name="model"></param>
             <param name="Thumbprint">
             The SHA1 hash of the certificate to remove.
             </param>
             <param name="IsTrustedCertificate">
             If TRUE, the certificate is removed from the trusted certificate s list.
             If FALSE, the certificate is removed from the Issuer certificate s list.
             </param>
             <returns></returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.FolderModel">
            <summary>
            Instances of this Type are used to organise the AddressSpace into a hierarchy
            of Nodes.
            </summary>
            <remarks>
            They represent the root Node of a subtree, and have no other semantics
            associated with them. However, the DisplayName of an instance of the
            FolderType, such as “ObjectTypes”, should imply the semantics associated with
            the use of it. There are no References specified for this ObjectType.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FolderModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.FolderModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FolderModel.#ctor(UnifiedAutomation.UaServer.FolderModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.FolderModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AlarmGroupModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AlarmGroupModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AlarmGroupModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AlarmGroupModel.#ctor(UnifiedAutomation.UaServer.AlarmGroupModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AlarmGroupModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.CertificateGroupFolderModel">
            <summary>
            This type is used for Folders which organize certificate groups in the address
            space.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.CertificateGroupFolderModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.CertificateGroupFolderModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.CertificateGroupFolderModel.#ctor(UnifiedAutomation.UaServer.CertificateGroupFolderModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.CertificateGroupFolderModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CertificateGroupFolderModel.DefaultApplicationGroup">
            <summary>
            Represents the default certificate group for applications.
            </summary>
            <remarks>
            This object is used to access the default application trust list and to define
            the CertificateTypes allowed for the ApplicationInstance certificate. It shall
            specify the
            <see cref="T:UnifiedAutomation.UaServer.ApplicationCertificateModel"/> NodeId as
            a single entry in the CertificateTypes list, or it shall specify one or more
            subtypes of
            <see cref="T:UnifiedAutomation.UaServer.ApplicationCertificateModel"/>.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CertificateGroupFolderModel.DefaultHttpsGroup">
            <summary>
            Represents the default certificate group for HTTPS communication.
            </summary>
            <remarks>
            This object is used to access the default HTTPS trust list and to define the
            CertificateTypes allowed for the HTTPS certificate. It shall specify the
            <see cref="T:UnifiedAutomation.UaServer.HttpsCertificateModel"/> NodeId as a
            single entry in the CertificateTypes list or it shall specify one or more
            subtypes of <see cref="T:UnifiedAutomation.UaServer.HttpsCertificateModel"/>.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CertificateGroupFolderModel.DefaultUserTokenGroup">
            <summary>
            Represents the default certificate group for validating user credentials.
            </summary>
            <remarks>
            This object is used to access the default user credential trust list and to
            define the CertificateTypes allowed for user credentials certificate. trust
            list and to define the CertificateTypes allowed for user credentials
            certificate. This object shall leave CertificateTypes list empty.
            </remarks>
        </member>
        <member name="T:UnifiedAutomation.UaServer.DataSetFolderModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DataSetFolderModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.DataSetFolderModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DataSetFolderModel.#ctor(UnifiedAutomation.UaServer.DataSetFolderModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.DataSetFolderModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DataSetFolderModel.GetMethodDispatcher(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Gets the method dispatcher.
            </summary>
            <param name="context">The context.</param>
            <param name="objectId">The object id.</param>
            <param name="methodId">The method id.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DataSetFolderModel.DispatchMethod(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MethodHandle,System.Collections.Generic.IList{UnifiedAutomation.UaBase.Variant},System.Collections.Generic.List{UnifiedAutomation.UaBase.StatusCode},System.Collections.Generic.List{UnifiedAutomation.UaBase.Variant})">
            <summary>
            Dispatches the method.
            </summary>
            <param name="context">The context.</param>
            <param name="methodHandle">The method handle.</param>
            <param name="inputArguments">The input arguments.</param>
            <param name="inputArgumentResults">The input argument results.</param>
            <param name="outputArguments">The output arguments.</param>
            <returns></returns>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DataSetFolderModel.DataSetFolderMethods">
            <summary>
            Gets or sets the DataSetFolder methods.
            </summary>
            <value>
            The DataSetFolder methods.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.IDataSetFolderMethods">
            <summary>
            The interface for methods implemented on the DataSetFolderModel object.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IDataSetFolderMethods.AddDataSetFolder(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.DataSetFolderModel,System.String,UnifiedAutomation.UaBase.NodeId@)">
            <summary>
            </summary>
            <param name="context"></param>
            <param name="model"></param>
            <param name="Name"></param>
            <param name="DataSetFolderNodeId">out: </param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IDataSetFolderMethods.AddPublishedDataItems(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.DataSetFolderModel,System.String,System.String[],System.UInt16[],UnifiedAutomation.UaBase.PublishedVariableDataType[],UnifiedAutomation.UaBase.NodeId@,UnifiedAutomation.UaBase.ConfigurationVersionDataType@,UnifiedAutomation.UaBase.StatusCode[]@)">
            <summary>
            </summary>
            <param name="context"></param>
            <param name="model"></param>
            <param name="Name"></param>
            <param name="FieldNameAliases"></param>
            <param name="FieldFlags"></param>
            <param name="VariablesToAdd"></param>
            <param name="DataSetNodeId">out: </param>
            <param name="ConfigurationVersion">out: </param>
            <param name="AddResults">out: </param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IDataSetFolderMethods.AddPublishedDataItemsTemplate(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.DataSetFolderModel,System.String,UnifiedAutomation.UaBase.DataSetMetaDataType,UnifiedAutomation.UaBase.PublishedVariableDataType[],UnifiedAutomation.UaBase.NodeId@,UnifiedAutomation.UaBase.StatusCode[]@)">
            <summary>
            </summary>
            <param name="context"></param>
            <param name="model"></param>
            <param name="Name"></param>
            <param name="DataSetMetaData"></param>
            <param name="VariablesToAdd"></param>
            <param name="DataSetNodeId">out: </param>
            <param name="AddResults">out: </param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IDataSetFolderMethods.AddPublishedEvents(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.DataSetFolderModel,System.String,UnifiedAutomation.UaBase.NodeId,System.String[],System.UInt16[],UnifiedAutomation.UaBase.SimpleAttributeOperand[],UnifiedAutomation.UaBase.ContentFilter,UnifiedAutomation.UaBase.ConfigurationVersionDataType@,UnifiedAutomation.UaBase.NodeId@)">
            <summary>
            </summary>
            <param name="context"></param>
            <param name="model"></param>
            <param name="Name"></param>
            <param name="EventNotifier"></param>
            <param name="FieldNameAliases"></param>
            <param name="FieldFlags"></param>
            <param name="SelectedFields"></param>
            <param name="Filter"></param>
            <param name="ConfigurationVersion">out: </param>
            <param name="DataSetNodeId">out: </param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IDataSetFolderMethods.AddPublishedEventsTemplate(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.DataSetFolderModel,System.String,UnifiedAutomation.UaBase.DataSetMetaDataType,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.SimpleAttributeOperand[],UnifiedAutomation.UaBase.ContentFilter,UnifiedAutomation.UaBase.NodeId@)">
            <summary>
            </summary>
            <param name="context"></param>
            <param name="model"></param>
            <param name="Name"></param>
            <param name="DataSetMetaData"></param>
            <param name="EventNotifier"></param>
            <param name="SelectedFields"></param>
            <param name="Filter"></param>
            <param name="DataSetNodeId">out: </param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IDataSetFolderMethods.RemoveDataSetFolder(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.DataSetFolderModel,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            </summary>
            <param name="context"></param>
            <param name="model"></param>
            <param name="DataSetFolderNodeId"></param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IDataSetFolderMethods.RemovePublishedDataSet(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.DataSetFolderModel,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            </summary>
            <param name="context"></param>
            <param name="model"></param>
            <param name="DataSetNodeId"></param>
            <returns></returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.IFileDirectoryMethods">
            <summary>
            The interface for methods implemented on the FileDirectoryModel object.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IFileDirectoryMethods.CreateDirectory(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.FileDirectoryModel,System.String,UnifiedAutomation.UaBase.NodeId@)">
             <summary>
             Creates a new FileDirectoryType object organized by this object.
             </summary>
             <remarks>
             <b>Method Result Codes</b>
            
             Result Code              | Description
             -------------------------|-----------------------------------------------------------------------
             Bad_BrowseNameDuplicated | A directory with the name already exists.
             Bad_UserAccessDenied     | The user does not have permission to perform the requested operation.
             </remarks>
             <param name="context"></param>
             <param name="model"></param>
             <param name="DirectoryName">
             The name of the directory to create.
             The name is used for the BrowseName and DisplayName of the directory object and
             also for the directory in the file system.
             For the BrowseName, the directoryName is used for the name part of the
             QualifiedName. The namespace index is Server specific.
             For the DisplayName, the directoryName is used for the text part of the
             LocalizedText. The locale part is Server specific.
             </param>
             <param name="DirectoryNodeId">
             The NodeId of the created directory object.
             </param>
             <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IFileDirectoryMethods.CreateFile(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.FileDirectoryModel,System.String,System.Boolean,UnifiedAutomation.UaBase.NodeId@,System.UInt32@)">
             <summary>
             Creates a new <see cref="T:UnifiedAutomation.UaServer.FileModel"/> object
             organized by this object.
             </summary>
             <remarks>
             The created file can be written using the
             <see cref="M:UnifiedAutomation.UaServer.IFileMethods.Write(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.FileModel,System.UInt32,System.Byte[])"/> method of the
             <see cref="T:UnifiedAutomation.UaServer.FileModel"/>.
            
             <b>Method Result Codes</b>
            
             Result Code              | Description
             -------------------------|-----------------------------------------------------------------------
             Bad_BrowseNameDuplicated | A file with the name already exists.
             Bad_UserAccessDenied     | The user does not have permission to perform the requested operation.
             </remarks>
             <param name="context"></param>
             <param name="model"></param>
             <param name="FileName">
             The name of the file to create.
             The name is used for the BrowseName and DisplayName of the file object and also
             for the file in the file system.
             For the BrowseName, the FileName is used for the name part of the
             QualifiedName. The namespace index is Server specific.
             For the DisplayName, the FileName is used for the text part of the
             LocalizedText. The locale part is Server specific.
             </param>
             <param name="RequestFileOpen">
             Flag indicating whether the new file should be opened with the Write and Read
             bits set in the open mode after the creation of the file.
             If the flag is set to True, the file is created and opened for writing. If the
             flag is set to False, the file is just created.
             </param>
             <param name="FileNodeId">
             The NodeId of the created file object.
             </param>
             <param name="FileHandle">
             The FileHandle is returned if RequestFileOpen is set to True.
             The FileNodeId and the FileHandle can be used to access the new file through
             the <see cref="T:UnifiedAutomation.UaServer.FileModel"/> object representing the
             new file.
             If RequestFileOpen is set to False, the returned value shall be 0 and shall be
             ignored by the caller.
             </param>
             <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IFileDirectoryMethods.Delete(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.FileDirectoryModel,UnifiedAutomation.UaBase.NodeId)">
             <summary>
             Deletes a file or directory organized by this object.
             </summary>
             <remarks>
             <b>Method Result Codes</b>
            
             Result Code          | Description
             ---------------------|-------------------------------------------------------------------------------
             Bad_NotFound         | A file or directory with the provided NodeId is not organized by this object.
             Bad_InvalidState     | The file or directory is locked and thus cannot be deleted.
             Bad_UserAccessDenied | The user does not have permission to perform the requested operation.
             </remarks>
             <param name="context"></param>
             <param name="model"></param>
             <param name="ObjectToDelete">
             The NodeId of the file or directory to delete.
             In the case of a directory, all file and directory objects below the directory
             to delete are deleted recursively.
             </param>
             <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IFileDirectoryMethods.MoveOrCopy(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.FileDirectoryModel,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,System.Boolean,System.String,UnifiedAutomation.UaBase.NodeId@)">
             <summary>
             Moves or copies a file or directory organized by this object to another
             directory or renames a file or directory.
             </summary>
             <remarks>
             <b>Method Result Codes</b>
            
             Result Code              | Description
             -------------------------|-------------------------------------------------------------------------------
             Bad_BrowseNameDuplicated | A file or directory with the name already exists.
             Bad_NotFound             | A file or directory with the provided NodeId is not organized by this object.
             Bad_InvalidState         | The file or directory is locked and thus cannot be moved or copied.
             Bad_UserAccessDenied     | The user does not have permission to perform the requested operation.
             </remarks>
             <param name="context"></param>
             <param name="model"></param>
             <param name="ObjectToMoveOrCopy">
             The NodeId of the file or directory to move or copy.
             </param>
             <param name="TargetDirectory">
             The NodeId of the target directory of the move or copy command.
             If the file or directory is just renamed, the targetDirectory matches the
             ObjectId passed to the method call.
             </param>
             <param name="CreateCopy">
             A flag indicating whether a copy of the file or directory should be created at
             the target directory.
             </param>
             <param name="NewName">
             The new name of the file or directory in the new location.
             If the string is empty, the name is unchanged.
             </param>
             <param name="NewNodeId">
             The NodeId of the moved or copied object.
             Even if the object is moved, the Server may return a new NodeId.
             </param>
             <returns></returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.OperationLimitsModel">
            <summary>
            Used to identify the operation limits of the OPC UA Server.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.OperationLimitsModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.OperationLimitsModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.OperationLimitsModel.#ctor(UnifiedAutomation.UaServer.OperationLimitsModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.OperationLimitsModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.OperationLimitsModel.MaxMonitoredItemsPerCall">
            <summary>
            Indicates the maximum size of the itemsToCreate array when a Client calls the
            CreateMonitoredItems service, the maximum size of the itemsToModify array when
            a Client calls the ModifyMonitoredItems service, the maximum size of the
            monitoredItemIds array when a Client calls the SetMonitoringMode service or the
            DeleteMonitoredItems service, the maximum size of the linksToAdd and the
            linksToRemove arrays when a Client calls the SetTriggering service.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.OperationLimitsModel.MaxNodesPerBrowse">
            <summary>
            Indicates the maximum size of the nodesToBrowse array when calling the Browse
            service or the continuationPoints array when a Client calls the BrowseNext
            service.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.OperationLimitsModel.MaxNodesPerHistoryReadData">
            <summary>
            Indicates the maximum size of the nodesToRead array when a Client calls the
            HistoryRead service using the histroyReadDetails RAW, PROCESSED, MODIFIED or
            ATTIME.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.OperationLimitsModel.MaxNodesPerHistoryReadEvents">
            <summary>
            Indicates the maximum size of the nodesToRead array when a client calls the
            HistoryRead Service using the historyReadDetails EVENTS.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.OperationLimitsModel.MaxNodesPerHistoryUpdateData">
            <summary>
            Indicates the maximum size of the historyUpdateDetails array supported by the
            Server when a Client calls the HistoryUpdate service.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.OperationLimitsModel.MaxNodesPerHistoryUpdateEvents">
            <summary>
            Indicates the maximum size of the historyUpdateDetails array when a Client
            calls the HistoryUpdate service.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.OperationLimitsModel.MaxNodesPerMethodCall">
            <summary>
            Indicates the maximum size of the methodsToCall array when a Client calls the
            Call service.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.OperationLimitsModel.MaxNodesPerNodeManagement">
            <summary>
            Indicates the maximum size of the nodesToAdd array when a Client calls the
            AddNodes service, the maximum size of the referencesToAdd array when a Client
            calls the AddReferences service, the maximum size of the nodesToDelete array
            when a Client calls the DeleteNodes service, and the maximum size of the
            referencesToDelete array when a Client calls the DeleteReferences service.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.OperationLimitsModel.MaxNodesPerRead">
            <summary>
            Indicates the maximum size of the nodesToRead array when a Client calls the
            Read service.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.OperationLimitsModel.MaxNodesPerRegisterNodes">
            <summary>
            Indicates the maximum size of the nodesToRegister array when a Client calls the
            RegisterNodes service and the maximum size of the nodesToUnregister when
            calling the UnregisterNodes service.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.OperationLimitsModel.MaxNodesPerTranslateBrowsePathsToNodeIds">
            <summary>
            Indicates the maximum size of the browsePaths array when a Client calls the
            TranslateBrowsePathsToNodeIds service.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.OperationLimitsModel.MaxNodesPerWrite">
            <summary>
            Indicates the maximum size of the nodesToWrite array when a Client calls the
            Write service.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.SecurityGroupFolderModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SecurityGroupFolderModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.SecurityGroupFolderModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SecurityGroupFolderModel.#ctor(UnifiedAutomation.UaServer.SecurityGroupFolderModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.SecurityGroupFolderModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SecurityGroupFolderModel.GetMethodDispatcher(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Gets the method dispatcher.
            </summary>
            <param name="context">The context.</param>
            <param name="objectId">The object id.</param>
            <param name="methodId">The method id.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SecurityGroupFolderModel.DispatchMethod(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MethodHandle,System.Collections.Generic.IList{UnifiedAutomation.UaBase.Variant},System.Collections.Generic.List{UnifiedAutomation.UaBase.StatusCode},System.Collections.Generic.List{UnifiedAutomation.UaBase.Variant})">
            <summary>
            Dispatches the method.
            </summary>
            <param name="context">The context.</param>
            <param name="methodHandle">The method handle.</param>
            <param name="inputArguments">The input arguments.</param>
            <param name="inputArgumentResults">The input argument results.</param>
            <param name="outputArguments">The output arguments.</param>
            <returns></returns>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SecurityGroupFolderModel.SecurityGroupFolderMethods">
            <summary>
            Gets or sets the SecurityGroupFolder methods.
            </summary>
            <value>
            The SecurityGroupFolder methods.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ISecurityGroupFolderMethods">
            <summary>
            The interface for methods implemented on the SecurityGroupFolderModel object.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ISecurityGroupFolderMethods.AddSecurityGroup(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.SecurityGroupFolderModel,System.String,System.Double,System.String,System.UInt32,System.UInt32,System.String@,UnifiedAutomation.UaBase.NodeId@)">
            <summary>
            </summary>
            <param name="context"></param>
            <param name="model"></param>
            <param name="SecurityGroupName"></param>
            <param name="KeyLifetime"></param>
            <param name="SecurityPolicyUri"></param>
            <param name="MaxFutureKeyCount"></param>
            <param name="MaxPastKeyCount"></param>
            <param name="SecurityGroupId">out: </param>
            <param name="SecurityGroupNodeId">out: </param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ISecurityGroupFolderMethods.RemoveSecurityGroup(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.SecurityGroupFolderModel,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            </summary>
            <param name="context"></param>
            <param name="model"></param>
            <param name="SecurityGroupNodeId"></param>
            <returns></returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.HistoricalDataConfigurationModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.HistoricalDataConfigurationModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.HistoricalDataConfigurationModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.HistoricalDataConfigurationModel.#ctor(UnifiedAutomation.UaServer.HistoricalDataConfigurationModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.HistoricalDataConfigurationModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.HistoricalDataConfigurationModel.AggregateConfiguration">
            <summary>
            Gets or sets the AggregateConfiguration
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.HistoricalDataConfigurationModel.AggregateFunctions">
            <summary>
            Gets or sets the AggregateFunctions
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.HistoricalDataConfigurationModel.Definition">
            <summary>
            Gets or sets the Definition
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.HistoricalDataConfigurationModel.ExceptionDeviation">
            <summary>
            Gets or sets the ExceptionDeviation
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.HistoricalDataConfigurationModel.ExceptionDeviationFormat">
            <summary>
            Gets or sets the ExceptionDeviationFormat
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.HistoricalDataConfigurationModel.MaxTimeInterval">
            <summary>
            Gets or sets the MaxTimeInterval
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.HistoricalDataConfigurationModel.MinTimeInterval">
            <summary>
            Gets or sets the MinTimeInterval
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.HistoricalDataConfigurationModel.StartOfArchive">
            <summary>
            Gets or sets the StartOfArchive
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.HistoricalDataConfigurationModel.StartOfOnlineArchive">
            <summary>
            Gets or sets the StartOfOnlineArchive
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.HistoricalDataConfigurationModel.Stepped">
            <summary>
            Gets or sets the Stepped
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.HistoryServerCapabilitiesModel">
             <remarks>
             The <see cref="T:UnifiedAutomation.UaServer.ServerCapabilitiesModel"/> objects
             for any OPC UA Server supporting Historical Access shall contain a Reference to
             a HistoryServerCapabilitiesType object.
            
             The content of this <see cref="T:UnifiedAutomation.UaServer.BaseObjectModel"/> is
             already defined by its type definition in Part 5 of the OPC UA Specification.
            
             The object extensions are intended to inform a Client of the general
             capabilities of the server. They do not guarantee that all capabilities will be
             available for all Nodes. For example, not all Nodes will support Events, or in
             the case of an aggregating server where underlying servers may not support
             Insert or a particular Aggregate. In such cases, the HistoryServerCapabilities
             Property would indicate the capability is supported, and the server would
             return appropriate StatusCodes for situations where the capability does not
             apply.
            
             All UA servers that support Historical access shall include the
             HistoryServerCapabilities as part of its ServerCapabilities.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.HistoryServerCapabilitiesModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.HistoryServerCapabilitiesModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.HistoryServerCapabilitiesModel.#ctor(UnifiedAutomation.UaServer.HistoryServerCapabilitiesModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.HistoryServerCapabilitiesModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.HistoryServerCapabilitiesModel.AccessHistoryDataCapability">
            <summary>
            Defines if the server supports access to historical data values.
            </summary>
            <remarks>
            A value of True indicates the server supports access to history for
            HistoricalNodes, a value of False indicates the server does not support access
            to history for HistoricalNodes. The default value is False. At least one of
            AccessHistoryDataCapability or AccessHistoryEventsCapability shall have a value
            of True for the server to be a valid OPC UA Server supporting Historical
            Access.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.HistoryServerCapabilitiesModel.AccessHistoryEventsCapability">
            <summary>
            Defines if the server supports access to historical Events.
            </summary>
            <remarks>
            A value of True indicates the server supports access to history of Events, a
            value of False indicates the server does not support access to history of
            Events. The default value is False. At least one of AccessHistoryDataCapability
            or AccessHistoryEventsCapability shall have a value of True for the server to
            be a valid OPC UA Server supporting Historical Access.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.HistoryServerCapabilitiesModel.AggregateFunctions">
            <summary>
            An entry point to browse to all Aggregate capabilities supported by the server
            for Historical Access.
            </summary>
            <remarks>
            All HistoryAggregates supported by the Server should be able to be browsed
            starting from this object. Aggregates are defined in Part 13 of the OPC UA
            Specification. If the Server does not support Aggregates the Folder is left
            empty.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.HistoryServerCapabilitiesModel.DeleteAtTimeCapability">
            <summary>
            Indicates support for the delete raw values capability.
            </summary>
            <remarks>
            A value of True indicates the server supports the capability to delete raw data
            values in history. The default value is False.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.HistoryServerCapabilitiesModel.DeleteEventCapability">
            <summary>
            Indicates support for the deletion of Events capability.
            </summary>
            <remarks>
            A value of True indicates the server supports the capability to delete Events
            in history. The default value is False.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.HistoryServerCapabilitiesModel.DeleteRawCapability">
            <summary>
            Indicates support for the delete raw values capability.
            </summary>
            <remarks>
            A value of True indicates the server supports the capability to delete raw data
            values in history. The default value is False.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.HistoryServerCapabilitiesModel.InsertAnnotationCapability">
            <summary>
            Indicates support for Annotations.
            </summary>
            <remarks>
            A value of True indicates the server supports the capability to insert
            Annotations. Some Servers that support Inserting of Annotations will also
            support editing and deleting of Annotations. The default value is False.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.HistoryServerCapabilitiesModel.InsertDataCapability">
            <summary>
            Indicates support for the Insert capability.
            </summary>
            <remarks>
            A value of True indicates the server supports the capability to insert new data
            values in history, but not overwrite existing values. The default value is
            False.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.HistoryServerCapabilitiesModel.InsertEventCapability">
            <summary>
            Indicates support for the Insert capability.
            </summary>
            <remarks>
            A value of True indicates the server supports the capability to insert new
            Events in history. An insert is not a replace. The default value is False.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.HistoryServerCapabilitiesModel.MaxReturnDataValues">
            <summary>
            Defines maximum number of values that can be returned by the server for each
            HistoricalNode accessed during a request.
            </summary>
            <remarks>
            A value of 0 indicates that the server forces no limit on the number of values
            it can return. It is valid for a server to limit the number of returned values
            and return a continuation point even if MaxReturnValues = 0. For example, it is
            possible that although the server does not impose any restrictions, the
            underlying system may impose a limit that the server is not aware of. The
            default value is 0.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.HistoryServerCapabilitiesModel.MaxReturnEventValues">
            <summary>
            Specifies the maximum number of Events that a server can return for a
            HistoricalEventNode.
            </summary>
            <remarks>
            A value of 0 indicates that the server forces no limit on the number of values
            it can return. It is valid for a server to limit the number of returned values
            and return a continuation point even if MaxReturnValues = 0. For example, it is
            possible that although the server does not impose any restrictions, the
            underlying system may impose a limit that the server is not aware of. The
            default value is 0.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.HistoryServerCapabilitiesModel.ReplaceDataCapability">
            <summary>
            Indicates support for the Replace capability.
            </summary>
            <remarks>
            A value of True indicates the server supports the capability to replace
            existing data values in history, but will not insert new values. The default
            value is False.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.HistoryServerCapabilitiesModel.ReplaceEventCapability">
            <summary>
            Indicates support for the Replace capability.
            </summary>
            <remarks>
            A value of True indicates the server supports the capability to replace
            existing Events in history. A replace is not an insert. The default value is
            False.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.HistoryServerCapabilitiesModel.UpdateDataCapability">
            <summary>
            Indicates support for the Update capability.
            </summary>
            <remarks>
            A value of True indicates the server supports the capability to insert new data
            values into history if none exists, and replace values that currently exist.
            The default value is False.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.HistoryServerCapabilitiesModel.UpdateEventCapability">
            <summary>
            Indicates support for the Update capability.
            </summary>
            <remarks>
            A value of True indicates the server supports the capability to insert new
            Events into history if none exists, and replace values that currently exist.
            The default value is False.
            </remarks>
        </member>
        <member name="T:UnifiedAutomation.UaServer.KeyCredentialConfigurationModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.KeyCredentialConfigurationModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.KeyCredentialConfigurationModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.KeyCredentialConfigurationModel.#ctor(UnifiedAutomation.UaServer.KeyCredentialConfigurationModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.KeyCredentialConfigurationModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.KeyCredentialConfigurationModel.EndpointUrls">
            <summary>
            Gets or sets the EndpointUrls
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.KeyCredentialConfigurationModel.ProfileUri">
            <summary>
            Gets or sets the ProfileUri
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.KeyCredentialConfigurationModel.ResourceUri">
            <summary>
            Gets or sets the ResourceUri
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.KeyCredentialConfigurationModel.ServiceStatus">
            <summary>
            Gets or sets the ServiceStatus
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.KeyCredentialConfigurationModel.GetMethodDispatcher(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Gets the method dispatcher.
            </summary>
            <param name="context">The context.</param>
            <param name="objectId">The object id.</param>
            <param name="methodId">The method id.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.KeyCredentialConfigurationModel.DispatchMethod(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MethodHandle,System.Collections.Generic.IList{UnifiedAutomation.UaBase.Variant},System.Collections.Generic.List{UnifiedAutomation.UaBase.StatusCode},System.Collections.Generic.List{UnifiedAutomation.UaBase.Variant})">
            <summary>
            Dispatches the method.
            </summary>
            <param name="context">The context.</param>
            <param name="methodHandle">The method handle.</param>
            <param name="inputArguments">The input arguments.</param>
            <param name="inputArgumentResults">The input argument results.</param>
            <param name="outputArguments">The output arguments.</param>
            <returns></returns>
        </member>
        <member name="P:UnifiedAutomation.UaServer.KeyCredentialConfigurationModel.KeyCredentialConfigurationMethods">
            <summary>
            Gets or sets the KeyCredentialConfiguration methods.
            </summary>
            <value>
            The KeyCredentialConfiguration methods.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.IKeyCredentialConfigurationMethods">
            <summary>
            The interface for methods implemented on the KeyCredentialConfigurationModel object.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IKeyCredentialConfigurationMethods.DeleteCredential(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.KeyCredentialConfigurationModel)">
            <summary>
            </summary>
            <param name="context"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IKeyCredentialConfigurationMethods.UpdateCredential(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.KeyCredentialConfigurationModel,System.String,System.Byte[],System.String,System.String)">
            <summary>
            </summary>
            <param name="context"></param>
            <param name="model"></param>
            <param name="CredentialId"></param>
            <param name="CredentialSecret"></param>
            <param name="CertificateThumbprint"></param>
            <param name="SecurityPolicyUri"></param>
            <returns></returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.NamespaceMetadataModel">
             <summary>
             This object type defines the metadata for a namespace provided by the Server.
             </summary>
             <remarks>
             Instances of this object allow Servers to provide more information like version
             information in addition to the namespace URI. Important information for
             aggregating Servers is provided by the StaticNodeIdTypes,
             StaticNumericNodeIdRange and StaticStringNodeIdPattern properties.
            
             The browse name of instances of this type shall be derived from the represented
             namespace. This can, for example, be done by using the index of the namespace
             in the namespace array as namespaceIndex of the
             <see cref="T:UnifiedAutomation.UaBase.QualifiedName"/> and the namespace URI as
             name of the <see cref="T:UnifiedAutomation.UaBase.QualifiedName"/>.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.NamespaceMetadataModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.NamespaceMetadataModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.NamespaceMetadataModel.#ctor(UnifiedAutomation.UaServer.NamespaceMetadataModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.NamespaceMetadataModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.NamespaceMetadataModel.DefaultAccessRestrictions">
            <summary>
            Gets or sets the DefaultAccessRestrictions
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.NamespaceMetadataModel.DefaultRolePermissions">
            <summary>
            Gets or sets the DefaultRolePermissions
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.NamespaceMetadataModel.DefaultUserRolePermissions">
            <summary>
            Gets or sets the DefaultUserRolePermissions
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.NamespaceMetadataModel.IsNamespaceSubset">
             <summary>
             Defines whether all nodes of the namespace are accessible in the Server or only
             a subset.
             </summary>
             <remarks>
             It is set to FALSE if the full namespace is provided and TRUE if not.
            
             Static nodes are identical for all attributes in all Servers, including the
             Value attribute. For type definition nodes, also the instance declarations
             shall be identical. That means that for static nodes the semantic is always the
             same. Namespaces with static nodes are for example namespaces defined by
             standard bodies like the OPC Foundation. This is important information for
             aggregating Servers. If the namespace is dynamic and used in several Servers
             the aggregating Server needs to distinguish the namespace for each aggregated
             Server. The static nodes of a namespace only need to be handled once, even if
             it they are used by several aggregated Servers.
             </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.NamespaceMetadataModel.NamespaceFile">
            <summary>
            Contains all nodes and references of the namespace in an XML file where the
            information model XML schema is defined in Part 6 of OPC UA Specification.
            </summary>
            <remarks>
            The XML file is provided through an AddressSpaceFileType object.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.NamespaceMetadataModel.NamespacePublicationDate">
            <summary>
            Provides the publication date of the namespace version.
            </summary>
            <remarks>
            This property value can be used by Clients to determine the latest version if
            different versions are provided by different Servers.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.NamespaceMetadataModel.NamespaceUri">
            <summary>
            Contains the namespace represented by an instance of the MetaDataType.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.NamespaceMetadataModel.NamespaceVersion">
            <summary>
            Provides version information for the namespace.
            </summary>
            <remarks>
            It is intended for display purposes and shall not be used to programmatically
            identify the latest version.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.NamespaceMetadataModel.StaticNodeIdTypes">
            <summary>
            Provides a list of IdTypes used for static nodes.
            </summary>
            <remarks>
            All nodes in the address space of the namespace using one of the IdTypes in the
            array shall be static nodes.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.NamespaceMetadataModel.StaticNumericNodeIdRange">
            <summary>
            Provides a list of NumericRanges used for numeric NodeIds of static nodes.
            </summary>
            <remarks>
            If the StaticNodeIdTypes property contains an entry for numeric NodeIds then
            this property is ignored.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.NamespaceMetadataModel.StaticStringNodeIdPattern">
            <summary>
            Provides a regular expression as defined for the Like operator defined in Part
            4 of the OPC UA Specification to filter for string NodeIds of static nodes.
            </summary>
            <remarks>
            If the StaticNodeIdTypes property contains an entry for string NodeIds, this
            property is ignored.
            </remarks>
        </member>
        <member name="T:UnifiedAutomation.UaServer.NamespacesModel">
            <summary>
            Defines a list of
            <see cref="T:UnifiedAutomation.UaServer.NamespaceMetadataModel"/> objects
            provided by the Server.
            </summary>
            <remarks>
            The object type contains a list of
            <see cref="T:UnifiedAutomation.UaServer.NamespaceMetadataModel"/> objects
            representing the namespaces in the Server. The browse name of an object shall
            be derived from the namespace represented by the object. This can, for example,
            be done by using the index of the namespace in the namespace array as
            namespaceIndex of the QualifiedName and the namespace URI as name of the
            QualifiedName.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.NamespacesModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.NamespacesModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.NamespacesModel.#ctor(UnifiedAutomation.UaServer.NamespacesModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.NamespacesModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.NetworkAddressModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.NetworkAddressModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.NetworkAddressModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.NetworkAddressModel.#ctor(UnifiedAutomation.UaServer.NetworkAddressModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.NetworkAddressModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.NetworkAddressModel.NetworkInterface">
            <summary>
            Gets or sets the NetworkInterface
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.NetworkAddressUrlModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.NetworkAddressUrlModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.NetworkAddressUrlModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.NetworkAddressUrlModel.#ctor(UnifiedAutomation.UaServer.NetworkAddressUrlModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.NetworkAddressUrlModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.NetworkAddressUrlModel.Url">
            <summary>
            Gets or sets the Url
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.PublishedDataSetModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.PublishedDataSetModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.PublishedDataSetModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.PublishedDataSetModel.#ctor(UnifiedAutomation.UaServer.PublishedDataSetModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.PublishedDataSetModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.PublishedDataSetModel.ConfigurationVersion">
            <summary>
            Gets or sets the ConfigurationVersion
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.PublishedDataSetModel.DataSetClassId">
            <summary>
            Gets or sets the DataSetClassId
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.PublishedDataSetModel.DataSetMetaData">
            <summary>
            Gets or sets the DataSetMetaData
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.PublishedDataSetModel.ExtensionFields">
            <summary>
            Gets or sets the ExtensionFields
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.PublishedDataItemsModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.PublishedDataItemsModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.PublishedDataItemsModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.PublishedDataItemsModel.#ctor(UnifiedAutomation.UaServer.PublishedDataItemsModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.PublishedDataItemsModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.PublishedDataItemsModel.PublishedData">
            <summary>
            Gets or sets the PublishedData
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.PublishedDataItemsModel.GetMethodDispatcher(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Gets the method dispatcher.
            </summary>
            <param name="context">The context.</param>
            <param name="objectId">The object id.</param>
            <param name="methodId">The method id.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.PublishedDataItemsModel.DispatchMethod(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MethodHandle,System.Collections.Generic.IList{UnifiedAutomation.UaBase.Variant},System.Collections.Generic.List{UnifiedAutomation.UaBase.StatusCode},System.Collections.Generic.List{UnifiedAutomation.UaBase.Variant})">
            <summary>
            Dispatches the method.
            </summary>
            <param name="context">The context.</param>
            <param name="methodHandle">The method handle.</param>
            <param name="inputArguments">The input arguments.</param>
            <param name="inputArgumentResults">The input argument results.</param>
            <param name="outputArguments">The output arguments.</param>
            <returns></returns>
        </member>
        <member name="P:UnifiedAutomation.UaServer.PublishedDataItemsModel.PublishedDataItemsMethods">
            <summary>
            Gets or sets the PublishedDataItems methods.
            </summary>
            <value>
            The PublishedDataItems methods.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.IPublishedDataItemsMethods">
            <summary>
            The interface for methods implemented on the PublishedDataItemsModel object.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IPublishedDataItemsMethods.AddVariables(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.PublishedDataItemsModel,UnifiedAutomation.UaBase.ConfigurationVersionDataType,System.String[],System.Boolean[],UnifiedAutomation.UaBase.PublishedVariableDataType[],UnifiedAutomation.UaBase.ConfigurationVersionDataType@,UnifiedAutomation.UaBase.StatusCode[]@)">
            <summary>
            </summary>
            <param name="context"></param>
            <param name="model"></param>
            <param name="ConfigurationVersion"></param>
            <param name="FieldNameAliases"></param>
            <param name="PromotedFields"></param>
            <param name="VariablesToAdd"></param>
            <param name="NewConfigurationVersion">out: </param>
            <param name="AddResults">out: </param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IPublishedDataItemsMethods.RemoveVariables(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.PublishedDataItemsModel,UnifiedAutomation.UaBase.ConfigurationVersionDataType,System.UInt32[],UnifiedAutomation.UaBase.ConfigurationVersionDataType@,UnifiedAutomation.UaBase.StatusCode[]@)">
            <summary>
            </summary>
            <param name="context"></param>
            <param name="model"></param>
            <param name="ConfigurationVersion"></param>
            <param name="VariablesToRemove"></param>
            <param name="NewConfigurationVersion">out: </param>
            <param name="RemoveResults">out: </param>
            <returns></returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.PublishedEventsModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.PublishedEventsModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.PublishedEventsModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.PublishedEventsModel.#ctor(UnifiedAutomation.UaServer.PublishedEventsModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.PublishedEventsModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.PublishedEventsModel.PubSubEventNotifier">
            <summary>
            Gets or sets the PubSubEventNotifier
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.PublishedEventsModel.Filter">
            <summary>
            Gets or sets the Filter
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.PublishedEventsModel.SelectedFields">
            <summary>
            Gets or sets the SelectedFields
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.PublishedEventsModel.GetMethodDispatcher(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Gets the method dispatcher.
            </summary>
            <param name="context">The context.</param>
            <param name="objectId">The object id.</param>
            <param name="methodId">The method id.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.PublishedEventsModel.DispatchMethod(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MethodHandle,System.Collections.Generic.IList{UnifiedAutomation.UaBase.Variant},System.Collections.Generic.List{UnifiedAutomation.UaBase.StatusCode},System.Collections.Generic.List{UnifiedAutomation.UaBase.Variant})">
            <summary>
            Dispatches the method.
            </summary>
            <param name="context">The context.</param>
            <param name="methodHandle">The method handle.</param>
            <param name="inputArguments">The input arguments.</param>
            <param name="inputArgumentResults">The input argument results.</param>
            <param name="outputArguments">The output arguments.</param>
            <returns></returns>
        </member>
        <member name="P:UnifiedAutomation.UaServer.PublishedEventsModel.PublishedEventsMethods">
            <summary>
            Gets or sets the PublishedEvents methods.
            </summary>
            <value>
            The PublishedEvents methods.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.IPublishedEventsMethods">
            <summary>
            The interface for methods implemented on the PublishedEventsModel object.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IPublishedEventsMethods.ModifyFieldSelection(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.PublishedEventsModel,UnifiedAutomation.UaBase.ConfigurationVersionDataType,System.String[],System.Boolean[],UnifiedAutomation.UaBase.SimpleAttributeOperand[],UnifiedAutomation.UaBase.ConfigurationVersionDataType@)">
            <summary>
            </summary>
            <param name="context"></param>
            <param name="model"></param>
            <param name="ConfigurationVersion"></param>
            <param name="FieldNameAliases"></param>
            <param name="PromotedFields"></param>
            <param name="SelectedFields"></param>
            <param name="NewConfigurationVersion">out: </param>
            <returns></returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.PubSubConnectionModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.PubSubConnectionModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.PubSubConnectionModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.PubSubConnectionModel.#ctor(UnifiedAutomation.UaServer.PubSubConnectionModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.PubSubConnectionModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.PubSubConnectionModel.Address">
            <summary>
            Gets or sets the Address
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.PubSubConnectionModel.ConnectionProperties">
            <summary>
            Gets or sets the ConnectionProperties
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.PubSubConnectionModel.Diagnostics">
            <summary>
            Gets or sets the Diagnostics
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.PubSubConnectionModel.PublisherId">
            <summary>
            Gets or sets the PublisherId
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.PubSubConnectionModel.Status">
            <summary>
            Gets or sets the Status
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.PubSubConnectionModel.TransportProfileUri">
            <summary>
            Gets or sets the TransportProfileUri
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.PubSubConnectionModel.TransportSettings">
            <summary>
            Gets or sets the TransportSettings
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.PubSubConnectionModel.GetMethodDispatcher(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Gets the method dispatcher.
            </summary>
            <param name="context">The context.</param>
            <param name="objectId">The object id.</param>
            <param name="methodId">The method id.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.PubSubConnectionModel.DispatchMethod(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MethodHandle,System.Collections.Generic.IList{UnifiedAutomation.UaBase.Variant},System.Collections.Generic.List{UnifiedAutomation.UaBase.StatusCode},System.Collections.Generic.List{UnifiedAutomation.UaBase.Variant})">
            <summary>
            Dispatches the method.
            </summary>
            <param name="context">The context.</param>
            <param name="methodHandle">The method handle.</param>
            <param name="inputArguments">The input arguments.</param>
            <param name="inputArgumentResults">The input argument results.</param>
            <param name="outputArguments">The output arguments.</param>
            <returns></returns>
        </member>
        <member name="P:UnifiedAutomation.UaServer.PubSubConnectionModel.PubSubConnectionMethods">
            <summary>
            Gets or sets the PubSubConnection methods.
            </summary>
            <value>
            The PubSubConnection methods.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.IPubSubConnectionMethods">
            <summary>
            The interface for methods implemented on the PubSubConnectionModel object.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IPubSubConnectionMethods.AddReaderGroup(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.PubSubConnectionModel,UnifiedAutomation.UaBase.ReaderGroupDataType,UnifiedAutomation.UaBase.NodeId@)">
            <summary>
            </summary>
            <param name="context"></param>
            <param name="model"></param>
            <param name="Configuration"></param>
            <param name="GroupId">out: </param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IPubSubConnectionMethods.AddWriterGroup(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.PubSubConnectionModel,UnifiedAutomation.UaBase.WriterGroupDataType,UnifiedAutomation.UaBase.NodeId@)">
            <summary>
            </summary>
            <param name="context"></param>
            <param name="model"></param>
            <param name="Configuration"></param>
            <param name="GroupId">out: </param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IPubSubConnectionMethods.RemoveGroup(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.PubSubConnectionModel,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            </summary>
            <param name="context"></param>
            <param name="model"></param>
            <param name="GroupId"></param>
            <returns></returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.PubSubDiagnosticsModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.PubSubDiagnosticsModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.PubSubDiagnosticsModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.PubSubDiagnosticsModel.#ctor(UnifiedAutomation.UaServer.PubSubDiagnosticsModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.PubSubDiagnosticsModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.PubSubDiagnosticsModel.Counters">
            <summary>
            Gets or sets the Counters
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.PubSubDiagnosticsModel.DiagnosticsLevel">
            <summary>
            Gets or sets the DiagnosticsLevel
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.PubSubDiagnosticsModel.LiveValues">
            <summary>
            Gets or sets the LiveValues
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.PubSubDiagnosticsModel.SubError">
            <summary>
            Gets or sets the SubError
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.PubSubDiagnosticsModel.TotalError">
            <summary>
            Gets or sets the TotalError
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.PubSubDiagnosticsModel.TotalInformation">
            <summary>
            Gets or sets the TotalInformation
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.PubSubDiagnosticsModel.GetMethodDispatcher(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Gets the method dispatcher.
            </summary>
            <param name="context">The context.</param>
            <param name="objectId">The object id.</param>
            <param name="methodId">The method id.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.PubSubDiagnosticsModel.DispatchMethod(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MethodHandle,System.Collections.Generic.IList{UnifiedAutomation.UaBase.Variant},System.Collections.Generic.List{UnifiedAutomation.UaBase.StatusCode},System.Collections.Generic.List{UnifiedAutomation.UaBase.Variant})">
            <summary>
            Dispatches the method.
            </summary>
            <param name="context">The context.</param>
            <param name="methodHandle">The method handle.</param>
            <param name="inputArguments">The input arguments.</param>
            <param name="inputArgumentResults">The input argument results.</param>
            <param name="outputArguments">The output arguments.</param>
            <returns></returns>
        </member>
        <member name="P:UnifiedAutomation.UaServer.PubSubDiagnosticsModel.PubSubDiagnosticsMethods">
            <summary>
            Gets or sets the PubSubDiagnostics methods.
            </summary>
            <value>
            The PubSubDiagnostics methods.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.IPubSubDiagnosticsMethods">
            <summary>
            The interface for methods implemented on the PubSubDiagnosticsModel object.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IPubSubDiagnosticsMethods.Reset(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.PubSubDiagnosticsModel)">
            <summary>
            </summary>
            <param name="context"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.PubSubDiagnosticsConnectionModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.PubSubDiagnosticsConnectionModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.PubSubDiagnosticsConnectionModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.PubSubDiagnosticsConnectionModel.#ctor(UnifiedAutomation.UaServer.PubSubDiagnosticsConnectionModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.PubSubDiagnosticsConnectionModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.PubSubDiagnosticsConnectionModel.LiveValues">
            <summary>
            Gets or sets the LiveValues
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.PubSubDiagnosticsDataSetReaderModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.PubSubDiagnosticsDataSetReaderModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.PubSubDiagnosticsDataSetReaderModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.PubSubDiagnosticsDataSetReaderModel.#ctor(UnifiedAutomation.UaServer.PubSubDiagnosticsDataSetReaderModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.PubSubDiagnosticsDataSetReaderModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.PubSubDiagnosticsDataSetReaderModel.Counters">
            <summary>
            Gets or sets the Counters
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.PubSubDiagnosticsDataSetReaderModel.LiveValues">
            <summary>
            Gets or sets the LiveValues
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.PubSubDiagnosticsDataSetWriterModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.PubSubDiagnosticsDataSetWriterModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.PubSubDiagnosticsDataSetWriterModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.PubSubDiagnosticsDataSetWriterModel.#ctor(UnifiedAutomation.UaServer.PubSubDiagnosticsDataSetWriterModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.PubSubDiagnosticsDataSetWriterModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.PubSubDiagnosticsDataSetWriterModel.Counters">
            <summary>
            Gets or sets the Counters
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.PubSubDiagnosticsDataSetWriterModel.LiveValues">
            <summary>
            Gets or sets the LiveValues
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.PubSubDiagnosticsReaderGroupModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.PubSubDiagnosticsReaderGroupModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.PubSubDiagnosticsReaderGroupModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.PubSubDiagnosticsReaderGroupModel.#ctor(UnifiedAutomation.UaServer.PubSubDiagnosticsReaderGroupModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.PubSubDiagnosticsReaderGroupModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.PubSubDiagnosticsReaderGroupModel.Counters">
            <summary>
            Gets or sets the Counters
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.PubSubDiagnosticsReaderGroupModel.LiveValues">
            <summary>
            Gets or sets the LiveValues
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.PubSubDiagnosticsRootModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.PubSubDiagnosticsRootModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.PubSubDiagnosticsRootModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.PubSubDiagnosticsRootModel.#ctor(UnifiedAutomation.UaServer.PubSubDiagnosticsRootModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.PubSubDiagnosticsRootModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.PubSubDiagnosticsRootModel.LiveValues">
            <summary>
            Gets or sets the LiveValues
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.PubSubDiagnosticsWriterGroupModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.PubSubDiagnosticsWriterGroupModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.PubSubDiagnosticsWriterGroupModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.PubSubDiagnosticsWriterGroupModel.#ctor(UnifiedAutomation.UaServer.PubSubDiagnosticsWriterGroupModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.PubSubDiagnosticsWriterGroupModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.PubSubDiagnosticsWriterGroupModel.Counters">
            <summary>
            Gets or sets the Counters
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.PubSubDiagnosticsWriterGroupModel.LiveValues">
            <summary>
            Gets or sets the LiveValues
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.PubSubGroupModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.PubSubGroupModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.PubSubGroupModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.PubSubGroupModel.#ctor(UnifiedAutomation.UaServer.PubSubGroupModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.PubSubGroupModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.PubSubGroupModel.GroupProperties">
            <summary>
            Gets or sets the GroupProperties
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.PubSubGroupModel.MaxNetworkMessageSize">
            <summary>
            Gets or sets the MaxNetworkMessageSize
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.PubSubGroupModel.SecurityGroupId">
            <summary>
            Gets or sets the SecurityGroupId
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.PubSubGroupModel.SecurityKeyServices">
            <summary>
            Gets or sets the SecurityKeyServices
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.PubSubGroupModel.SecurityMode">
            <summary>
            Gets or sets the SecurityMode
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.PubSubGroupModel.Status">
            <summary>
            Gets or sets the Status
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ReaderGroupModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ReaderGroupModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ReaderGroupModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ReaderGroupModel.#ctor(UnifiedAutomation.UaServer.ReaderGroupModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ReaderGroupModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ReaderGroupModel.Diagnostics">
            <summary>
            Gets or sets the Diagnostics
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ReaderGroupModel.MessageSettings">
            <summary>
            Gets or sets the MessageSettings
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ReaderGroupModel.TransportSettings">
            <summary>
            Gets or sets the TransportSettings
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ReaderGroupModel.GetMethodDispatcher(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Gets the method dispatcher.
            </summary>
            <param name="context">The context.</param>
            <param name="objectId">The object id.</param>
            <param name="methodId">The method id.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ReaderGroupModel.DispatchMethod(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MethodHandle,System.Collections.Generic.IList{UnifiedAutomation.UaBase.Variant},System.Collections.Generic.List{UnifiedAutomation.UaBase.StatusCode},System.Collections.Generic.List{UnifiedAutomation.UaBase.Variant})">
            <summary>
            Dispatches the method.
            </summary>
            <param name="context">The context.</param>
            <param name="methodHandle">The method handle.</param>
            <param name="inputArguments">The input arguments.</param>
            <param name="inputArgumentResults">The input argument results.</param>
            <param name="outputArguments">The output arguments.</param>
            <returns></returns>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ReaderGroupModel.ReaderGroupMethods">
            <summary>
            Gets or sets the ReaderGroup methods.
            </summary>
            <value>
            The ReaderGroup methods.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.IReaderGroupMethods">
            <summary>
            The interface for methods implemented on the ReaderGroupModel object.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IReaderGroupMethods.AddDataSetReader(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.ReaderGroupModel,UnifiedAutomation.UaBase.DataSetReaderDataType,UnifiedAutomation.UaBase.NodeId@)">
            <summary>
            </summary>
            <param name="context"></param>
            <param name="model"></param>
            <param name="Configuration"></param>
            <param name="DataSetReaderNodeId">out: </param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IReaderGroupMethods.RemoveDataSetReader(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.ReaderGroupModel,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            </summary>
            <param name="context"></param>
            <param name="model"></param>
            <param name="DataSetReaderNodeId"></param>
            <returns></returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.WriterGroupModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.WriterGroupModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.WriterGroupModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.WriterGroupModel.#ctor(UnifiedAutomation.UaServer.WriterGroupModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.WriterGroupModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.WriterGroupModel.Diagnostics">
            <summary>
            Gets or sets the Diagnostics
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.WriterGroupModel.KeepAliveTime">
            <summary>
            Gets or sets the KeepAliveTime
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.WriterGroupModel.LocaleIds">
            <summary>
            Gets or sets the LocaleIds
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.WriterGroupModel.MessageSettings">
            <summary>
            Gets or sets the MessageSettings
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.WriterGroupModel.Priority">
            <summary>
            Gets or sets the Priority
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.WriterGroupModel.PublishingInterval">
            <summary>
            Gets or sets the PublishingInterval
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.WriterGroupModel.TransportSettings">
            <summary>
            Gets or sets the TransportSettings
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.WriterGroupModel.WriterGroupId">
            <summary>
            Gets or sets the WriterGroupId
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.WriterGroupModel.GetMethodDispatcher(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Gets the method dispatcher.
            </summary>
            <param name="context">The context.</param>
            <param name="objectId">The object id.</param>
            <param name="methodId">The method id.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.WriterGroupModel.DispatchMethod(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MethodHandle,System.Collections.Generic.IList{UnifiedAutomation.UaBase.Variant},System.Collections.Generic.List{UnifiedAutomation.UaBase.StatusCode},System.Collections.Generic.List{UnifiedAutomation.UaBase.Variant})">
            <summary>
            Dispatches the method.
            </summary>
            <param name="context">The context.</param>
            <param name="methodHandle">The method handle.</param>
            <param name="inputArguments">The input arguments.</param>
            <param name="inputArgumentResults">The input argument results.</param>
            <param name="outputArguments">The output arguments.</param>
            <returns></returns>
        </member>
        <member name="P:UnifiedAutomation.UaServer.WriterGroupModel.WriterGroupMethods">
            <summary>
            Gets or sets the WriterGroup methods.
            </summary>
            <value>
            The WriterGroup methods.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.IWriterGroupMethods">
            <summary>
            The interface for methods implemented on the WriterGroupModel object.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IWriterGroupMethods.AddDataSetWriter(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.WriterGroupModel,UnifiedAutomation.UaBase.DataSetWriterDataType,UnifiedAutomation.UaBase.NodeId@)">
            <summary>
            </summary>
            <param name="context"></param>
            <param name="model"></param>
            <param name="Configuration"></param>
            <param name="DataSetWriterNodeId">out: </param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IWriterGroupMethods.RemoveDataSetWriter(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.WriterGroupModel,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            </summary>
            <param name="context"></param>
            <param name="model"></param>
            <param name="DataSetWriterNodeId"></param>
            <returns></returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.PubSubKeyServiceModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.PubSubKeyServiceModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.PubSubKeyServiceModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.PubSubKeyServiceModel.#ctor(UnifiedAutomation.UaServer.PubSubKeyServiceModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.PubSubKeyServiceModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.PubSubKeyServiceModel.SecurityGroups">
            <summary>
            Gets or sets the SecurityGroups
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.PubSubKeyServiceModel.GetMethodDispatcher(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Gets the method dispatcher.
            </summary>
            <param name="context">The context.</param>
            <param name="objectId">The object id.</param>
            <param name="methodId">The method id.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.PubSubKeyServiceModel.DispatchMethod(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MethodHandle,System.Collections.Generic.IList{UnifiedAutomation.UaBase.Variant},System.Collections.Generic.List{UnifiedAutomation.UaBase.StatusCode},System.Collections.Generic.List{UnifiedAutomation.UaBase.Variant})">
            <summary>
            Dispatches the method.
            </summary>
            <param name="context">The context.</param>
            <param name="methodHandle">The method handle.</param>
            <param name="inputArguments">The input arguments.</param>
            <param name="inputArgumentResults">The input argument results.</param>
            <param name="outputArguments">The output arguments.</param>
            <returns></returns>
        </member>
        <member name="P:UnifiedAutomation.UaServer.PubSubKeyServiceModel.PubSubKeyServiceMethods">
            <summary>
            Gets or sets the PubSubKeyService methods.
            </summary>
            <value>
            The PubSubKeyService methods.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.IPubSubKeyServiceMethods">
            <summary>
            The interface for methods implemented on the PubSubKeyServiceModel object.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IPubSubKeyServiceMethods.GetSecurityGroup(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.PubSubKeyServiceModel,System.String,UnifiedAutomation.UaBase.NodeId@)">
            <summary>
            </summary>
            <param name="context"></param>
            <param name="model"></param>
            <param name="SecurityGroupId"></param>
            <param name="SecurityGroupNodeId">out: </param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IPubSubKeyServiceMethods.GetSecurityKeys(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.PubSubKeyServiceModel,System.String,System.UInt32,System.UInt32,System.String@,System.UInt32@,System.Byte[][]@,System.Double@,System.Double@)">
            <summary>
            </summary>
            <param name="context"></param>
            <param name="model"></param>
            <param name="SecurityGroupId"></param>
            <param name="StartingTokenId"></param>
            <param name="RequestedKeyCount"></param>
            <param name="SecurityPolicyUri">out: </param>
            <param name="FirstTokenId">out: </param>
            <param name="Keys">out: </param>
            <param name="TimeToNextKey">out: </param>
            <param name="KeyLifetime">out: </param>
            <returns></returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.PublishSubscribeModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.PublishSubscribeModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.PublishSubscribeModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.PublishSubscribeModel.#ctor(UnifiedAutomation.UaServer.PublishSubscribeModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.PublishSubscribeModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.PublishSubscribeModel.Diagnostics">
            <summary>
            Gets or sets the Diagnostics
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.PublishSubscribeModel.PublishedDataSets">
            <summary>
            Gets or sets the PublishedDataSets
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.PublishSubscribeModel.Status">
            <summary>
            Gets or sets the Status
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.PublishSubscribeModel.SupportedTransportProfiles">
            <summary>
            Gets or sets the SupportedTransportProfiles
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.PublishSubscribeModel.GetMethodDispatcher(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Gets the method dispatcher.
            </summary>
            <param name="context">The context.</param>
            <param name="objectId">The object id.</param>
            <param name="methodId">The method id.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.PublishSubscribeModel.DispatchMethod(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MethodHandle,System.Collections.Generic.IList{UnifiedAutomation.UaBase.Variant},System.Collections.Generic.List{UnifiedAutomation.UaBase.StatusCode},System.Collections.Generic.List{UnifiedAutomation.UaBase.Variant})">
            <summary>
            Dispatches the method.
            </summary>
            <param name="context">The context.</param>
            <param name="methodHandle">The method handle.</param>
            <param name="inputArguments">The input arguments.</param>
            <param name="inputArgumentResults">The input argument results.</param>
            <param name="outputArguments">The output arguments.</param>
            <returns></returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.IPublishSubscribeMethods">
            <summary>
            The interface for methods implemented on the PublishSubscribeModel object.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IPublishSubscribeMethods.AddConnection(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.PublishSubscribeModel,UnifiedAutomation.UaBase.PubSubConnectionDataType,UnifiedAutomation.UaBase.NodeId@)">
            <summary>
            </summary>
            <param name="context"></param>
            <param name="model"></param>
            <param name="Configuration"></param>
            <param name="ConnectionId">out: </param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IPublishSubscribeMethods.RemoveConnection(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.PublishSubscribeModel,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            </summary>
            <param name="context"></param>
            <param name="model"></param>
            <param name="ConnectionId"></param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IPublishSubscribeMethods.SetSecurityKeys(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.PublishSubscribeModel,System.String,System.String,System.UInt32,System.Byte[],System.Byte[][],System.Double,System.Double)">
            <summary>
            </summary>
            <param name="context"></param>
            <param name="model"></param>
            <param name="SecurityGroupId"></param>
            <param name="SecurityPolicyUri"></param>
            <param name="CurrentTokenId"></param>
            <param name="CurrentKey"></param>
            <param name="FutureKeys"></param>
            <param name="TimeToNextKey"></param>
            <param name="KeyLifetime"></param>
            <returns></returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.PubSubStatusModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.PubSubStatusModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.PubSubStatusModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.PubSubStatusModel.#ctor(UnifiedAutomation.UaServer.PubSubStatusModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.PubSubStatusModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.PubSubStatusModel.State">
            <summary>
            Gets or sets the State
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.PubSubStatusModel.GetMethodDispatcher(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Gets the method dispatcher.
            </summary>
            <param name="context">The context.</param>
            <param name="objectId">The object id.</param>
            <param name="methodId">The method id.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.PubSubStatusModel.DispatchMethod(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MethodHandle,System.Collections.Generic.IList{UnifiedAutomation.UaBase.Variant},System.Collections.Generic.List{UnifiedAutomation.UaBase.StatusCode},System.Collections.Generic.List{UnifiedAutomation.UaBase.Variant})">
            <summary>
            Dispatches the method.
            </summary>
            <param name="context">The context.</param>
            <param name="methodHandle">The method handle.</param>
            <param name="inputArguments">The input arguments.</param>
            <param name="inputArgumentResults">The input argument results.</param>
            <param name="outputArguments">The output arguments.</param>
            <returns></returns>
        </member>
        <member name="P:UnifiedAutomation.UaServer.PubSubStatusModel.PubSubStatusMethods">
            <summary>
            Gets or sets the PubSubStatus methods.
            </summary>
            <value>
            The PubSubStatus methods.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.IPubSubStatusMethods">
            <summary>
            The interface for methods implemented on the PubSubStatusModel object.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IPubSubStatusMethods.Disable(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.PubSubStatusModel)">
            <summary>
            </summary>
            <param name="context"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IPubSubStatusMethods.Enable(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.PubSubStatusModel)">
            <summary>
            </summary>
            <param name="context"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ReaderGroupMessageModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ReaderGroupMessageModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ReaderGroupMessageModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ReaderGroupMessageModel.#ctor(UnifiedAutomation.UaServer.ReaderGroupMessageModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ReaderGroupMessageModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ReaderGroupTransportModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ReaderGroupTransportModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ReaderGroupTransportModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ReaderGroupTransportModel.#ctor(UnifiedAutomation.UaServer.ReaderGroupTransportModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ReaderGroupTransportModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.RoleSetModel">
            <summary>
            A container for the roles supported by the server.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RoleSetModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.RoleSetModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RoleSetModel.#ctor(UnifiedAutomation.UaServer.RoleSetModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.RoleSetModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RoleSetModel.GetMethodDispatcher(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Gets the method dispatcher.
            </summary>
            <param name="context">The context.</param>
            <param name="objectId">The object id.</param>
            <param name="methodId">The method id.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RoleSetModel.DispatchMethod(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MethodHandle,System.Collections.Generic.IList{UnifiedAutomation.UaBase.Variant},System.Collections.Generic.List{UnifiedAutomation.UaBase.StatusCode},System.Collections.Generic.List{UnifiedAutomation.UaBase.Variant})">
            <summary>
            Dispatches the method.
            </summary>
            <param name="context">The context.</param>
            <param name="methodHandle">The method handle.</param>
            <param name="inputArguments">The input arguments.</param>
            <param name="inputArgumentResults">The input argument results.</param>
            <param name="outputArguments">The output arguments.</param>
            <returns></returns>
        </member>
        <member name="P:UnifiedAutomation.UaServer.RoleSetModel.RoleSetMethods">
            <summary>
            Gets or sets the RoleSet methods.
            </summary>
            <value>
            The RoleSet methods.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.IRoleSetMethods">
            <summary>
            The interface for methods implemented on the RoleSetModel object.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IRoleSetMethods.AddRole(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.RoleSetModel,System.String,System.String,UnifiedAutomation.UaBase.NodeId@)">
            <summary>
            </summary>
            <param name="context"></param>
            <param name="model"></param>
            <param name="RoleName"></param>
            <param name="NamespaceUri"></param>
            <param name="RoleNodeId">out: </param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IRoleSetMethods.RemoveRole(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.RoleSetModel,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            </summary>
            <param name="context"></param>
            <param name="model"></param>
            <param name="RoleNodeId"></param>
            <returns></returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.RoleModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RoleModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.RoleModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RoleModel.#ctor(UnifiedAutomation.UaServer.RoleModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.RoleModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.RoleModel.Applications">
            <summary>
            Gets or sets the Applications
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.RoleModel.ApplicationsExclude">
            <summary>
            Gets or sets the ApplicationsExclude
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.RoleModel.Endpoints">
            <summary>
            Gets or sets the Endpoints
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.RoleModel.EndpointsExclude">
            <summary>
            Gets or sets the EndpointsExclude
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.RoleModel.Identities">
            <summary>
            Gets or sets the Identities
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RoleModel.GetMethodDispatcher(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Gets the method dispatcher.
            </summary>
            <param name="context">The context.</param>
            <param name="objectId">The object id.</param>
            <param name="methodId">The method id.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RoleModel.DispatchMethod(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MethodHandle,System.Collections.Generic.IList{UnifiedAutomation.UaBase.Variant},System.Collections.Generic.List{UnifiedAutomation.UaBase.StatusCode},System.Collections.Generic.List{UnifiedAutomation.UaBase.Variant})">
            <summary>
            Dispatches the method.
            </summary>
            <param name="context">The context.</param>
            <param name="methodHandle">The method handle.</param>
            <param name="inputArguments">The input arguments.</param>
            <param name="inputArgumentResults">The input argument results.</param>
            <param name="outputArguments">The output arguments.</param>
            <returns></returns>
        </member>
        <member name="P:UnifiedAutomation.UaServer.RoleModel.RoleMethods">
            <summary>
            Gets or sets the Role methods.
            </summary>
            <value>
            The Role methods.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.IRoleMethods">
            <summary>
            The interface for methods implemented on the RoleModel object.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IRoleMethods.AddApplication(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.RoleModel,System.String)">
            <summary>
            </summary>
            <param name="context"></param>
            <param name="model"></param>
            <param name="RuleToAdd"></param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IRoleMethods.AddEndpoint(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.RoleModel,System.String)">
            <summary>
            </summary>
            <param name="context"></param>
            <param name="model"></param>
            <param name="RuleToAdd"></param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IRoleMethods.AddIdentity(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.RoleModel,UnifiedAutomation.UaBase.IdentityMappingRuleType)">
            <summary>
            </summary>
            <param name="context"></param>
            <param name="model"></param>
            <param name="RuleToAdd"></param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IRoleMethods.RemoveApplication(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.RoleModel,System.String)">
            <summary>
            </summary>
            <param name="context"></param>
            <param name="model"></param>
            <param name="RuleToRemove"></param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IRoleMethods.RemoveEndpoint(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.RoleModel,System.String)">
            <summary>
            </summary>
            <param name="context"></param>
            <param name="model"></param>
            <param name="RuleToRemove"></param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IRoleMethods.RemoveIdentity(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.RoleModel,UnifiedAutomation.UaBase.IdentityMappingRuleType)">
            <summary>
            </summary>
            <param name="context"></param>
            <param name="model"></param>
            <param name="RuleToRemove"></param>
            <returns></returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.SecurityGroupModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SecurityGroupModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.SecurityGroupModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SecurityGroupModel.#ctor(UnifiedAutomation.UaServer.SecurityGroupModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.SecurityGroupModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SecurityGroupModel.KeyLifetime">
            <summary>
            Gets or sets the KeyLifetime
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SecurityGroupModel.MaxFutureKeyCount">
            <summary>
            Gets or sets the MaxFutureKeyCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SecurityGroupModel.MaxPastKeyCount">
            <summary>
            Gets or sets the MaxPastKeyCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SecurityGroupModel.SecurityGroupId">
            <summary>
            Gets or sets the SecurityGroupId
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SecurityGroupModel.SecurityPolicyUri">
            <summary>
            Gets or sets the SecurityPolicyUri
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ServerCapabilitiesModel">
            <summary>
            Defines the capabilities supported by the OPC UA Server.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerCapabilitiesModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ServerCapabilitiesModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerCapabilitiesModel.#ctor(UnifiedAutomation.UaServer.ServerCapabilitiesModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ServerCapabilitiesModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerCapabilitiesModel.AggregateFunctions">
            <summary>
            AggregateFunctions is an entry point to browse to all AggregateFunctions
            supported by the Server.
            </summary>
            <remarks>
            All AggregateFunctions supported by the server should be able to be browsed
            starting from this object. AggregateFunctions are objects of
            AggregateFunctionType.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerCapabilitiesModel.LocaleIdArray">
            <summary>
            An array of LocaleIds that are known to be supported by the Server.
            </summary>
            <remarks>
            The Server might not be aware of all LocaleIds that it supports, because it may
            provide access to underlying servers, systems or devices that do not report the
            LocaleIds that they support.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerCapabilitiesModel.MaxArrayLength">
            <summary>
            Indicates the maximum length of a one or multidimensional array supported by
            variables of the Server.
            </summary>
            <remarks>
            In a multidimensional array it indicates the overall length. For example, a
            three-dimensional array of 2x3x10 has the array length of 60. The Server might
            further restrict the length for individual variables without notice to the
            client. Servers may use the property MaxArrayLength defined in Part 3 of the
            OPC UA Specification on individual DataVariables to specify the size on
            individual values. The individual property may have a larger or smaller value
            than MaxArrayLength.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerCapabilitiesModel.MaxBrowseContinuationPoints">
            <summary>
            An integer specifying the maximum number of parallel continuation points of the
            Browse service that the Server can support per session.
            </summary>
            <remarks>
            The value specifies the maximum the Server can support under normal
            circumstances, so there is no guarantee that the Server can always support the
            maximum. The client should not open more Browse calls with open continuation
            points than exposed in this variable. The value 0 indicates that the Server
            does not restrict the number of parallel continuation points the client should
            use.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerCapabilitiesModel.MaxByteStringLength">
            <summary>
            Indicates the maximum number of bytes in a ByteString supported by variables or
            FileType objects of the Server.
            </summary>
            <remarks>
            The Server might further restrict the ByteString length for individual
            variables or FileType objects without notice to the Client. Servers may use the
            property MaxByteStringLength on individual data variables to specify the length
            on individual values or on FileType objects to specify the maximum size of read
            and write buffers. The individual property may have larger or smaller values
            than MaxByteStringLength.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerCapabilitiesModel.MaxHistoryContinuationPoints">
            <summary>
            An integer specifying the maximum number of parallel continuation points of the
            HistoryRead services that the Server can support per session.
            </summary>
            <remarks>
            The value specifies the maximum the Server can support under normal
            circumstances, so there is no guarantee the Server can always support the
            maximum. The client should not open more HistoryRead calls with open
            continuation points than exposed in this Variable. The value 0 indicates that
            the Server does not restrict the number of parallel continuation points the
            client should use.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerCapabilitiesModel.MaxQueryContinuationPoints">
            <summary>
            An integer specifying the maximum number of parallel continuation points of the
            QueryFirst services that the Server can support per session.
            </summary>
            <remarks>
            The value specifies the maximum the Server can support under normal
            circumstances, so there is no guarantee that the Server can always support the
            maximum. The client should not open more QueryFirst calls with open
            continuation points than exposed in this Variable. The value 0 indicates that
            the Server does not restrict the number of parallel continuation points the
            client should use.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerCapabilitiesModel.MaxStringLength">
            <summary>
            Indicates the maximum number of characters in strings supported by variables of
            the Server.
            </summary>
            <remarks>
            The Server might further restrict the string length for individual variables
            without notice to the client. Servers may use the property MaxStringLength
            defined in Part 3 of the OPC UA Specification on individual DataVariables to
            specify the length on individual values. The individual property may have
            larger or smaller values than MaxStringLength.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerCapabilitiesModel.MinSupportedSampleRate">
            <summary>
            Defines the minimum supported sample rate, including 0, which is supported by
            the Server.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerCapabilitiesModel.ModellingRules">
            <summary>
            ModellingRules is an entry point to browse to all ModellingRules supported by
            the Server.
            </summary>
            <remarks>
            All ModellingRules supported by the Server should be able to be browsed
            starting from this Object.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerCapabilitiesModel.OperationLimits">
            <summary>
            OperationLimits is an entry point to access information on operation limits of
            the Server, for example the maximum length of an array in a read service call.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerCapabilitiesModel.RoleSet">
            <summary>
            Gets or sets the RoleSet
            </summary>
            <details>
            Describes the roles supported by the server.
            </details>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerCapabilitiesModel.ServerProfileArray">
            <summary>
            Lists the profiles that the Server supports.
            </summary>
            <remarks>
            See Part 7 of the OPC UA Specification for the definitions of Server profiles.
            This list should be limited to the profiles the Server supports in its current
            configuration.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerCapabilitiesModel.SoftwareCertificates">
            <summary>
            An array of SignedSoftwareCertificates containing all SoftwareCertificates
            supported by the Server.
            </summary>
            <remarks>
            A SoftwareCertificate identifies capabilities of the Server. It contains the
            list of profiles supported by the Server. Profiles are described in Part 7 of
            the OPC UA Specification.
            </remarks>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ServerConfigurationModel">
            <summary>
            This type defines an ObjectType which represents the configuration of a Server
            which supports Push Management.
            </summary>
            <remarks>
            There is always exactly one instance in the Server address space.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerConfigurationModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ServerConfigurationModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerConfigurationModel.#ctor(UnifiedAutomation.UaServer.ServerConfigurationModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ServerConfigurationModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerConfigurationModel.CertificateGroups">
             <summary>
             The CertificateGroups object organizes the certificate groups supported by the
             Server.
             </summary>
             <remarks>
             It is described in
             <see cref="T:UnifiedAutomation.UaServer.CertificateGroupFolderModel"/>.
            
             Servers shall support the
             <see cref="P:UnifiedAutomation.UaServer.CertificateGroupFolderModel.DefaultApplicationGroup"/>
             and may support the
             <see cref="P:UnifiedAutomation.UaServer.CertificateGroupFolderModel.DefaultHttpsGroup"/>
             or the
             <see cref="P:UnifiedAutomation.UaServer.CertificateGroupFolderModel.DefaultUserTokenGroup"/>
             . Servers may support additional certificate groups depending on their
             requirements. For example, a Server with two network interfaces may need a
             different trust list for each interface. The second trust list would be
             represented as a new CertificateGroupType object organized by CertificateGroups
             Folder.
             </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerConfigurationModel.MaxTrustListSize">
            <summary>
            The maximum size of the trust list in bytes.
            </summary>
            <remarks>
            0 means no limit.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerConfigurationModel.MulticastDnsEnabled">
            <summary>
            If TRUE, the Server announces itself using multicast DNS.
            </summary>
            <remarks>
            It can be changed by writing to the variable.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerConfigurationModel.ServerCapabilities">
             <summary>
             Specifies the capabilities which the Server supports.
             </summary>
             <remarks>
             The value is the same as the value reported to the LocalDiscoveryServer when
             the Server calls the RegisterServer2 Service.
            
             \todo ServerCapabilitiesIdentifiers irgendwo listen?
             </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerConfigurationModel.SupportedPrivateKeyFormats">
            <summary>
            Specifies the PrivateKey formats supported by the Server.
            </summary>
            <remarks>
            Possible values include “PEM” (see <a href
            ="https://tools.ietf.org/html/rfc5208">RFC 5958, txt file</a>) or “PFX” (see <a
            href="http://www.emc.com/collateral/white-papers/h11301-pkcs-12v1-1-personal-information-exchange-syntax-wp.pdf">PKCS
            #12, pdf file</a>). The array is empty if the Server does not allow external
            Clients to update the PrivateKey.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerConfigurationModel.GetMethodDispatcher(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Gets the method dispatcher.
            </summary>
            <param name="context">The context.</param>
            <param name="objectId">The object id.</param>
            <param name="methodId">The method id.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerConfigurationModel.DispatchMethod(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MethodHandle,System.Collections.Generic.IList{UnifiedAutomation.UaBase.Variant},System.Collections.Generic.List{UnifiedAutomation.UaBase.StatusCode},System.Collections.Generic.List{UnifiedAutomation.UaBase.Variant})">
            <summary>
            Dispatches the method.
            </summary>
            <param name="context">The context.</param>
            <param name="methodHandle">The method handle.</param>
            <param name="inputArguments">The input arguments.</param>
            <param name="inputArgumentResults">The input argument results.</param>
            <param name="outputArguments">The output arguments.</param>
            <returns></returns>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerConfigurationModel.ServerConfigurationMethods">
            <summary>
            Gets or sets the ServerConfiguration methods.
            </summary>
            <value>
            The ServerConfiguration methods.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.IServerConfigurationMethods">
            <summary>
            The interface for methods implemented on the ServerConfigurationModel object.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IServerConfigurationMethods.ApplyChanges(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.ServerConfigurationModel)">
             <summary>
             Used to tell the Server to apply any security changes.
             </summary>
             <remarks>
             This method should only be called if a previous call to a method that changed
             the configuration returns ApplyChangesRequired=true (see
             <see cref="M:UnifiedAutomation.UaServer.IServerConfigurationMethods.UpdateCertificate(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.ServerConfigurationModel,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,System.Byte[],System.Byte[][],System.String,System.Byte[],System.Boolean@)"/>
             ).
            
             ApplyChanges can have different meanings depending on the Server architecture.
             In the ideal case it would only require the endpoints to be closed and
             reopened. However, it could require a complete Server shutdown and restart.
            
             This method requires an encrypted channel and that the Client provides
             credentials with administrative rights on the Server.
            
             <b>Method Result Codes</b>
            
             Result Code          | Description
             ---------------------|-----------------------------------------------------
             Bad_UserAccessDenied | The current user does not have the rights required.
             </remarks>
             <param name="context"></param>
             <param name="model"></param>
             <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IServerConfigurationMethods.CreateSigningRequest(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.ServerConfigurationModel,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,System.String,System.Boolean,System.Byte[],System.Byte[]@)">
             <summary>
             Asks the Server to create a PKCS#10 DER encoded certificate request that is
             signed with the Server’s private key.
             </summary>
             <remarks>
             This request can be then used to request a certificate from a CA that expects
             requests in this format. See <a href="http://www.ietf.org/rfc/rfc2986.txt">RFC
             2986 (txt file)</a> for a description of PKCS#10.
            
             This method requires an encrypted channel and that the Client provides
             credentials with administrative rights on the Server.
            
             <b>Method Result Codes</b>
            
             Result Code          | Description
             ---------------------|------------------------------------------------------------------------
             Bad_InvalidArgument  | The CertificateTypeId, certificateGroupId or SubjectName is not valid.
             Bad_UserAccessDenied | The current user does not have the rights required.
             </remarks>
             <param name="context"></param>
             <param name="model"></param>
             <param name="CertificateGroupId">
             The NodeId of the certificate group object which is affected by the request.
             If null, the
             <see cref="P:UnifiedAutomation.UaServer.CertificateGroupFolderModel.DefaultApplicationGroup"/>
             is used.
             </param>
             <param name="CertificateTypeId">
             The type of certificate being requested.
             The set of permitted types is specified by the
             <see cref="P:UnifiedAutomation.UaServer.CertificateGroupModel.CertificateTypes"/>
             property belonging to the certificate group.
             </param>
             <param name="SubjectName">
             The subject name to use in the certificate request.
             If not specified, the SubjectName from the current certificate is used.
             </param>
             <param name="RegeneratePrivateKey">
             Flag indicating whether to create a new private key.
             If TRUE, the Server shall create a new private key which it stores until the
             matching signed certificate is uploaded with the
             <see cref="M:UnifiedAutomation.UaServer.IServerConfigurationMethods.UpdateCertificate(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.ServerConfigurationModel,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,System.Byte[],System.Byte[][],System.String,System.Byte[],System.Boolean@)"/>
             method. Previously created private keys may be discarded if
             <see cref="M:UnifiedAutomation.UaServer.IServerConfigurationMethods.UpdateCertificate(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.ServerConfigurationModel,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,System.Byte[],System.Byte[][],System.String,System.Byte[],System.Boolean@)"/>
             was not called before calling this method again. If FALSE, the Server uses its
             existing private key.
             </param>
             <param name="Nonce">
             Additional entropy which the caller shall provide if RegeneratePrivateKey is
             TRUE.
             It shall be at least 32 bytes long.
             </param>
             <param name="CertificateRequest">
             The PKCS#10 DER encoded certificate request.
             </param>
             <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IServerConfigurationMethods.GetRejectedList(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.ServerConfigurationModel,System.Byte[][]@)">
             <summary>
             Returns the list of Certificates that have been rejected by the Server.
             </summary>
             <remarks>
             No rules are defined for how the Server updates this list or how long a
             certificate is kept in the list. It is recommended that every valid but
             untrusted certificate be added to the rejected list as long as storage is
             available. Servers should omit older entries from the list returned if the
             maximum message size is not large enough to allow the entire list to be
             returned.
            
             This method requires an encrypted channel and that the Client provides
             credentials with administrative rights on the Server.
            
             <b>Method Result Codes</b>
            
             Result Code          | Description
             ---------------------|-----------------------------------------------------
             Bad_UserAccessDenied | The current user does not have the rights required.
             </remarks>
             <param name="context"></param>
             <param name="model"></param>
             <param name="Certificates">
             The DER encoded form of the Certificates rejected by the Server.
             </param>
             <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IServerConfigurationMethods.UpdateCertificate(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.ServerConfigurationModel,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,System.Byte[],System.Byte[][],System.String,System.Byte[],System.Boolean@)">
             <summary>
             Used to update a certificate for a Server.
             </summary>
             <remarks>
             There are the following three use cases for this method.
             - The new certificate was created based on a signing request created with the
               method
               <see cref="M:UnifiedAutomation.UaServer.IServerConfigurationMethods.CreateSigningRequest(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.ServerConfigurationModel,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,System.String,System.Boolean,System.Byte[],System.Byte[]@)"/>
               . In this case, there is no PrivateKey provided.
             - A new PrivateKey and certificate were created outside the Server and both are
               updated with this method.
             - A new certificate was created and signed with the information from the old
               Certificate. In this case, there is no PrivateKey provided.
            
            
            
             The Server shall do all normal integrity checks on the certificate and all of
             the issuer certificates. If errors occur, the Bad_SecurityChecksFailed error is
             returned.
            
             The Server shall report an error if the public key does not match the existing
             certificate and PrivateKey was not provided.
            
             This method requires an encrypted channel and that the Client provides
             credentials with administrative rights on the Server.
            
             This method may require the
             <see cref="M:UnifiedAutomation.UaServer.IServerConfigurationMethods.ApplyChanges(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.ServerConfigurationModel)"/>
             method to be called.
            
             <b>Method Result Codes</b>
            
             Result Code              | Description
             -------------------------|-------------------------------------------------------------------
             Bad_InvalidArgument      | The CertificateTypeId or certificateGroupId is not valid.
             Bad_CertificateInvalid   | The certificate is invalid or the format is not supported.
             Bad_NotSupported         | The PrivateKey is invalid or the format is not supported.
             Bad_UserAccessDenied     | The current user does not have the rights required.
             Bad_SecurityChecksFailed | Some failure occurred verifying the integrity of the certificate.
             </remarks>
             <param name="context"></param>
             <param name="model"></param>
             <param name="CertificateGroupId">
             The NodeId of the certificate group object which is affected by the update.
             If null the DefaultApplicationGroup is used.
             </param>
             <param name="CertificateTypeId">
             The type of certificate being updated.
             The set of permitted types is specified by the
             <see cref="P:UnifiedAutomation.UaServer.CertificateGroupModel.CertificateTypes"/>
             property belonging to the certificate group.
             </param>
             <param name="Certificate">
             The DER encoded certificate which replaces the existing certificate.
             </param>
             <param name="IssuerCertificates">
             The issuer certificates needed to verify the signature on the new certificate.
             </param>
             <param name="PrivateKeyFormat">
             The format of the private key (PEM or PFX).
             If the privateKey is not specified the privateKeyFormat is null or empty.
             </param>
             <param name="PrivateKey">
             The private key encoded in the PrivateKeyFormat.
             </param>
             <param name="ApplyChangesRequired">
             Indicates that the
             <see cref="M:UnifiedAutomation.UaServer.IServerConfigurationMethods.ApplyChanges(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.ServerConfigurationModel)"/>
             method must be called before the new certificate will be used.
             </param>
             <returns></returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ServerRedundancyModel">
            <summary>
            This object type defines the redundancy capabilities supported by the OPC UA
            Server.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerRedundancyModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ServerRedundancyModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerRedundancyModel.#ctor(UnifiedAutomation.UaServer.ServerRedundancyModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ServerRedundancyModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerRedundancyModel.RedundancySupport">
            <summary>
            Indicates what redundancy is supported by the Server.
            </summary>
            <remarks>
            Its values are defined in
            <see cref="T:UnifiedAutomation.UaBase.RedundancySupport"/>. It shall be set to
            NONE_0 for all instances of the ServerRedundancyType using the object type
            directly (no subtype).
            </remarks>
        </member>
        <member name="T:UnifiedAutomation.UaServer.NonTransparentRedundancyModel">
            <summary>
            Identifies the capabilties of server that supports non-transparent redundancy.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.NonTransparentRedundancyModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.NonTransparentRedundancyModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.NonTransparentRedundancyModel.#ctor(UnifiedAutomation.UaServer.NonTransparentRedundancyModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.NonTransparentRedundancyModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.NonTransparentRedundancyModel.ServerUriArray">
            <summary>
            Gets or sets the ServerUriArray
            </summary>
            <details>
            A list of servers in the same redundant set.
            </details>
        </member>
        <member name="T:UnifiedAutomation.UaServer.TransparentRedundancyModel">
            <summary>
            Identifies the capabilties of server that supports transparent redundancy.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TransparentRedundancyModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.TransparentRedundancyModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TransparentRedundancyModel.#ctor(UnifiedAutomation.UaServer.TransparentRedundancyModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.TransparentRedundancyModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.TransparentRedundancyModel.CurrentServerId">
            <summary>
            Gets or sets the CurrentServerId
            </summary>
            <details>
            The ID of the server that is currently in use.
            </details>
        </member>
        <member name="P:UnifiedAutomation.UaServer.TransparentRedundancyModel.RedundantServerArray">
            <summary>
            Gets or sets the RedundantServerArray
            </summary>
            <details>
            A list of servers in the same redundant set.
            </details>
        </member>
        <member name="T:UnifiedAutomation.UaServer.IServerMethods">
            <summary>
            The interface for methods implemented on the ServerModel object.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IServerMethods.GetMonitoredItems(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.ServerModel,System.UInt32,System.UInt32[]@,System.UInt32[]@)">
             <summary>
             Used to identify the monitored items of a subscription.
             </summary>
             <remarks>
             The intended usage is defined in Part 4 of the OPC UA Specification.
            
             <b>Method Result Codes:</b>
            
             Result Code               | Description
             --------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------
             Bad_SubscriptionIdInvalid | The subscription id is not valid.
             Bad_UserAccessDenied      | User does not have permission to perform the requested operation. The Method was not called in the context of the Session that owns the Subscription.
             </remarks>
             <param name="context"></param>
             <param name="model"></param>
             <param name="SubscriptionId">
             Identifier of the subscription.
             </param>
             <param name="ServerHandles">
             Array of server handles for all monitored items of the subscription identified
             by SubscriptionId.
             </param>
             <param name="ClientHandles">
             Array of client handles for all monitored items of the subscription identified
             by SubscriptionId
             </param>
             <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IServerMethods.RequestServerStateChange(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.ServerModel,UnifiedAutomation.UaBase.ServerState,System.DateTime,System.UInt32,UnifiedAutomation.UaBase.LocalizedText,System.Boolean)">
             <summary>
             Allows a Client to request a state change in the Server.
             </summary>
             <remarks>
             The intended usage is defined in Part 4 of the OPC UA Specification.
            
             The Client shall provide credentials with administrative rights when invoking
             this method on the Server.
            
             <b>Method Result Codes:</b>
            
             Result Code          | Description
             ---------------------|----------------------------------------------------------
             Bad_UserAccessDenied | The current user is not authorized to invoke the method.
             Bad_InvalidState     | The requested state was not accepted by the server.
             </remarks>
             <param name="context"></param>
             <param name="model"></param>
             <param name="State">
             The requested target state for the Server.
             If the new state is accepted by the Server, the state in the
             <see cref="P:UnifiedAutomation.UaServer.ServerModel.ServerStatus"/> is updated
             with the new value.
             </param>
             <param name="EstimatedReturnTime">
             Indicates the time at which the Server is expected to be available in the state
             RUNNING_0.
             If no estimate is known, a null DateTime shall be provided. This time will be
             available in the EstimatedReturnTime property. This parameter shall be ignored
             by the Server and the property EstimatedReturnTime shall be set to null if the
             new state is RUNNING_0.
             </param>
             <param name="SecondsTillShutdown">
             The number of seconds until a Server shutdown.
             This parameter is ignored unless the state is set to SHUTDOWN_4 or restart is
             set to true.
             </param>
             <param name="Reason">
             A localized text string that describes the reason for the state change request.
             </param>
             <param name="Restart">
             A flag indicating if the Server should be restarted before it attempts to
             change into the requested change.
             If restart is true, the server changes its state to SHUTDOWN_4 before the
             restart if secondsTillShudown is not 0.
             </param>
             <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IServerMethods.ResendData(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.ServerModel,System.UInt32)">
             <summary>
             Used to get the latest values of the data monitored items of a Subscription.
             </summary>
             <remarks>
             The intended usage is defined in Part 4 of the OPC UA Specification.
            
             <b>Method Result Codes:</b>
            
             Result Code               | Description
             --------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------
             Bad_SubscriptionIdInvalid | The subscription id is not valid.
             Bad_UserAccessDenied      | User does not have permission to perform the requested operation. The Method was not called in the context of the Session that owns the Subscription.
             </remarks>
             <param name="context"></param>
             <param name="model"></param>
             <param name="SubscriptionId">
             Identifier of the subscription to refresh.
             </param>
             <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IServerMethods.SetSubscriptionDurable(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.ServerModel,System.UInt32,System.UInt32,System.UInt32@)">
             <summary>
             Used to set a subscription into a mode where monitored item data and event
             queues are stored and delivered even if an OPC UA Client was disconnected for a
             longer time or the OPC UA Server was restarted.
             </summary>
             <remarks>
             The intended usage is defined in Part 4 of the OPC UA Specification.
            
             <b>Method Result Codes:</b>
            
             Result Code               | Description
             --------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
             Bad_SubscriptionIdInvalid | The subscription id is not valid.
             Bad_InvalidState          | The operation cannot be completed because the object is closed, uninitialized or in some other invalid state. This is returned when a Subscription already contains MonitoredItems.
             Bad_UserAccessDenied      | User does not have permission to perform the requested operation. The Method was not called in the context of the Session that owns the Subscription.
             </remarks>
             <param name="context"></param>
             <param name="model"></param>
             <param name="SubscriptionId">
             Identifier of the subscription.
             </param>
             <param name="LifetimeInHours">
             The requested lifetime in hours for the durable subscription.
             </param>
             <param name="RevisedLifetimeInHours">
             The revised lifetime in hours the server applied to the durable subscription.
             </param>
             <returns></returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.SessionsDiagnosticsSummaryModel">
            <summary>
            Defines diagnostic information about the sessions of the OPC UA Server.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SessionsDiagnosticsSummaryModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.SessionsDiagnosticsSummaryModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SessionsDiagnosticsSummaryModel.#ctor(UnifiedAutomation.UaServer.SessionsDiagnosticsSummaryModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.SessionsDiagnosticsSummaryModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionsDiagnosticsSummaryModel.SessionDiagnosticsArray">
            <summary>
            Provides an array with an entry for each session in the Server having general
            diagnostic information about a session.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionsDiagnosticsSummaryModel.SessionSecurityDiagnosticsArray">
            <summary>
            Provides an array with an entry for each active session in the Server having
            security-related diagnostic information about a session.
            </summary>
            <remarks>
            Since this information is security-related, it should not be made accessible to
            all users, but only to authorised users.
            </remarks>
        </member>
        <member name="T:UnifiedAutomation.UaServer.StateMachineModel">
             <summary>
             The base ObjectType for all StateMachineTypes.
             </summary>
             <remarks>
             It defines a single Variable which represents the current state of the machine.
             An instance of this ObjectType shall generate an Event whenever a significant
             state change occurs. The Server decides which state changes are significant.
             Servers shall use the GeneratesEvent ReferenceType to indicate which Event(s)
             could be produced by the state machine.
            
             Subtypes may add methods which affect the state of the machine. The Executable
             attribute is used to indicate whether the method is valid given the current
             state of the machine. The generation of AuditEvents for methods is defined in
             Part 4 of the OPC UA Specification. A state machine may not be active. In this
             case, the CurrentState and LastTransition variables shall have a status equal
             to Bad_StateNotActive.
            
             Subtypes may add components which are instances of StateMachineTypes. These
             components are considered to be sub-states of the state machine. Sub-state
             machines are only active when the parent machine is in an appropriate state.
            
             Events produced by sub-state machines may be suppressed by the parent machine.
             In some cases, the parent machine will produce a single Event that reflects
             changes in multiple sub-state machines.
            
             <see cref="T:UnifiedAutomation.UaServer.FiniteStateMachineModel"/> is subtype of
             StateMachineType that provides a mechanism to explicitly define the states and
             transitions. A Server should use this mechanism if it knows what the possible
             states are and the state machine is not trivial.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.StateMachineModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.StateMachineModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.StateMachineModel.#ctor(UnifiedAutomation.UaServer.StateMachineModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.StateMachineModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.StateMachineModel.CurrentState">
            <summary>
            Stores the current state of an instance of the StateMachineType.
            </summary>
            <remarks>
            CurrentState provides a human readable name for the current state which may not
            be suitable for use in application control logic. Applications should use the
            Id property of CurrentState if they need a unique identifier for the state.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.StateMachineModel.LastTransition">
            <summary>
            Stores the last transition which occurred in an instance of the
            StateMachineType.
            </summary>
            <remarks>
            LastTransition provides a human readable name for the last transition which may
            not be suitable for use in application control logic. Applications should use
            the Id property of LastTransition if they need a unique identifier for the
            transition.
            </remarks>
        </member>
        <member name="T:UnifiedAutomation.UaServer.FiniteStateMachineModel">
             <summary>
             The FiniteStateMachineType is the base ObjectType for state machines that
             explicitly define the possible states and transitions.
             </summary>
             <remarks>
             Once the states are defined, subtypes shall not add new states.
            
             The states of the machine are represented with instances of the StateType
             ObjectType. Each state shall have a BrowseName which is unique within the state
             machine and shall have a StateNumber which shall also be unique across all
             states defined in the state machine. Be aware that states in a sub-state
             machine may have the same StateNumber or BrowseName as states in the parent
             machine. A concrete subtype of FiniteStateMachineType shall define at least one
             state.
            
             A state machine may define one state which is an instance of the
             InitialStateType. This state is the state that the machine goes into when it is
             activated.
            
             The transitions that may occur are represented with instances of the
             TransitionType. Each transition shall have a BrowseName which is unique within
             the state machine and may have a TransitionNumber which shall also be unique
             across all transitions defined in the state machine.
            
             The initial state for a transition is a StateType object which is the target of
             a FromState reference. The final state for a transition is a StateType object
             which is the target of a ToState reference. The FromState and ToState
             references shall always be specified.
            
             A transition may produce an event. The event is indicated by a HasEffect
             reference to a subtype of BaseEventType. The StateMachineType shall have
             GeneratesEvent references to the targets of a HasEffect reference for each of
             its transitions.
            
             A FiniteStateMachineType may define methods that cause a transition to occur.
             These methods are targets of HasCause references for each of the transitions
             that may be triggered by the method. The Executable attribute for a method is
             used to indicate whether the current state of the machine allows the method to
             be called.
            
             A FiniteStateMachineType may have sub-state machines which are represented as
             instances of StateMachineType ObjectTypes. Each state shall have a
             HasSubStateMachine reference to the StateMachineType object which represents
             the child states. The SubStateMachine is not active if the parent state is not
             active. In this case the CurrentState and LastTransition variables of the
             sub-state machine shall have a status equal to Bad_StateNotActive.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FiniteStateMachineModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.FiniteStateMachineModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FiniteStateMachineModel.#ctor(UnifiedAutomation.UaServer.FiniteStateMachineModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.FiniteStateMachineModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.FiniteStateMachineModel.AvailableStates">
            <summary>
            Gets or sets the AvailableStates
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.FiniteStateMachineModel.AvailableTransitions">
            <summary>
            Gets or sets the AvailableTransitions
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.FiniteStateMachineModel.CurrentState">
            <summary>
            Stores the current state of an instance of the FiniteStateMachineType.
            </summary>
            <remarks>
            CurrentState provides a human readable name for the current state which may not
            be suitable for use in application control logic. Applications should use the
            Id property of CurrentState if they need a unique identifier for the state.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.FiniteStateMachineModel.LastTransition">
            <summary>
            Stores the last transition which occurred in an instance of the
            FiniteStateMachineType.
            </summary>
            <remarks>
            LastTransition provides a human readable name for the last transition which may
            not be suitable for use in application control logic. Applications should use
            the Id property of LastTransition if they need a unique identifier for the
            transition.
            </remarks>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ExclusiveLimitStateMachineModel">
             <summary>
             Defines the state machine used by AlarmTypes that handle multiple mutually
             exclusive limits.
             </summary>
             <remarks>
             It is created by extending the FiniteStateMachineType.
            
             The ExclusiveLimitStateMachine defines the sub state machine that represents
             the actual level of a multilevel Alarm when it is in the Active state. The sub
             state machine defined here includes High, Low, HighHigh and LowLow states. This
             model also includes in its transition state a series of transitions to and from
             a parent state, the inactive state. This state machine as it is defined shall
             be used as a sub state machine for a state machine which has an Active state.
             This Active state could be part of a “level” Alarm or “deviation” Alarm or any
             other Alarm state machine.
            
             The LowLow, Low, High, HighHigh are typical for many industries. Vendors can
             introduce substate models that include additional limits; they may also omit
             limits in an instance.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ExclusiveLimitStateMachineModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ExclusiveLimitStateMachineModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ExclusiveLimitStateMachineModel.#ctor(UnifiedAutomation.UaServer.ExclusiveLimitStateMachineModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ExclusiveLimitStateMachineModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.FileTransferStateMachineModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FileTransferStateMachineModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.FileTransferStateMachineModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FileTransferStateMachineModel.#ctor(UnifiedAutomation.UaServer.FileTransferStateMachineModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.FileTransferStateMachineModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FileTransferStateMachineModel.GetMethodDispatcher(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Gets the method dispatcher.
            </summary>
            <param name="context">The context.</param>
            <param name="objectId">The object id.</param>
            <param name="methodId">The method id.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FileTransferStateMachineModel.DispatchMethod(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MethodHandle,System.Collections.Generic.IList{UnifiedAutomation.UaBase.Variant},System.Collections.Generic.List{UnifiedAutomation.UaBase.StatusCode},System.Collections.Generic.List{UnifiedAutomation.UaBase.Variant})">
            <summary>
            Dispatches the method.
            </summary>
            <param name="context">The context.</param>
            <param name="methodHandle">The method handle.</param>
            <param name="inputArguments">The input arguments.</param>
            <param name="inputArgumentResults">The input argument results.</param>
            <param name="outputArguments">The output arguments.</param>
            <returns></returns>
        </member>
        <member name="P:UnifiedAutomation.UaServer.FileTransferStateMachineModel.FileTransferStateMachineMethods">
            <summary>
            Gets or sets the FileTransferStateMachine methods.
            </summary>
            <value>
            The FileTransferStateMachine methods.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.IFileTransferStateMachineMethods">
            <summary>
            The interface for methods implemented on the FileTransferStateMachineModel object.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IFileTransferStateMachineMethods.Reset(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.FileTransferStateMachineModel)">
            <summary>
            </summary>
            <param name="context"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ProgramStateMachineModel">
            <summary>
            A state machine for a program.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ProgramStateMachineModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ProgramStateMachineModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ProgramStateMachineModel.#ctor(UnifiedAutomation.UaServer.ProgramStateMachineModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ProgramStateMachineModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ProgramStateMachineModel.AutoDelete">
            <summary>
            Gets or sets the AutoDelete
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ProgramStateMachineModel.CurrentState">
            <summary>
            Gets or sets the CurrentState
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ProgramStateMachineModel.Deletable">
            <summary>
            Gets or sets the Deletable
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ProgramStateMachineModel.FinalResultData">
            <summary>
            Gets or sets the FinalResultData
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ProgramStateMachineModel.LastTransition">
            <summary>
            Gets or sets the LastTransition
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ProgramStateMachineModel.ProgramDiagnostics">
            <summary>
            Gets or sets the ProgramDiagnostics
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ProgramStateMachineModel.RecycleCount">
            <summary>
            Gets or sets the RecycleCount
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ShelvedStateMachineModel">
             <summary>
             Defines a substate machine that represents an advanced Alarm filtering model.
             </summary>
             <remarks>
             The state model supports two types of Shelving: OneShotShelving and
             TimedShelving.<!-- They are illustrated in Figure 13. --> The illustration
             includes the allowed transitions between the various substates. Shelving is an
             Operator initiated activity.
            
             \todo Add illustration?
            
             In OneShotShelving, a user requests that an Alarm be Shelved for its current
             Active state. This type of Shelving is typically used when an Alarm is
             continually occurring on a boundary (i.e. a Condition is jumping between High
             Alarm and HighHigh Alarm, always in the Active state). The One Shot Shelving
             will automatically clear when an Alarm returns to an inactive state. Another
             use for this type of Shelving is for a plant area that is shut down i.e. a long
             running Alarm such as a low level Alarm for a tank that is not in use. When the
             tank starts operation again the Shelving state will automatically clear.
            
             In TimedShelving, a user specifies that an Alarm be shelved for a fixed time
             period. This type of Shelving is quite often used to block nuisance Alarms. For
             example, an Alarm that occurs more than ten times in a minute may get shelved
             for a few minutes.
            
             In all states, the Unshelve can be called to cause a transition to the Unshelve
             state; this includes Un-shelving an Alarm that is in the TimedShelve state
             before the time has expired and the OneShotShelve state without a transition to
             an inactive state.
            
             <!-- All but two transitions are caused by method calls as illustrated in
             Figure 13. -->The “Time Expired” transition is simply a system generated
             transition that occurs when the time value defined as part of the “Timed
             Shelved Call” has expired. The “Any Transition Occurs” transition is also a
             system generated transition; this transition is generated when the Condition
             goes to an inactive state.
            
             \todo Reference to illustration
            
             The ShelvedStateMachine includes a hierarchy of substates. It supports all
             transitions between Unshelved, OneShotShelved and TimedShelved.
            
             This FiniteStateMachine supports three Active states; Unshelved, TimedShelved
             and OneShotShelved. It also supports six transitions.<!-- The states and
             transitions are described in Table 32.--> This FiniteStateMachine also supports
             three methods:
             <see cref="M:UnifiedAutomation.UaServer.IShelvedStateMachineMethods.TimedShelve(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.ShelvedStateMachineModel,System.Double)"/>
             ,
             <see cref="M:UnifiedAutomation.UaServer.IShelvedStateMachineMethods.OneShotShelve(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.ShelvedStateMachineModel)"/>
             and
             <see cref="M:UnifiedAutomation.UaServer.IShelvedStateMachineMethods.Unshelve(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.ShelvedStateMachineModel)"/>.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ShelvedStateMachineModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ShelvedStateMachineModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ShelvedStateMachineModel.#ctor(UnifiedAutomation.UaServer.ShelvedStateMachineModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ShelvedStateMachineModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ShelvedStateMachineModel.UnshelveTime">
            <summary>
            Specifies the remaining time in milliseconds until the Alarm automatically
            transitions into the Unshelved state.
            </summary>
            <remarks>
            For the TimedShelved state this time is initialised with the ShelvingTime
            argument of the TimedShelve method call. For the OneShotShelved state the
            UnshelveTime will be a constant set to the maximum Duration except if a
            MaxTimeShelved Property is provided.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ShelvedStateMachineModel.GetMethodDispatcher(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Gets the method dispatcher.
            </summary>
            <param name="context">The context.</param>
            <param name="objectId">The object id.</param>
            <param name="methodId">The method id.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ShelvedStateMachineModel.DispatchMethod(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MethodHandle,System.Collections.Generic.IList{UnifiedAutomation.UaBase.Variant},System.Collections.Generic.List{UnifiedAutomation.UaBase.StatusCode},System.Collections.Generic.List{UnifiedAutomation.UaBase.Variant})">
            <summary>
            Dispatches the method.
            </summary>
            <param name="context">The context.</param>
            <param name="methodHandle">The method handle.</param>
            <param name="inputArguments">The input arguments.</param>
            <param name="inputArgumentResults">The input argument results.</param>
            <param name="outputArguments">The output arguments.</param>
            <returns></returns>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ShelvedStateMachineModel.ShelvedStateMachineMethods">
            <summary>
            Gets or sets the ShelvedStateMachine methods.
            </summary>
            <value>
            The ShelvedStateMachine methods.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.IShelvedStateMachineMethods">
            <summary>
            The interface for methods implemented on the ShelvedStateMachineModel object.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IShelvedStateMachineMethods.OneShotShelve(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.ShelvedStateMachineModel)">
             <summary>
             Sets the AlarmCondition to the OneShotShelved state.
             </summary>
             <remarks>
             Normally, the MethodId found in the Shelving child of the Condition instance
             and the NodeId of the Shelving object as the ObjectId are passed to the Call
             Service. However, some Servers do not expose Condition instances in the
             AddressSpace. Therefore all Servers shall also allow Clients to call the
             OneShotShelve method by specifying ConditionId as the ObjectId. The method
             cannot be called with an ObjectId of the ShelvedStateMachineType Node.
            
             <b>Method Result Codes</b>
            
             ResultCode                  | Description
             ----------------------------|----------------------------------------------------------------------------------------
             Bad_ConditionAlreadyShelved | The Alarm is already in a shelved state. The Alarm is already in OneShotShelved state.
             </remarks>
             <param name="context"></param>
             <param name="model"></param>
             <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IShelvedStateMachineMethods.TimedShelve(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.ShelvedStateMachineModel,System.Double)">
             <summary>
             Sets the AlarmCondition to the TimedShelved state.
             </summary>
             <remarks>
             Normally, the MethodId found in the Shelving child of the Condition instance
             and the NodeId of the Shelving object as the ObjectId are passed to the Call
             Service. However, some Servers do not expose Condition instances in the
             AddressSpace. Therefore all Servers shall also allow Clients to call the
             TimedShelve method by specifying ConditionId as the ObjectId. The method cannot
             be called with an ObjectId of the ShelvedStateMachineType Node.
            
             <b>Method Result Codes</b>
            
             ResultCode                  | Description
             ----------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------
             Bad_ConditionAlreadyShelved | The Alarm is already in a shelved state. The Alarm is already in TimedShelved state and the system does not allow a reset of the shelved timer.
             Bad_ShelvingTimeOutOfRange  | The provided Shelving time is outside the range allowed by the Server for Shelving.
            
             \todo Include comments? Parameters and Result Codes?
             </remarks>
             <param name="context"></param>
             <param name="model"></param>
             <param name="ShelvingTime">
             Specifies a fixed time for which the Alarm is to be shelved.
             The Server may refuse the provided duration. If a MaxTimeShelved Property exist
             on the Alarm than the Shelving time shall be less than or equal to the value of
             this Property.
             </param>
             <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IShelvedStateMachineMethods.Unshelve(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.ShelvedStateMachineModel)">
             <summary>
             Unshelve sets the AlarmCondition to the Unshelved state.
             </summary>
             <remarks>
             Normally, the MethodId found in the Shelving child of the Condition instance
             and the NodeId of the Shelving object as the ObjectId are passed to the Call
             Service. However, some Servers do not expose Condition instances in the
             AddressSpace. Therefore all Servers shall also allow Clients to call the
             Unshelve method by specifying ConditionId as the ObjectId. The method cannot be
             called with an ObjectId of the ShelvedStateMachineType Node.
            
             <b>Method Result Codes:</b>
            
             ResultCode              | Description
             ------------------------|--------------------------------------------------
             Bad_ConditionNotShelved | The Alarm is not in the requested shelved state.
             </remarks>
             <param name="context"></param>
             <param name="model"></param>
             <returns></returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.StateModel">
            <summary>
            States of a FiniteStateMachine are represented as objects of the StateType.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.StateModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.StateModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.StateModel.#ctor(UnifiedAutomation.UaServer.StateModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.StateModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.StateModel.StateNumber">
            <summary>
            A number for the state that is unique across all states defined in the state
            machine.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.InitialStateModel">
             <summary>
             An object of the InitialStateType represents the state that a
             FiniteStateMachine enters when it is activated.
             </summary>
             <remarks>
             Each FiniteStateMachine can have at most one state of type InitialStateType,
             but a FiniteStateMachine does not have to have a state of this type.
            
             A sub-state machine goes into its initial state whenever the parent state is
             entered. However, a state machine may define a transition that goes directly to
             a state of the sub-state machine. In this case the sub-state machine goes into
             that state instead of the initial State.
            
             If no initial state for a sub-state machine exists and the state having the
             sub-state machine is entered directly, then the state of the sub-state machine
             is server-specific.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.InitialStateModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.InitialStateModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.InitialStateModel.#ctor(UnifiedAutomation.UaServer.InitialStateModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.InitialStateModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.SubscribedDataSetModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SubscribedDataSetModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.SubscribedDataSetModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SubscribedDataSetModel.#ctor(UnifiedAutomation.UaServer.SubscribedDataSetModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.SubscribedDataSetModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SubscribedDataSetModel.DataSetMetaData">
            <summary>
            Gets or sets the DataSetMetaData
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SubscribedDataSetModel.MessageReceiveTimeout">
            <summary>
            Gets or sets the MessageReceiveTimeout
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.SubscribedDataSetMirrorModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SubscribedDataSetMirrorModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.SubscribedDataSetMirrorModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SubscribedDataSetMirrorModel.#ctor(UnifiedAutomation.UaServer.SubscribedDataSetMirrorModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.SubscribedDataSetMirrorModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.TargetVariablesModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TargetVariablesModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.TargetVariablesModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TargetVariablesModel.#ctor(UnifiedAutomation.UaServer.TargetVariablesModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.TargetVariablesModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.TargetVariablesModel.TargetVariables">
            <summary>
            Gets or sets the TargetVariables
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TargetVariablesModel.GetMethodDispatcher(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Gets the method dispatcher.
            </summary>
            <param name="context">The context.</param>
            <param name="objectId">The object id.</param>
            <param name="methodId">The method id.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TargetVariablesModel.DispatchMethod(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MethodHandle,System.Collections.Generic.IList{UnifiedAutomation.UaBase.Variant},System.Collections.Generic.List{UnifiedAutomation.UaBase.StatusCode},System.Collections.Generic.List{UnifiedAutomation.UaBase.Variant})">
            <summary>
            Dispatches the method.
            </summary>
            <param name="context">The context.</param>
            <param name="methodHandle">The method handle.</param>
            <param name="inputArguments">The input arguments.</param>
            <param name="inputArgumentResults">The input argument results.</param>
            <param name="outputArguments">The output arguments.</param>
            <returns></returns>
        </member>
        <member name="P:UnifiedAutomation.UaServer.TargetVariablesModel.TargetVariablesMethods">
            <summary>
            Gets or sets the TargetVariables methods.
            </summary>
            <value>
            The TargetVariables methods.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ITargetVariablesMethods">
            <summary>
            The interface for methods implemented on the TargetVariablesModel object.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ITargetVariablesMethods.AddTargetVariables(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.TargetVariablesModel,UnifiedAutomation.UaBase.ConfigurationVersionDataType,UnifiedAutomation.UaBase.FieldTargetDataType[],UnifiedAutomation.UaBase.StatusCode[]@)">
            <summary>
            </summary>
            <param name="context"></param>
            <param name="model"></param>
            <param name="ConfigurationVersion"></param>
            <param name="TargetVariablesToAdd"></param>
            <param name="AddResults">out: </param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ITargetVariablesMethods.RemoveTargetVariables(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.TargetVariablesModel,UnifiedAutomation.UaBase.ConfigurationVersionDataType,System.UInt32[],UnifiedAutomation.UaBase.StatusCode[]@)">
            <summary>
            </summary>
            <param name="context"></param>
            <param name="model"></param>
            <param name="ConfigurationVersion"></param>
            <param name="TargetsToRemove"></param>
            <param name="RemoveResults">out: </param>
            <returns></returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.TemporaryFileTransferModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TemporaryFileTransferModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.TemporaryFileTransferModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TemporaryFileTransferModel.#ctor(UnifiedAutomation.UaServer.TemporaryFileTransferModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.TemporaryFileTransferModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.TemporaryFileTransferModel.ClientProcessingTimeout">
            <summary>
            Gets or sets the ClientProcessingTimeout
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TemporaryFileTransferModel.GetMethodDispatcher(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Gets the method dispatcher.
            </summary>
            <param name="context">The context.</param>
            <param name="objectId">The object id.</param>
            <param name="methodId">The method id.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TemporaryFileTransferModel.DispatchMethod(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MethodHandle,System.Collections.Generic.IList{UnifiedAutomation.UaBase.Variant},System.Collections.Generic.List{UnifiedAutomation.UaBase.StatusCode},System.Collections.Generic.List{UnifiedAutomation.UaBase.Variant})">
            <summary>
            Dispatches the method.
            </summary>
            <param name="context">The context.</param>
            <param name="methodHandle">The method handle.</param>
            <param name="inputArguments">The input arguments.</param>
            <param name="inputArgumentResults">The input argument results.</param>
            <param name="outputArguments">The output arguments.</param>
            <returns></returns>
        </member>
        <member name="P:UnifiedAutomation.UaServer.TemporaryFileTransferModel.TemporaryFileTransferMethods">
            <summary>
            Gets or sets the TemporaryFileTransfer methods.
            </summary>
            <value>
            The TemporaryFileTransfer methods.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ITemporaryFileTransferMethods">
            <summary>
            The interface for methods implemented on the TemporaryFileTransferModel object.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ITemporaryFileTransferMethods.CloseAndCommit(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.TemporaryFileTransferModel,System.UInt32,UnifiedAutomation.UaBase.NodeId@)">
            <summary>
            </summary>
            <param name="context"></param>
            <param name="model"></param>
            <param name="FileHandle"></param>
            <param name="CompletionStateMachine">out: </param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ITemporaryFileTransferMethods.GenerateFileForRead(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.TemporaryFileTransferModel,UnifiedAutomation.UaBase.Variant,UnifiedAutomation.UaBase.NodeId@,System.UInt32@,UnifiedAutomation.UaBase.NodeId@)">
            <summary>
            </summary>
            <param name="context"></param>
            <param name="model"></param>
            <param name="GenerateOptions"></param>
            <param name="FileNodeId">out: </param>
            <param name="FileHandle">out: </param>
            <param name="CompletionStateMachine">out: </param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ITemporaryFileTransferMethods.GenerateFileForWrite(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.TemporaryFileTransferModel,UnifiedAutomation.UaBase.Variant,UnifiedAutomation.UaBase.NodeId@,System.UInt32@)">
            <summary>
            </summary>
            <param name="context"></param>
            <param name="model"></param>
            <param name="GenerateOptions"></param>
            <param name="FileNodeId">out: </param>
            <param name="FileHandle">out: </param>
            <returns></returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.TransitionModel">
             <summary>
             Transitions of a FiniteStateMachine are represented as objects of the
             ObjectType TransitionType.
             </summary>
             <remarks>
             Each valid transition shall have exactly one FromState reference and exactly
             one ToState reference, each pointing to an object of the ObjectType StateType.
            
             Each transition can have one or more HasCause references pointing to the cause
             that triggers the transition.
            
             Each transition can have one or more HasEffect references pointing to the
             effects that occur when the transition was triggered.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TransitionModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.TransitionModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TransitionModel.#ctor(UnifiedAutomation.UaServer.TransitionModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.TransitionModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.TransitionModel.TransitionNumber">
            <summary>
            A number for the transition that is unique across all transitions defined in
            the state machine.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.VendorServerInfoModel">
            <summary>
            This object type defines a placeholder object for vendor-specific information
            about the OPC UA Server.
            </summary>
            <remarks>
            This object type defines an empty object type that has no components. It shall
            be subtyped by vendors to define their vendor-specific information.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.VendorServerInfoModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.VendorServerInfoModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.VendorServerInfoModel.#ctor(UnifiedAutomation.UaServer.VendorServerInfoModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.VendorServerInfoModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.WriterGroupMessageModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.WriterGroupMessageModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.WriterGroupMessageModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.WriterGroupMessageModel.#ctor(UnifiedAutomation.UaServer.WriterGroupMessageModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.WriterGroupMessageModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.JsonWriterGroupMessageModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.JsonWriterGroupMessageModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.JsonWriterGroupMessageModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.JsonWriterGroupMessageModel.#ctor(UnifiedAutomation.UaServer.JsonWriterGroupMessageModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.JsonWriterGroupMessageModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.JsonWriterGroupMessageModel.NetworkMessageContentMask">
            <summary>
            Gets or sets the NetworkMessageContentMask
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.UadpWriterGroupMessageModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.UadpWriterGroupMessageModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.UadpWriterGroupMessageModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.UadpWriterGroupMessageModel.#ctor(UnifiedAutomation.UaServer.UadpWriterGroupMessageModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.UadpWriterGroupMessageModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.UadpWriterGroupMessageModel.DataSetOrdering">
            <summary>
            Gets or sets the DataSetOrdering
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.UadpWriterGroupMessageModel.GroupVersion">
            <summary>
            Gets or sets the GroupVersion
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.UadpWriterGroupMessageModel.NetworkMessageContentMask">
            <summary>
            Gets or sets the NetworkMessageContentMask
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.UadpWriterGroupMessageModel.PublishingOffset">
            <summary>
            Gets or sets the PublishingOffset
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.UadpWriterGroupMessageModel.SamplingOffset">
            <summary>
            Gets or sets the SamplingOffset
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.WriterGroupTransportModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.WriterGroupTransportModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.WriterGroupTransportModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.WriterGroupTransportModel.#ctor(UnifiedAutomation.UaServer.WriterGroupTransportModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.WriterGroupTransportModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.BrokerConnectionTransportModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BrokerConnectionTransportModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.BrokerConnectionTransportModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BrokerConnectionTransportModel.#ctor(UnifiedAutomation.UaServer.BrokerConnectionTransportModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.BrokerConnectionTransportModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.BrokerConnectionTransportModel.AuthenticationProfileUri">
            <summary>
            Gets or sets the AuthenticationProfileUri
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.BrokerConnectionTransportModel.ResourceUri">
            <summary>
            Gets or sets the ResourceUri
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.BrokerWriterGroupTransportModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BrokerWriterGroupTransportModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.BrokerWriterGroupTransportModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BrokerWriterGroupTransportModel.#ctor(UnifiedAutomation.UaServer.BrokerWriterGroupTransportModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.BrokerWriterGroupTransportModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.BrokerWriterGroupTransportModel.AuthenticationProfileUri">
            <summary>
            Gets or sets the AuthenticationProfileUri
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.BrokerWriterGroupTransportModel.QueueName">
            <summary>
            Gets or sets the QueueName
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.BrokerWriterGroupTransportModel.RequestedDeliveryGuarantee">
            <summary>
            Gets or sets the RequestedDeliveryGuarantee
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.BrokerWriterGroupTransportModel.ResourceUri">
            <summary>
            Gets or sets the ResourceUri
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.DatagramWriterGroupTransportModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DatagramWriterGroupTransportModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.DatagramWriterGroupTransportModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DatagramWriterGroupTransportModel.#ctor(UnifiedAutomation.UaServer.DatagramWriterGroupTransportModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.DatagramWriterGroupTransportModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DatagramWriterGroupTransportModel.MessageRepeatCount">
            <summary>
            Gets or sets the MessageRepeatCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DatagramWriterGroupTransportModel.MessageRepeatDelay">
            <summary>
            Gets or sets the MessageRepeatDelay
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditEventModel">
             <remarks>
             OPC UA includes support for security audit trails with traceability between
             Client and Server audit logs. OPC UA defines audit events for security related
             client actions, like creating a connection with a server, and also audit events
             for actions changing the system, like write calls to variables or method calls.
             If a security-related problem is detected at the Server, the associated Client
             audit log entry can be located and examined. OPC UA also provides the
             capability for Servers to generate Event Notifications that report auditable
             Events to Clients capable of processing and logging them. OPC UA defines
             security audit parameters that can be included in audit log entries and in
             audit Event Notifications.
            
             AuditEvents are Events of AuditEventType or subtypes that are generated as a
             result of an action taken on the Server by a Client of the Server. For example,
             in response to a Client issuing a write to a Variable, the Server would
             generate an AuditEvent describing the Variable as the source and the user and
             Client session as the initiators of the Event.
            
             OPC UA Servers create audit events for an auditable action request. If the
             action is accepted, then an action AuditEvent is generated and processed by the
             Server. If the action is not accepted due to security reasons, a security
             AuditEvent is generated and processed by the Server. The Server may involve the
             underlying device or system in the process, but it is the Server’s
             responsibility to provide the Event to any interested Clients. Clients are free
             to subscribe to Events from the Server and will receive the AuditEvents in
             response to normal Publish requests.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditEventModel.#ctor(UnifiedAutomation.UaServer.AuditEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditEventModel.ActionTimeStamp">
            <summary>
            Identifies the time the user initiated the action that resulted in the
            AuditEvent being generated.
            </summary>
            <remarks>
            It differs from the Time Property because this is the time the server generated
            the AuditEvent documenting the action.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditEventModel.ClientAuditEntryId">
            <summary>
            Contains the human-readable AuditEntryId.
            </summary>
            <remarks>
            All action requests include a human readable AuditEntryId. The AuditEntryId is
            included in the AuditEvent to allow human readers to correlate an Event with
            the initiating action. The AuditEntryId typically contains who initiated the
            action and from where it was initiated.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditEventModel.ClientUserId">
            <summary>
            Identifies the user of the client requesting an action.
            </summary>
            <remarks>
            The ClientUserId can be obtained from the UserIdentityToken passed in the
            ActivateSession call. If the UserIdentityToken is a UserNameIdentityToken, then
            the ClientUserId is the UserName. If the UserIdentityToken is an
            X509IdentityToken, then the ClientUserId is the X509 Subject Name of the
            certificate. If the UserIdentityToken is an IssuedIdentityToken, then the
            ClientUserId should be a string that represents the owner of the token. The
            best choice for the string depends on the type of IssuedIdentityToken. If an
            AnonymousIdentityToken was used, the value is null.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditEventModel.ServerId">
            <summary>
            Uniquely identifies the Server generating the Event.
            </summary>
            <remarks>
            It identifies the Server uniquely even in a server-controlled transparent
            redundancy scenario where several Servers may use the same URI.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditEventModel.Status">
            <summary>
            Identifies whether the requested action could be performed.
            </summary>
            <remarks>
            Set Status to TRUE if the requested action could be performed, or to FALSE if
            not.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditNodeManagementEventModel">
             <remarks>
             This is a subtype of <see cref="T:UnifiedAutomation.UaServer.AuditEventModel"/>
             and is used for categorization of node management related Events. This type
             follows all behaviours of its parent type.
            
             This EventType inherits all Properties of the
             <see cref="T:UnifiedAutomation.UaServer.AuditEventModel"/>. There are no
             additional Properties defined for this EventType. The SourceNode for Events of
             this type should be assigned to the Server object. The SourceName for Events of
             this type should be “NodeManagement/” and the Service that generates the Event
             (e.g. AddNodes, AddReferences, DeleteNodes, DeleteReferences).
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditNodeManagementEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditNodeManagementEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditNodeManagementEventModel.#ctor(UnifiedAutomation.UaServer.AuditNodeManagementEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditNodeManagementEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditNodeManagementEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditNodeManagementEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditAddNodesEventModel">
             <remarks>
             This is a subtype of
             <see cref="T:UnifiedAutomation.UaServer.AuditNodeManagementEventModel"/> and is
             used for Events generated from calling the AddNodes Service defined in Part 4
             of the OPC UA Specification.
            
             This EventType inherits all Properties of the
             <see cref="T:UnifiedAutomation.UaServer.AuditNodeManagementEventModel"/>. The
             SourceName for Events of this type should be “NodeManagement/AddNodes”.
            
             The additional Properties defined for this EventType reflect parameters of the
             Service call that triggers the Event.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditAddNodesEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditAddNodesEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditAddNodesEventModel.#ctor(UnifiedAutomation.UaServer.AuditAddNodesEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditAddNodesEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditAddNodesEventModel.NodesToAdd">
            <summary>
            The NodesToAdd parameter of the AddNodes Service call.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditAddNodesEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditAddNodesEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditAddReferencesEventModel">
             <remarks>
             This is a subtype of
             <see cref="T:UnifiedAutomation.UaServer.AuditNodeManagementEventModel"/> and is
             used for Events generated from calling the AddReferences Service defined in
             Part 4 of the OPC UA Specification.
            
             This EventType inherits all Properties of the
             <see cref="T:UnifiedAutomation.UaServer.AuditNodeManagementEventModel"/>.
            
             The SourceName for Events of this type should be
             “NodeManagement/AddReferences”.
            
             The additional Properties defined for this EventType reflect parameters of the
             Service call that triggers the Event.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditAddReferencesEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditAddReferencesEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditAddReferencesEventModel.#ctor(UnifiedAutomation.UaServer.AuditAddReferencesEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditAddReferencesEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditAddReferencesEventModel.ReferencesToAdd">
            <summary>
            The referencesToAdd parameter of the AddReferences Service call.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditAddReferencesEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditAddReferencesEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditDeleteNodesEventModel">
             <remarks>
             This is a subtype of
             <see cref="T:UnifiedAutomation.UaServer.AuditNodeManagementEventModel"/> and is
             used for Events generated from calling the DeleteNodes Service defined in Part
             4 of the OPC UA Specification.
            
             This EventType inherits all Properties of the AuditNodeManagementEventType. The
             SourceName for Events of this type should be “NodeManagement/DeleteNodes”.
            
             The additional Properties defined for this EventType reflect parameters of the
             Service call that triggers the Event.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditDeleteNodesEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditDeleteNodesEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditDeleteNodesEventModel.#ctor(UnifiedAutomation.UaServer.AuditDeleteNodesEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditDeleteNodesEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditDeleteNodesEventModel.NodesToDelete">
            <summary>
            The nodesToDelete parameter of the DeleteNodes Service call.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditDeleteNodesEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditDeleteNodesEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditDeleteReferencesEventModel">
             <remarks>
             This is a subtype of
             <see cref="T:UnifiedAutomation.UaServer.AuditNodeManagementEventModel"/> and is
             used for Events generated from calling the DeleteReferences Service defined in
             Part 4 of the OPC UA Specification.
            
             This EventType inherits all Properties of the
             <see cref="T:UnifiedAutomation.UaServer.AuditNodeManagementEventModel"/>. The
             SourceName for Events of this type should be “NodeManagement/DeleteReferences”.
            
             The additional Properties defined for this EventType reflect parameters of the
             Service call that triggers the Event.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditDeleteReferencesEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditDeleteReferencesEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditDeleteReferencesEventModel.#ctor(UnifiedAutomation.UaServer.AuditDeleteReferencesEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditDeleteReferencesEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditDeleteReferencesEventModel.ReferencesToDelete">
            <summary>
            The referencesToDelete parameter of the DeleteReferences Service call.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditDeleteReferencesEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditDeleteReferencesEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditSecurityEventModel">
             <remarks>
             This EventType is a subtype of
             <see cref="T:UnifiedAutomation.UaServer.AuditEventModel"/> and is used only for
             categorization of security-related Events. This type follows all behaviour of
             its parent type.
            
             There are no additional Properties defined for this EventType.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditSecurityEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditSecurityEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditSecurityEventModel.#ctor(UnifiedAutomation.UaServer.AuditSecurityEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditSecurityEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditSecurityEventModel.StatusCodeId">
            <summary>
            Gets or sets the StatusCodeId
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditSecurityEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditSecurityEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditCertificateEventModel">
             <remarks>
             This is a subtype of
             <see cref="T:UnifiedAutomation.UaServer.AuditSecurityEventModel"/> and is used
             only for categorization of certificate related Events. This type follows all
             behaviours of its parent type. These AuditEvents will be generated for
             certificate errors in addition to other AuditEvents related to service calls.
            
             This EventType inherits all Properties of the AuditSecurityEventType. The
             SourceName for Events of this type should be “Security/Certificate”.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditCertificateEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditCertificateEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditCertificateEventModel.#ctor(UnifiedAutomation.UaServer.AuditCertificateEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditCertificateEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditCertificateEventModel.Certificate">
            <summary>
            The certificate that encountered a validation issue.
            </summary>
            <remarks>
            Additional subtypes of this EventType will be defined representing the
            individual validation errors. This certificate can be matched to the Service
            that passed it (Session or SecureChannel Service Set) since the AuditEvents for
            these Services also include the certificate.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditCertificateEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditCertificateEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditCertificateDataMismatchEventModel">
             <remarks>
             This is a subtype of
             <see cref="T:UnifiedAutomation.UaServer.AuditCertificateEventModel"/> and is used
             only for categorization of certificate related Events. This type follows all
             behaviours of its parent type. This AuditEvent is generated if the HostName in
             the URL used to connect to the Server is not the same as one of the HostNames
             specified in the certificate, or if the application and Software certificates
             contain an application or product URI that does not match the URI specified in
             the ApplicationDescription provided with the certificate. For more details on
             certificates see Part 4 of the OPC UA Specification.
            
             This EventType inherits all Properties of the
             <see cref="T:UnifiedAutomation.UaServer.AuditCertificateEventModel"/>. The
             SourceName for Events of this type should be “Security/Certificate”.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditCertificateDataMismatchEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditCertificateDataMismatchEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditCertificateDataMismatchEventModel.#ctor(UnifiedAutomation.UaServer.AuditCertificateDataMismatchEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditCertificateDataMismatchEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditCertificateDataMismatchEventModel.InvalidHostname">
            <summary>
            The string that represents the host name passed in as part of the URL that is
            found to be invalid.
            </summary>
            <remarks>
            If the host name was not invalid, it can be null.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditCertificateDataMismatchEventModel.InvalidUri">
            <summary>
            The URI that was passed in and found to not match what is contained in the
            certificate.
            </summary>
            <remarks>
            If the URI was not invalid, it can be null.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditCertificateDataMismatchEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditCertificateDataMismatchEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditCertificateExpiredEventModel">
             <remarks>
             This is a subtype of
             <see cref="T:UnifiedAutomation.UaServer.AuditCertificateEventModel"/> and is used
             only for categorization of certificate related Events. This type follows all
             behaviours of its parent type. This AuditEvent is generated if the current time
             is outside the validity period’s start date and end date.
            
             This EventType inherits all Properties of the AuditCertificateEventType. The
             SourceName for Events of this type should be “Security/Certificate”. The
             Message Variable shall include a description of why the certificate was expired
             (i.e. time before start or time after end). There are no additional Properties
             defined for this EventType.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditCertificateExpiredEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditCertificateExpiredEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditCertificateExpiredEventModel.#ctor(UnifiedAutomation.UaServer.AuditCertificateExpiredEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditCertificateExpiredEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditCertificateExpiredEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditCertificateExpiredEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditCertificateInvalidEventModel">
             <remarks>
             This is a subtype of
             <see cref="T:UnifiedAutomation.UaServer.AuditCertificateEventModel"/> and is used
             only for categorization of certificate related Events. This type follows all
             behaviours of its parent type. This AuditEvent is generated if the certificate
             structure is invalid or if the certificate has an invalid signature.
            
             This EventType inherits all Properties of the
             <see cref="T:UnifiedAutomation.UaServer.AuditCertificateEventModel"/>. The
             SourceName for Events of this type should be “Security/Certificate”. The
             Message shall include a description of why the certificate is invalid. There
             are no additional Properties defined for this EventType.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditCertificateInvalidEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditCertificateInvalidEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditCertificateInvalidEventModel.#ctor(UnifiedAutomation.UaServer.AuditCertificateInvalidEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditCertificateInvalidEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditCertificateInvalidEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditCertificateInvalidEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditCertificateMismatchEventModel">
             <remarks>
             This is a subtype of
             <see cref="T:UnifiedAutomation.UaServer.AuditCertificateEventModel"/> and is used
             only for categorization of certificate related Events. This type follows all
             behaviours of its parent type. This AuditEvent is generated if a certificate
             set of uses does not match the requested use for the certificate (i.e.
             application, Software or Certificate Authority).
            
             This EventType inherits all Properties of the
             <see cref="T:UnifiedAutomation.UaServer.AuditCertificateEventModel"/>. The
             SourceName for Events of this type should be “Security/Certificate”. The
             Message Variable shall include a description of the misuse of the certificate.
             There are no additional Properties defined for this EventType.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditCertificateMismatchEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditCertificateMismatchEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditCertificateMismatchEventModel.#ctor(UnifiedAutomation.UaServer.AuditCertificateMismatchEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditCertificateMismatchEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditCertificateMismatchEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditCertificateMismatchEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditCertificateRevokedEventModel">
             <remarks>
             This is a subtype of
             <see cref="T:UnifiedAutomation.UaServer.AuditCertificateEventModel"/> and is used
             only for categorization of certificate related Events. This type follows all
             behaviours of its parent type. This AuditEvent is generated if a certificate
             has been revoked or if the revocation list is not available (i.e. a network
             interruption prevents the application from accessing the list).
            
             This EventType inherits all Properties of the
             <see cref="T:UnifiedAutomation.UaServer.AuditCertificateEventModel"/>. The
             SourceName for Events of this type should be “Security/Certificate”. The
             Message Variable shall include a description of why the certificate is revoked
             (was the revocation list unavailable or was the certificate on the list). There
             are no additional Properties defined for this EventType.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditCertificateRevokedEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditCertificateRevokedEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditCertificateRevokedEventModel.#ctor(UnifiedAutomation.UaServer.AuditCertificateRevokedEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditCertificateRevokedEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditCertificateRevokedEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditCertificateRevokedEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditCertificateUntrustedEventModel">
             <remarks>
             This is a subtype of
             <see cref="T:UnifiedAutomation.UaServer.AuditCertificateEventModel"/> and is used
             only for categorization of certificate related Events. This type follows all
             behaviours of its parent type. This AuditEvent is generated if the certificate
             is not trusted, that is, if the Issuer certificate is unknown.
            
             This EventType inherits all Properties of the
             <see cref="T:UnifiedAutomation.UaServer.AuditCertificateEventModel"/>. The
             SourceName for Events of this type should be “Security/Certificate”. The
             Message Variable shall include a description of why the certificate is not
             trusted. If a trust chain is involved, then the certificate that failed in the
             trust chain should be described. There are no additional Properties defined for
             this EventType.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditCertificateUntrustedEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditCertificateUntrustedEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditCertificateUntrustedEventModel.#ctor(UnifiedAutomation.UaServer.AuditCertificateUntrustedEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditCertificateUntrustedEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditCertificateUntrustedEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditCertificateUntrustedEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditChannelEventModel">
             <remarks>
             This is a subtype of
             <see cref="T:UnifiedAutomation.UaServer.AuditSecurityEventModel"/> and is used
             for categorization of security-related Events from the SecureChannel Service
             Set defined in Part 4 of the OPC UA Specification.
            
             This EventType inherits all Properties of the
             <see cref="T:UnifiedAutomation.UaServer.AuditSecurityEventModel"/>. SourceNode
             for Events of this type should be assigned to the Server object. The SourceName
             for Events of this type should be “SecureChannel/” followed by the Service that
             generates the Event (e.g. SecureChannel/OpenSecureChannel or
             SecureChannel/CloseSecureChannel). If the ClientUserId is not available for a
             CloseSecureChannel call, then this parameter shall be set to
             “System/CloseSecureChannel”.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditChannelEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditChannelEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditChannelEventModel.#ctor(UnifiedAutomation.UaServer.AuditChannelEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditChannelEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditChannelEventModel.SecureChannelId">
            <summary>
            Uniquely identifies the SecureChannel.
            </summary>
            <remarks>
            The application shall use the same identifier in all AuditEvents related to the
            Session Service Set (
            <see cref="T:UnifiedAutomation.UaServer.AuditCreateSessionEventModel"/>,
            <see cref="T:UnifiedAutomation.UaServer.AuditActivateSessionEventModel"/> and
            their subtypes) and the SecureChannel Service Set (
            <see cref="T:UnifiedAutomation.UaServer.AuditChannelEventModel"/> and its
            subtypes).
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditChannelEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditChannelEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditOpenSecureChannelEventModel">
             <remarks>
             This is a subtype of
             <see cref="T:UnifiedAutomation.UaServer.AuditChannelEventModel"/> and is used for
             Events generated from calling the OpenSecureChannel Service defined in Part 4
             of the OPC UA Specification.
            
             This EventType inherits all Properties of the
             <see cref="T:UnifiedAutomation.UaServer.AuditChannelEventModel"/>. SourceName for
             Events of this type should be “SecureChannel/OpenSecureChannel”. The
             ClientUserId is not available for this call, thus this parameter shall be set
             to “System/OpenSecureChannel”. The additional Properties defined for this
             EventType reflect parameters of the Service call that triggers the Event.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditOpenSecureChannelEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditOpenSecureChannelEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditOpenSecureChannelEventModel.#ctor(UnifiedAutomation.UaServer.AuditOpenSecureChannelEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditOpenSecureChannelEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditOpenSecureChannelEventModel.ClientCertificate">
            <summary>
            The clientCertificate parameter of the OpenSecureChannel Service call.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditOpenSecureChannelEventModel.ClientCertificateThumbprint">
            <summary>
            A thumbprint of the ClientCertificate.
            </summary>
            <remarks>
            See Part 6 of the OPC UA Specification for details on thumbprints.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditOpenSecureChannelEventModel.RequestedLifetime">
            <summary>
            The requestedLifetime parameter of the OpenSecureChannel Service call.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditOpenSecureChannelEventModel.RequestType">
            <summary>
            The requestType parameter of the OpenSecureChannel Service call.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditOpenSecureChannelEventModel.SecurityMode">
            <summary>
            The securityMode parameter of the OpenSecureChannel Service call.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditOpenSecureChannelEventModel.SecurityPolicyUri">
            <summary>
            The securityPolicyUri parameter of the OpenSecureChannel Service call.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditOpenSecureChannelEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditOpenSecureChannelEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditSessionEventModel">
             <remarks>
             This is a subtype of
             <see cref="T:UnifiedAutomation.UaServer.AuditSecurityEventModel"/> and is used
             for categorization of security-related Events from the Session Service Set
             defined in Part 4 of the OPC UA Specification.
            
             This EventType inherits all Properties of the
             <see cref="T:UnifiedAutomation.UaServer.AuditSecurityEventModel"/>.
            
             If the Event is generated by a TransferSubscriptions Service call, the
             SourceNode should be assigned to the SessionDiagnostics object that represents
             the session. The SourceName for Events of this type should be
             “Session/TransferSubscriptions”.
            
             Otherwise, the SourceNode for Events of this type should be assigned to the
             Server object. The SourceName for Events of this type should be “Session/” and
             the Service that generates the Event (e.g. CreateSession, ActivateSession or
             CloseSession).
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditSessionEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditSessionEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditSessionEventModel.#ctor(UnifiedAutomation.UaServer.AuditSessionEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditSessionEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditSessionEventModel.SessionId">
            <summary>
            The SessionId of the session that the Service call was issued on.
            </summary>
            <remarks>
            In the CreateSession Service this shall be set to the newly created SessionId.
            If no session context exists (e.g. for a failed CreateSession Service call),
            the SessionId is set to null.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditSessionEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditSessionEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditActivateSessionEventModel">
             <remarks>
             This is a subtype of
             <see cref="T:UnifiedAutomation.UaServer.AuditSessionEventModel"/> and is used for
             Events generated from calling the ActivateSession Service defined in Part 4 of
             the OPC UA Specification.
            
             This EventType inherits all Properties of the
             <see cref="T:UnifiedAutomation.UaServer.AuditSessionEventModel"/>. The SourceName
             for Events of this type should be “Session/ActivateSession”.
            
             The additional Properties defined for this EventType reflect parameters of the
             Service call that triggers the Event.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditActivateSessionEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditActivateSessionEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditActivateSessionEventModel.#ctor(UnifiedAutomation.UaServer.AuditActivateSessionEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditActivateSessionEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditActivateSessionEventModel.ClientSoftwareCertificates">
            <summary>
            The clientSoftwareCertificates parameter of the ActivateSession Service call.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditActivateSessionEventModel.SecureChannelId">
            <summary>
            Uniquely identifies the SecureChannel.
            </summary>
            <remarks>
            The application shall use the same identifier in all AuditEvents related to the
            Session Service Set (
            <see cref="T:UnifiedAutomation.UaServer.AuditCreateSessionEventModel"/>,
            <see cref="T:UnifiedAutomation.UaServer.AuditActivateSessionEventModel"/> and
            their subtypes) and the SecureChannel Service Set (
            <see cref="T:UnifiedAutomation.UaServer.AuditChannelEventModel"/> and its
            subtypes).
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditActivateSessionEventModel.UserIdentityToken">
            <summary>
            The userIdentityToken parameter of the ActivateSession Service call.
            </summary>
            <remarks>
            For Username/Password tokens the password should not be included.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditActivateSessionEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditActivateSessionEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditCancelEventModel">
             <remarks>
             This is a subtype of
             <see cref="T:UnifiedAutomation.UaServer.AuditSessionEventModel"/> and is used for
             Events generated from calling the Cancel Service defined in Part 4 of the OPC
             UA Specification.
            
             This EventType inherits all Properties of the
             <see cref="T:UnifiedAutomation.UaServer.AuditSessionEventModel"/>. The SourceName
             for Events of this type should be “Session/Cancel”.
            
             The additional Properties defined for this EventType reflect parameters of the
             Service call that triggers the Event.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditCancelEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditCancelEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditCancelEventModel.#ctor(UnifiedAutomation.UaServer.AuditCancelEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditCancelEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditCancelEventModel.RequestHandle">
            <summary>
            The requestHandle parameter of the Cancel Service call.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditCancelEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditCancelEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditCreateSessionEventModel">
             <remarks>
             This is a subtype of
             <see cref="T:UnifiedAutomation.UaServer.AuditSessionEventModel"/> and is used for
             Events generated from calling the CreateSession Service defined in Part 4 of
             the OPC UA Specification.
            
             This EventType inherits all Properties of the AuditSessionEventType. The
             SourceName for Events of this type should be “Session/CreateSession”. The
             ClientUserId is not available for this call thus this parameter shall be set to
             the “System/CreateSession”.
            
             The additional Properties defined for this EventType reflect parameters of the
             Service call that triggers the Event.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditCreateSessionEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditCreateSessionEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditCreateSessionEventModel.#ctor(UnifiedAutomation.UaServer.AuditCreateSessionEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditCreateSessionEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditCreateSessionEventModel.ClientCertificate">
            <summary>
            The clientCertificate parameter of the CreateSession Service call.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditCreateSessionEventModel.ClientCertificateThumbprint">
            <summary>
            A thumbprint of the ClientCertificate.
            </summary>
            <remarks>
            See Part 6 of the OPC UA Specification for details on thumbprints.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditCreateSessionEventModel.RevisedSessionTimeout">
            <summary>
            The returned revisedSessionTimeout parameter of the CreateSession Service call.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditCreateSessionEventModel.SecureChannelId">
            <summary>
            Uniquely identifies the SecureChannel
            </summary>
            <remarks>
            The application shall use the same identifier in all AuditEvents related to the
            Session Service Set (
            <see cref="T:UnifiedAutomation.UaServer.AuditCreateSessionEventModel"/>,
            <see cref="T:UnifiedAutomation.UaServer.AuditActivateSessionEventModel"/> and
            their subtypes) and the SecureChannel Service Set (
            <see cref="T:UnifiedAutomation.UaServer.AuditChannelEventModel"/> and its
            subtypes).
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditCreateSessionEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditCreateSessionEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditUrlMismatchEventModel">
             <remarks>
             This is a subtype of
             <see cref="T:UnifiedAutomation.UaServer.AuditCreateSessionEventModel"/> and is
             used for Events generated from calling the CreateSession Service defined in
             Part 4 of the OPC UA Specification if the EndpointUrl used in the service call
             does not match the Server’s HostNames (see Part 4 of the OPC UA Specification
             for details).
            
             This EventType inherits all Properties of the
             <see cref="T:UnifiedAutomation.UaServer.AuditSessionEventModel"/>. The additional
             Properties defined for this EventType reflect parameters of the Service call
             that triggers the Event.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditUrlMismatchEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditUrlMismatchEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditUrlMismatchEventModel.#ctor(UnifiedAutomation.UaServer.AuditUrlMismatchEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditUrlMismatchEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditUrlMismatchEventModel.EndpointUrl">
            <summary>
            The endpointUrl parameter of the CreateSession Service call.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditUrlMismatchEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditUrlMismatchEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditUpdateEventModel">
             <remarks>
             This is a subtype of <see cref="T:UnifiedAutomation.UaServer.AuditEventModel"/>
             and is used for categorization of update related Events. This type follows all
             behaviours of its parent type.
            
             This EventType inherits all Properties of the
             <see cref="T:UnifiedAutomation.UaServer.AuditEventModel"/>. The SourceNode for
             Events of this type should be assigned to the NodeId that was changed. The
             SourceName for Events of this type should be “Attribute/” and the Service that
             generated the event (e.g. Write, HistoryUpdate). Note that one Service call may
             generate several Events of this type, one per changed value.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditUpdateEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditUpdateEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditUpdateEventModel.#ctor(UnifiedAutomation.UaServer.AuditUpdateEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditUpdateEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditUpdateEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditUpdateEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditHistoryUpdateEventModel">
             <remarks>
             This is a subtype of
             <see cref="T:UnifiedAutomation.UaServer.AuditUpdateEventModel"/> and is used for
             categorization of history update related Events. This type follows all
             behaviours of its parent type.
            
             This EventType inherits all Properties of the
             <see cref="T:UnifiedAutomation.UaServer.AuditUpdateEventModel"/>.
            
             Subtypes of this EventType are defined in Part 11 of the OPC UA Specification,
             representing the different possibilities to manipulate historical data.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditHistoryUpdateEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditHistoryUpdateEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditHistoryUpdateEventModel.#ctor(UnifiedAutomation.UaServer.AuditHistoryUpdateEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditHistoryUpdateEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditHistoryUpdateEventModel.ParameterDataTypeId">
            <summary>
            Identifies the DataTypeId for the extensible parameter used by the
            HistoryUpdate.
            </summary>
            <remarks>
            This parameter indicates the type of HistoryUpdate being performed.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditHistoryUpdateEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditHistoryUpdateEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditHistoryDeleteEventModel">
            <summary>
            This is a subtype of
            <see cref="T:UnifiedAutomation.UaServer.AuditHistoryUpdateEventModel"/> and is
            used for categorization of history delete related Events.
            </summary>
            <remarks>
            This type follows all behaviour of its parent type. It inherits all Properties
            of the <see cref="T:UnifiedAutomation.UaServer.AuditUpdateEventModel"/>.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditHistoryDeleteEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditHistoryDeleteEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditHistoryDeleteEventModel.#ctor(UnifiedAutomation.UaServer.AuditHistoryDeleteEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditHistoryDeleteEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditHistoryDeleteEventModel.UpdatedNode">
            <summary>
            Identifies the NodeId that was used for the delete operation.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditHistoryDeleteEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditHistoryDeleteEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditHistoryAtTimeDeleteEventModel">
            <summary>
            This is a subtype of
            <see cref="T:UnifiedAutomation.UaServer.AuditHistoryDeleteEventModel"/> and is
            used for categorization of history delete related Events.
            </summary>
            <remarks>
            This type follows all behaviour of its parent type. It inherits all Properties
            of the <see cref="T:UnifiedAutomation.UaServer.AuditHistoryDeleteEventModel"/>.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditHistoryAtTimeDeleteEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditHistoryAtTimeDeleteEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditHistoryAtTimeDeleteEventModel.#ctor(UnifiedAutomation.UaServer.AuditHistoryAtTimeDeleteEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditHistoryAtTimeDeleteEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditHistoryAtTimeDeleteEventModel.OldValues">
            <summary>
            Identifies the value that contained history before the delete.
            </summary>
            <remarks>
            A server should report all deleted values. It is acceptable for a server that
            does not have this information to report a null v alue. The OldValues will
            contain a value in the DataType and encoding used for writing the value.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditHistoryAtTimeDeleteEventModel.ReqTimes">
            <summary>
            Reflects the request time parameter of the call.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditHistoryAtTimeDeleteEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditHistoryAtTimeDeleteEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditHistoryEventDeleteEventModel">
            <summary>
            This is a subtype of
            <see cref="T:UnifiedAutomation.UaServer.AuditHistoryDeleteEventModel"/> and is
            used for categorization of history delete related Events.
            </summary>
            <remarks>
            This type follows all behaviour of its parent type. It inherits all Properties
            of the <see cref="T:UnifiedAutomation.UaServer.AuditHistoryDeleteEventModel"/>.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditHistoryEventDeleteEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditHistoryEventDeleteEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditHistoryEventDeleteEventModel.#ctor(UnifiedAutomation.UaServer.AuditHistoryEventDeleteEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditHistoryEventDeleteEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditHistoryEventDeleteEventModel.EventIds">
            <summary>
            Reflects the EventIds parameter of the call.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditHistoryEventDeleteEventModel.OldValues">
            <summary>
            Identifies the value that contained history before the delete.
            </summary>
            <remarks>
            A server should report all deleted values. It is acceptable for a server that
            does not have this information to report a null value. The OldValues will
            contain will contain an Event with the appropriate fields, each with
            appropriately encoded values.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditHistoryEventDeleteEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditHistoryEventDeleteEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditHistoryRawModifyDeleteEventModel">
            <summary>
            This is a subtype of
            <see cref="T:UnifiedAutomation.UaServer.AuditHistoryDeleteEventModel"/> and is
            used for categorization of history delete related Events.
            </summary>
            <remarks>
            This type follows all behaviour of its parent type. It inherits all Properties
            of the <see cref="T:UnifiedAutomation.UaServer.AuditHistoryDeleteEventModel"/>.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditHistoryRawModifyDeleteEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditHistoryRawModifyDeleteEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditHistoryRawModifyDeleteEventModel.#ctor(UnifiedAutomation.UaServer.AuditHistoryRawModifyDeleteEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditHistoryRawModifyDeleteEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditHistoryRawModifyDeleteEventModel.EndTime">
            <summary>
            Reflects the ending time parameter of the call.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditHistoryRawModifyDeleteEventModel.IsDeleteModified">
            <summary>
            Reflects the isDeleteModified parameter of the call.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditHistoryRawModifyDeleteEventModel.OldValues">
            <summary>
            Identifies the value that contained history before the delete.
            </summary>
            <remarks>
            A server should report all deleted values. It is acceptable for a server that
            does not have this information to report a null value. The OldValues will
            contain a value in the DataType and encoding used for writing the value.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditHistoryRawModifyDeleteEventModel.StartTime">
            <summary>
            Reflects the starting time parameter of the call.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditHistoryRawModifyDeleteEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditHistoryRawModifyDeleteEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditHistoryEventUpdateEventModel">
            <summary>
            This is a subtype of
            <see cref="T:UnifiedAutomation.UaServer.AuditHistoryUpdateEventModel"/> and is
            used for categorization of History Event update related Events.
            </summary>
            <remarks>
            This type follows all behaviour of its parent type. It inherits all Properties
            of the <see cref="T:UnifiedAutomation.UaServer.AuditHistoryUpdateEventModel"/>.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditHistoryEventUpdateEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditHistoryEventUpdateEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditHistoryEventUpdateEventModel.#ctor(UnifiedAutomation.UaServer.AuditHistoryEventUpdateEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditHistoryEventUpdateEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditHistoryEventUpdateEventModel.Filter">
            <summary>
            Reflects the Event filter passed on the call to select the Events that are to
            be updated.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditHistoryEventUpdateEventModel.NewValues">
            <summary>
            Identifies the value that was written to the Event.
            </summary>
            <remarks>
            Both the NewValue and the OldValue will contain an Event with the appropriate
            fields, each with appropriately encoded values.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditHistoryEventUpdateEventModel.OldValues">
             <summary>
             Identifies the value that the Event contained before the write.
             </summary>
             <remarks>
             It is acceptable for a server that does not have this information to report a
             null value. And in the case of an insert it is expected to be a null value.
            
             Both the NewValue and the OldValue will contain an Event with the appropriate
             fields, each with appropriately encoded values.
             </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditHistoryEventUpdateEventModel.PerformInsertReplace">
            <summary>
            This enumeration reflects the parameter on the Service call.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditHistoryEventUpdateEventModel.UpdatedNode">
            <summary>
            Identifies the Attribute that was written on the SourceNode.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditHistoryEventUpdateEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditHistoryEventUpdateEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditHistoryValueUpdateEventModel">
            <summary>
            This is a subtype of
            <see cref="T:UnifiedAutomation.UaServer.AuditHistoryUpdateEventModel"/> and is
            used for categorization of history value update related Events.
            </summary>
            <remarks>
            This type follows all behaviour of its parent type. It inherits all Properties
            of the <see cref="T:UnifiedAutomation.UaServer.AuditHistoryUpdateEventModel"/>.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditHistoryValueUpdateEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditHistoryValueUpdateEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditHistoryValueUpdateEventModel.#ctor(UnifiedAutomation.UaServer.AuditHistoryValueUpdateEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditHistoryValueUpdateEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditHistoryValueUpdateEventModel.NewValues">
            <summary>
            Identifies the value that was written to the Event.
            </summary>
            <remarks>
            Both the NewValue and the OldValue will contain a value in the DataType and
            encoding used for writing the value
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditHistoryValueUpdateEventModel.OldValues">
             <summary>
             Identifies the value that the Event contained before the write.
             </summary>
             <remarks>
             It is acceptable for a server that does not have this information to report a
             null value. And in the case of an insert it is expected to be a null value.
            
             Both the NewValue and the OldValue will contain a value in the DataType and
             encoding used for writing the value.
             </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditHistoryValueUpdateEventModel.PerformInsertReplace">
            <summary>
            This enumeration reflects the parameter on the Service call.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditHistoryValueUpdateEventModel.UpdatedNode">
            <summary>
            Identifies the Attribute that was written on the SourceNode.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditHistoryValueUpdateEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditHistoryValueUpdateEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditWriteUpdateEventModel">
             <remarks>
             This is a subtype of
             <see cref="T:UnifiedAutomation.UaServer.AuditUpdateEventModel"/> and is used for
             categorization of write update related Events. This type follows all behaviours
             of its parent type.
            
             This EventType inherits all Properties of the AuditUpdateEventType. The
             SourceName for Events of this type should be “Attribute/Write”.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditWriteUpdateEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditWriteUpdateEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditWriteUpdateEventModel.#ctor(UnifiedAutomation.UaServer.AuditWriteUpdateEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditWriteUpdateEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditWriteUpdateEventModel.AttributeId">
            <summary>
            Identifies the Attribute that was written on the SourceNode.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditWriteUpdateEventModel.IndexRange">
            <summary>
            Identifies the index range of the written Attribute if the Attribute is an
            array.
            </summary>
            <remarks>
            If the Attribute is not an array or the whole array was written, the IndexRange
            is set to null.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditWriteUpdateEventModel.NewValue">
             <summary>
             Identifies the value that was written to the SourceNode.
             </summary>
             <remarks>
             If the IndexRange is provided, only the values in the provided range are shown.
            
             Both the NewValue and the OldValue will contain a value in the DataType and
             encoding used for writing the value.
             </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditWriteUpdateEventModel.OldValue">
             <summary>
             Identifies the value that the SourceNode contained before the write.
             </summary>
             <remarks>
             If the IndexRange is provided, only the value of that range is shown. It is
             acceptable for a Server that does not have this information to report a null
             value.
            
             Both the NewValue and the OldValue will contain a value in the DataType and
             encoding used for writing the value.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditWriteUpdateEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditWriteUpdateEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditUpdateMethodEventModel">
             <remarks>
             This is a subtype of <see cref="T:UnifiedAutomation.UaServer.AuditEventModel"/>
             and is used for categorization of Method related Events. This type follows all
             behaviours of its parent type.
            
             This EventType inherits all Properties of the
             <see cref="T:UnifiedAutomation.UaServer.AuditEventModel"/>. The SourceNode for
             Events of this type should be assigned to the NodeId of the object that the
             method resides on. The SourceName for Events of this type should be
             “Attribute/Call”. Note that one Service call may generate several Events of
             this type, one per method called. This EventType should be further subtyped to
             better reflect the functionality of the method and to reflect changes to the
             address space or updated values triggered by the method.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditUpdateMethodEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditUpdateMethodEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditUpdateMethodEventModel.#ctor(UnifiedAutomation.UaServer.AuditUpdateMethodEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditUpdateMethodEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditUpdateMethodEventModel.InputArguments">
            <summary>
            Identifies the input Arguments for the method.
            </summary>
            <remarks>
            This parameter can be null if no input arguments where provided.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditUpdateMethodEventModel.MethodId">
            <summary>
            Identifies the method that was called.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditUpdateMethodEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditUpdateMethodEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditConditionEventModel">
             <summary>
             This EventType is used to subsume all Audit Condition EventTypes.
             </summary>
             <remarks>
             Audit Condition EventTypes inherit all Properties of the
             <see cref="T:UnifiedAutomation.UaServer.AuditUpdateMethodEventModel"/>. Unless a
             subtype overrides the definition, the inherited properties of the Condition
             will be used as defined.
            
             - The inherited Property SourceNode shall be filled with the ConditionId.
             - The SourceName shall be “Method/” and the name of the Service that generated
               the Event (e.g. Disable, Enable, Acknowledge, etc).
            
             This Event Type can be further customized to reflect particular Condition
             related actions.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditConditionEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditConditionEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditConditionEventModel.#ctor(UnifiedAutomation.UaServer.AuditConditionEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditConditionEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditConditionEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditConditionEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditConditionAcknowledgeEventModel">
            <summary>
            This EventType is used to indicate acknowledgement or confirmation of one or
            more Conditions.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditConditionAcknowledgeEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditConditionAcknowledgeEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditConditionAcknowledgeEventModel.#ctor(UnifiedAutomation.UaServer.AuditConditionAcknowledgeEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditConditionAcknowledgeEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditConditionAcknowledgeEventModel.Comment">
            <summary>
            Contains the actual comment that was added, it may be a blank comment or a
            null.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditConditionAcknowledgeEventModel.ConditionEventId">
            <summary>
            This event field shall contain the id of the Event that was acknowledged.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditConditionAcknowledgeEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditConditionAcknowledgeEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditConditionCommentEventModel">
            <summary>
            This EventType is used to report an AddComment action.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditConditionCommentEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditConditionCommentEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditConditionCommentEventModel.#ctor(UnifiedAutomation.UaServer.AuditConditionCommentEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditConditionCommentEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditConditionCommentEventModel.Comment">
            <summary>
            Contains the actual comment that was added.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditConditionCommentEventModel.ConditionEventId">
            <summary>
            This field shall contain the id of the event for which the comment was added.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditConditionCommentEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditConditionCommentEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditConditionConfirmEventModel">
            <summary>
            This EventType is used to report a Confirm action.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditConditionConfirmEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditConditionConfirmEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditConditionConfirmEventModel.#ctor(UnifiedAutomation.UaServer.AuditConditionConfirmEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditConditionConfirmEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditConditionConfirmEventModel.Comment">
            <summary>
            Contains the actual comment that was added, it may be a blank comment or a
            null.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditConditionConfirmEventModel.ConditionEventId">
            <summary>
            This event field shall contain the id of the Event that was confirmed.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditConditionConfirmEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditConditionConfirmEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditConditionEnableEventModel">
            <summary>
            This EventType is used to indicate a change in the enabled state of a Condition
            instance.
            </summary>
            <remarks>
            The SourceName shall indicate Method/Enable or Method/Disable. If the audit
            Event is not the result of a method call, but due to an internal action of the
            Server, the SourceName shall reflect Enable or Disable, it may be preceded by
            an appropriate description such as “Internal/Enable” or “Remote/Enable”.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditConditionEnableEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditConditionEnableEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditConditionEnableEventModel.#ctor(UnifiedAutomation.UaServer.AuditConditionEnableEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditConditionEnableEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditConditionEnableEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditConditionEnableEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditConditionOutOfServiceEventModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditConditionOutOfServiceEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditConditionOutOfServiceEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditConditionOutOfServiceEventModel.#ctor(UnifiedAutomation.UaServer.AuditConditionOutOfServiceEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditConditionOutOfServiceEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditConditionOutOfServiceEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditConditionOutOfServiceEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditConditionResetEventModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditConditionResetEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditConditionResetEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditConditionResetEventModel.#ctor(UnifiedAutomation.UaServer.AuditConditionResetEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditConditionResetEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditConditionResetEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditConditionResetEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditConditionRespondEventModel">
            <summary>
            This EventType is used to report a Respond action.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditConditionRespondEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditConditionRespondEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditConditionRespondEventModel.#ctor(UnifiedAutomation.UaServer.AuditConditionRespondEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditConditionRespondEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditConditionRespondEventModel.SelectedResponse">
            <summary>
            This event field shall contain the response that was selected.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditConditionRespondEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditConditionRespondEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditConditionShelvingEventModel">
            <summary>
            This EventType is used to indicate a change to the Shelving state of a
            Condition instance.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditConditionShelvingEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditConditionShelvingEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditConditionShelvingEventModel.#ctor(UnifiedAutomation.UaServer.AuditConditionShelvingEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditConditionShelvingEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditConditionShelvingEventModel.ShelvingTime">
            <summary>
            If the method indicates a TimedShelve operation, this field shall contain the
            duration for which the Alarm is to be shelved.
            </summary>
            <remarks>
            For other Shelving methods, this parameter may be omitted or null.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditConditionShelvingEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditConditionShelvingEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditConditionSilenceEventModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditConditionSilenceEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditConditionSilenceEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditConditionSilenceEventModel.#ctor(UnifiedAutomation.UaServer.AuditConditionSilenceEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditConditionSilenceEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditConditionSilenceEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditConditionSilenceEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditConditionSuppressEventModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditConditionSuppressEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditConditionSuppressEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditConditionSuppressEventModel.#ctor(UnifiedAutomation.UaServer.AuditConditionSuppressEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditConditionSuppressEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditConditionSuppressEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditConditionSuppressEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditUpdateStateEventModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditUpdateStateEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditUpdateStateEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditUpdateStateEventModel.#ctor(UnifiedAutomation.UaServer.AuditUpdateStateEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditUpdateStateEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditUpdateStateEventModel.NewStateId">
            <summary>
            Gets or sets the NewStateId
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditUpdateStateEventModel.OldStateId">
            <summary>
            Gets or sets the OldStateId
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditUpdateStateEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditUpdateStateEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditProgramTransitionEventModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditProgramTransitionEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditProgramTransitionEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditProgramTransitionEventModel.#ctor(UnifiedAutomation.UaServer.AuditProgramTransitionEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AuditProgramTransitionEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AuditProgramTransitionEventModel.TransitionNumber">
            <summary>
            Gets or sets the TransitionNumber
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AuditProgramTransitionEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AuditProgramTransitionEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ProgramTransitionAuditEventModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ProgramTransitionAuditEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ProgramTransitionAuditEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ProgramTransitionAuditEventModel.#ctor(UnifiedAutomation.UaServer.ProgramTransitionAuditEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ProgramTransitionAuditEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ProgramTransitionAuditEventModel.Transition">
            <summary>
            Gets or sets the Transition
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ProgramTransitionAuditEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ProgramTransitionAuditEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.CertificateUpdatedAuditEventModel">
             <summary>
             This event is raised when the application certificate is changed.
             </summary>
             <remarks>
             This is the result of a
             <see cref="M:UnifiedAutomation.UaServer.IServerConfigurationMethods.UpdateCertificate(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.ServerConfigurationModel,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,System.Byte[],System.Byte[][],System.String,System.Byte[],System.Boolean@)"/>
             method completing successfully or failing.
            
             This EventType inherits all properties of the
             <see cref="T:UnifiedAutomation.UaServer.AuditUpdateMethodEventModel"/>.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.CertificateUpdatedAuditEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.CertificateUpdatedAuditEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.CertificateUpdatedAuditEventModel.#ctor(UnifiedAutomation.UaServer.CertificateUpdatedAuditEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.CertificateUpdatedAuditEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CertificateUpdatedAuditEventModel.CertificateGroup">
            <summary>
            Specifies the certificate group that was affected by the update.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CertificateUpdatedAuditEventModel.CertificateType">
            <summary>
            Specifies the type of Certificate that was updated.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.CertificateUpdatedAuditEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.CertificateUpdatedAuditEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.KeyCredentialAuditEventModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.KeyCredentialAuditEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.KeyCredentialAuditEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.KeyCredentialAuditEventModel.#ctor(UnifiedAutomation.UaServer.KeyCredentialAuditEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.KeyCredentialAuditEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.KeyCredentialAuditEventModel.ResourceUri">
            <summary>
            Gets or sets the ResourceUri
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.KeyCredentialAuditEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.KeyCredentialAuditEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.KeyCredentialDeletedAuditEventModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.KeyCredentialDeletedAuditEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.KeyCredentialDeletedAuditEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.KeyCredentialDeletedAuditEventModel.#ctor(UnifiedAutomation.UaServer.KeyCredentialDeletedAuditEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.KeyCredentialDeletedAuditEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.KeyCredentialDeletedAuditEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.KeyCredentialDeletedAuditEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.KeyCredentialUpdatedAuditEventModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.KeyCredentialUpdatedAuditEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.KeyCredentialUpdatedAuditEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.KeyCredentialUpdatedAuditEventModel.#ctor(UnifiedAutomation.UaServer.KeyCredentialUpdatedAuditEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.KeyCredentialUpdatedAuditEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.KeyCredentialUpdatedAuditEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.KeyCredentialUpdatedAuditEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.RoleMappingRuleChangedAuditEventModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RoleMappingRuleChangedAuditEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.RoleMappingRuleChangedAuditEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RoleMappingRuleChangedAuditEventModel.#ctor(UnifiedAutomation.UaServer.RoleMappingRuleChangedAuditEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.RoleMappingRuleChangedAuditEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RoleMappingRuleChangedAuditEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.RoleMappingRuleChangedAuditEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.TrustListUpdatedAuditEventModel">
             <summary>
             This event is raised when a trust list is changed.
             </summary>
             <remarks>
             This is the result of a
             <see cref="M:UnifiedAutomation.UaServer.ITrustListMethods.CloseAndUpdate(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.TrustListModel,System.UInt32,System.Boolean@)"/>
             method on a TrustListType object being called. It shall also be raised when the
             <see cref="M:UnifiedAutomation.UaServer.ITrustListMethods.AddCertificate(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.TrustListModel,System.Byte[],System.Boolean)"/> or
             <see cref="M:UnifiedAutomation.UaServer.ITrustListMethods.RemoveCertificate(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.TrustListModel,System.String,System.Boolean)"/>
             method causes an update to the trust list.
            
             This EventType inherits all Properties of the
             <see cref="T:UnifiedAutomation.UaServer.AuditUpdateMethodEventModel"/>.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TrustListUpdatedAuditEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.TrustListUpdatedAuditEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TrustListUpdatedAuditEventModel.#ctor(UnifiedAutomation.UaServer.TrustListUpdatedAuditEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.TrustListUpdatedAuditEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TrustListUpdatedAuditEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.TrustListUpdatedAuditEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.BaseModelChangeEventModel">
             <summary>
             BaseType for ModelChangeEvents.
             </summary>
             <remarks>
             This Event does not contain information about the changes but only indicates
             that changes occurred. Therefore the Client shall assume that any or all of the
             Nodes may have changed.
            
             This EventType inherits all Properties of the BaseEventType. There are no
             additional Properties defined for this EventType. The SourceNode for Events of
             this type should be the Node of the View that gives the context of the changes.
             If the whole AddressSpace is the context, the SourceNode is set to the NodeId
             of the Server object. The SourceName for Events of this type should be the
             String part of the BrowseName of the View; for the whole AddressSpace it should
             be “Server”.
            
             Two types of ModelChangeEvents are defined: the BaseModelChangeEvent that does
             not contain any information about the changes and the GeneralModelChangeEvent
             that identifies the changed Nodes via an array. The precision used depends on
             both the capability of the OPC UA Server and the nature of the update. An OPC
             UA Server may use either ModelChangeEvent type depending on circumstances. It
             may also define subtypes of these EventTypes adding additional information. To
             ensure interoperability, one should follow the guidelines for Events listed
             below.
            
             - If the array of the GeneralModelChangeEvent is present, then it should
               identify every Node that has changed since the preceding ModelChangeEvent.
             - The OPC UA Server should emit exactly one ModelChangeEvent for an update or
               series of updates. It should not issue multiple types of ModelChangeEvent for
               the same update.
             - Any Client that responds to ModelChangeEvents should respond to any Event of
               the <see cref="T:UnifiedAutomation.UaServer.BaseModelChangeEventModel"/>
               including its subtypes like the
               <see cref="T:UnifiedAutomation.UaServer.GeneralModelChangeEventModel"/>.
            
             If a Client is not capable of interpreting additional information of the
             subtypes of the
             <see cref="T:UnifiedAutomation.UaServer.BaseModelChangeEventModel"/>, it should
             treat Events of these types the same way as Events of the
             <see cref="T:UnifiedAutomation.UaServer.BaseModelChangeEventModel"/>.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseModelChangeEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.BaseModelChangeEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseModelChangeEventModel.#ctor(UnifiedAutomation.UaServer.BaseModelChangeEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.BaseModelChangeEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseModelChangeEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.BaseModelChangeEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.GeneralModelChangeEventModel">
             <summary>
             Contains information about the Node that was changed and the action that
             occurred to cause the ModelChangeEvent (e.g. add a Node, delete a Node, etc.).
             </summary>
             <remarks>
             If the affected Node is a Variable or object, then the TypeDefinitionNode is
             also present.
            
             To allow Event compression, a GeneralModelChangeEvent contains an array of
             changes.
            
             This EventType inherits all Properties of the BaseModelChangeEventType.
            
             Two types of ModelChangeEvents are defined: the BaseModelChangeEvent that does
             not contain any information about the changes and the GeneralModelChangeEvent
             that identifies the changed Nodes via an array. The precision used depends on
             both the capability of the OPC UA Server and the nature of the update. An OPC
             UA Server may use either ModelChangeEvent type depending on circumstances. It
             may also define subtypes of these EventTypes adding additional information. To
             ensure interoperability, one should follow the guidelines for Events listed
             below.
            
             - If the array of the GeneralModelChangeEvent is present, then it should
               identify every Node that has changed since the preceding ModelChangeEvent.
             - The OPC UA Server should emit exactly one ModelChangeEvent for an update or
               series of updates. It should not issue multiple types of ModelChangeEvent for
               the same update.
             - Any Client that responds to ModelChangeEvents should respond to any Event of
               the <see cref="T:UnifiedAutomation.UaServer.BaseModelChangeEventModel"/>
               including its subtypes like the
               <see cref="T:UnifiedAutomation.UaServer.GeneralModelChangeEventModel"/>.
            
             If a Client is not capable of interpreting additional information of the
             subtypes of the
             <see cref="T:UnifiedAutomation.UaServer.BaseModelChangeEventModel"/>, it should
             treat Events of these types the same way as Events of the
             <see cref="T:UnifiedAutomation.UaServer.BaseModelChangeEventModel"/>.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.GeneralModelChangeEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.GeneralModelChangeEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.GeneralModelChangeEventModel.#ctor(UnifiedAutomation.UaServer.GeneralModelChangeEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.GeneralModelChangeEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.GeneralModelChangeEventModel.Changes">
            <summary>
            Reflects the changes that issued the ModelChangeEvent.
            </summary>
            <remarks>
            It shall contain at least one entry in its array.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.GeneralModelChangeEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.GeneralModelChangeEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.SemanticChangeEventModel">
             <summary>
             Event that indicates a change of the AddressSpace semantics.
             </summary>
             <remarks>
             The change consists of a change to the Value Attribute of a Property.
            
             The SemanticChangeEvent contains information about the Node owning the Property
             that was changed. If this is a Variable or object, the TypeDefinitionNode is
             also present.
            
             The SemanticChange bit of the AccessLevel Attribute of a Property indicates
             whether changes of the Property value are considered for SemanticChangeEvents
            
             The ViewVersion and NodeVersion Properties do not change due to the publication
             of a SemanticChangeEvent. There is no standard way to identify which Nodes
             trigger a SemanticChangeEvent and which Nodes do not.
            
             SemanticChangeEvents are handled in the context of a View the same way as
             ModelChangeEvents.
            
             SemanticChangeEvents can be compressed the same way as ModelChangeEvents.
            
             This EventType inherits all Properties of the BaseEventType. There are no
             additional Properties defined for this EventType. The SourceNode for Events of
             this type should be the Node of the View that gives the context of the changes.
             If the whole AddressSpace is the context, the SourceNode is set to the NodeId
             of the Server object. The SourceName for Events of this type should be the
             String part of the BrowseName of the View, for the whole AddressSpace it should
             be “Server”.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SemanticChangeEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.SemanticChangeEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SemanticChangeEventModel.#ctor(UnifiedAutomation.UaServer.SemanticChangeEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.SemanticChangeEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SemanticChangeEventModel.Changes">
            <summary>
            Reflects the changes that issued the SemanticChangeEvent.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SemanticChangeEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.SemanticChangeEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.IConditionMethods">
            <summary>
            The interface for methods implemented on the ConditionModel object.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IConditionMethods.AddComment(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.ConditionModel,System.Byte[],UnifiedAutomation.UaBase.LocalizedText)">
             <summary>
             Applies a comment to a specific state of a Condition instance.
             </summary>
             <remarks>
             Normally, the NodeId of the object instance as the ObjectId is passed to the
             Call Service. However, some Servers do not expose Condition instances in the
             AddressSpace. Therefore all Servers shall also allow Clients to call the
             AddComment method by specifying ConditionId as the ObjectId. The method cannot
             be called with an ObjectId of the ConditionType Node.
            
             <b>Method Result Codes</b>
            
             ResultCode         | Description
             -------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
             Bad_MethodInvalid  | The method id does not refer to a method for the specified object. The MethodId provided does not correspond to the ObjectId provided.
             Bad_EventIdUnknown | The specified EventId is not known to the Server.
             Bad_NodeIdUnknown  | The node id refers to a node that does not exist in the server address space. Used to indicate that the specified Object is not valid or that the method was called on the ConditionType Node.
             </remarks>
             <param name="context"></param>
             <param name="model"></param>
             <param name="EventId">The identifier for the event to comment.</param>
             <param name="Comment">The comment to add to the condition.</param>
             <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IConditionMethods.Disable(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.ConditionModel)">
             <summary>
             Changes a Condition instance to the Disabled state.
             </summary>
             <remarks>
             Normally, the NodeId of the object instance as the ObjectId is passed to the
             Call Service. However, some Servers do not expose Condition instances in the
             AddressSpace. Therefore all Servers shall allow Clients to call the Disable
             method by specifying ConditionId as the ObjectId. The method cannot be called
             with an ObjectId of the ConditionType node.
            
             <b>Method Result Codes</b>
            
             ResultCode                   | Description
             -----------------------------|----------------------------------------------
             Bad_ConditionAlreadyDisabled | The addressed Condition is already disabled.
             </remarks>
             <param name="context"></param>
             <param name="model"></param>
             <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IConditionMethods.Enable(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.ConditionModel)">
             <summary>
             Changes a Condition instance to the enabled state.
             </summary>
             <remarks>
             Normally, the NodeId of the object instance as the ObjectId is passed to the
             Call Service. However, some Servers do not expose Condition instances in the
             AddressSpace. Therefore all Servers shall allow Clients to call the Enable
             method by specifying ConditionId as the ObjectId. The method cannot be called
             with an ObjectId of the ConditionType Node. If the condition instance is not
             exposed, it may be difficult for a Client to determine the ConditionId for a
             disabled condition.
            
             <b>Method Result Codes</b>
            
             ResultCode                  | Description
             ----------------------------|---------------------------------------------
             Bad_ConditionAlreadyEnabled | The addressed Condition is already enabled.
             </remarks>
             <param name="context"></param>
             <param name="model"></param>
             <returns></returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.IAcknowledgeableConditionMethods">
            <summary>
            The interface for methods implemented on the AcknowledgeableConditionModel object.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IAcknowledgeableConditionMethods.Acknowledge(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.AcknowledgeableConditionModel,System.Byte[],UnifiedAutomation.UaBase.LocalizedText)">
             <summary>
             Acknowledges an Event Notification for a Condition instance state where
             AckedState is FALSE.
             </summary>
             <remarks>
             Normally, the NodeId of the object instance as the ObjectId is passed to the
             Call Service. However, some Servers do not expose Condition instances in the
             AddressSpace. Therefore all Servers shall also allow Clients to call the
             Acknowledge method by specifying ConditionId. The method cannot be called with
             an ObjectId of the AcknowledgeableConditionType Node.
            
             ResultCode                      | Description
             --------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
             Bad_ConditionBranchAlreadyAcked | The EventId does not refer to a state that needs acknowledgement.
             Bad_MethodInvalid               | The method id does not refer to a method for the specified object or ConditionId.
             Bad_EventIdUnknown              | The specified EventId is not known to the Server.
             Bad_NodeIdInvalid               | The node id refers to a node that does not exist in the server address space. Used to indicate that the specified ObjectId is not valid or that the method was called on the ConditionType Node.
             </remarks>
             <param name="context"></param>
             <param name="model"></param>
             <param name="EventId">
             EventId identifying a particular Event Notification.
             Only Event Notifications where AckedState/Id was FALSE can be acknowledged.
             </param>
             <param name="Comment">
             A localized text to be applied to the Condition.
             </param>
             <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IAcknowledgeableConditionMethods.Confirm(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.AcknowledgeableConditionModel,System.Byte[],UnifiedAutomation.UaBase.LocalizedText)">
             <summary>
             Confirms an Event Notification for a Condition instance state where
             ConfirmedState was set to FALSE.
             </summary>
             <remarks>
             Normally, the NodeId of the object instance as the ObjectId is passed to the
             Call Service. However, some Servers do not expose Condition instances in the
             AddressSpace. Therefore all Servers shall also allow Clients to call the
             Confirm method by specifying ConditionId as the ObjectId. The method cannot be
             called with an ObjectIf of the AcknowledgeableConditionType Node.
            
             \todo Add Comments from spec?
            
             <b>Method Result Codes</b>
            
             ResultCode                          | Description
             ------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
             Bad_ConditionBranchAlreadyConfirmed | The EventId does not refer to a state that needs confirmation.
             Bad_MethodInvalid                   | The method id does not refer to a method for the specified object or ConditionId.
             Bad_EventIdUnknown                  | The specified EventId is not known to the Server.
             Bad_NodeIdUnknown                   | The node id refers to a node that does not exist in the server address space. Used to indicate that the specified ObjectId is not valid or that the method was called on the ConditionType Node.
             </remarks>
             <param name="context"></param>
             <param name="model"></param>
             <param name="EventId">
             EventId identifying a particular Event Notification.
             Only Event Notifications where ConfirmedState/Id was TRUE can be confirmed.
             </param>
             <param name="Comment">
             A localized text to be applied to the Conditions.
             </param>
             <returns></returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.IAlarmConditionMethods">
            <summary>
            The interface for methods implemented on the AlarmConditionModel object.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IAlarmConditionMethods.PlaceInService(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.AlarmConditionModel)">
            <summary>
            </summary>
            <param name="context"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IAlarmConditionMethods.RemoveFromService(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.AlarmConditionModel)">
            <summary>
            </summary>
            <param name="context"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IAlarmConditionMethods.Reset(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.AlarmConditionModel)">
            <summary>
            </summary>
            <param name="context"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IAlarmConditionMethods.Silence(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.AlarmConditionModel)">
            <summary>
            </summary>
            <param name="context"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IAlarmConditionMethods.Suppress(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.AlarmConditionModel)">
            <summary>
            </summary>
            <param name="context"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IAlarmConditionMethods.Unsuppress(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.AlarmConditionModel)">
            <summary>
            </summary>
            <param name="context"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.DiscrepancyAlarmModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DiscrepancyAlarmModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.DiscrepancyAlarmModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DiscrepancyAlarmModel.#ctor(UnifiedAutomation.UaServer.DiscrepancyAlarmModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.DiscrepancyAlarmModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DiscrepancyAlarmModel.ExpectedTime">
            <summary>
            Gets or sets the ExpectedTime
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DiscrepancyAlarmModel.TargetValueNode">
            <summary>
            Gets or sets the TargetValueNode
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DiscrepancyAlarmModel.Tolerance">
            <summary>
            Gets or sets the Tolerance
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DiscrepancyAlarmModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.DiscrepancyAlarmModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.DiscreteAlarmModel">
            <summary>
            Used to classify Types into Alarm Conditions where the input for the Alarm may
            take on only a certain number of possible values (e.g. true/false,
            running/stopped/terminating).
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DiscreteAlarmModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.DiscreteAlarmModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DiscreteAlarmModel.#ctor(UnifiedAutomation.UaServer.DiscreteAlarmModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.DiscreteAlarmModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DiscreteAlarmModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.DiscreteAlarmModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.OffNormalAlarmModel">
            <summary>
            A specialization of the DiscreteAlarmType intended to represent a discrete
            Condition that is considered to be not normal.
            </summary>
            <remarks>
            This subtype is usually used to indicate that a discrete value is in an Alarm
            state, it is active as long as a non-normal value is present.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.OffNormalAlarmModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.OffNormalAlarmModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.OffNormalAlarmModel.#ctor(UnifiedAutomation.UaServer.OffNormalAlarmModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.OffNormalAlarmModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.OffNormalAlarmModel.NormalState">
            <remarks>
            The NormalState Property is a Property that points to a Variable which has a
            value that corresponds to one of the possible values of the Variable pointed to
            by the InputNode Property where the NormalState Property Variable value is the
            value that is considered to be the normal state of the Variable pointed to by
            the InputNode Property. When the value of the Variable referenced by the
            InputNode Property is not equal to the value of the NormalState Property the
            Alarm is Active. If this Variable is not in the AddressSpace, a Null NodeId
            shall be provided.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.OffNormalAlarmModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.OffNormalAlarmModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.InstrumentDiagnosticAlarmModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.InstrumentDiagnosticAlarmModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.InstrumentDiagnosticAlarmModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.InstrumentDiagnosticAlarmModel.#ctor(UnifiedAutomation.UaServer.InstrumentDiagnosticAlarmModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.InstrumentDiagnosticAlarmModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.InstrumentDiagnosticAlarmModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.InstrumentDiagnosticAlarmModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.SystemDiagnosticAlarmModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SystemDiagnosticAlarmModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.SystemDiagnosticAlarmModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SystemDiagnosticAlarmModel.#ctor(UnifiedAutomation.UaServer.SystemDiagnosticAlarmModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.SystemDiagnosticAlarmModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SystemDiagnosticAlarmModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.SystemDiagnosticAlarmModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.SystemOffNormalAlarmModel">
            <summary>
            Used by a Server to indicate that an underlying system that is providing Alarm
            information is having a communication problem and that the Server may have
            invalid or incomplete Condition state in the Subscription.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SystemOffNormalAlarmModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.SystemOffNormalAlarmModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SystemOffNormalAlarmModel.#ctor(UnifiedAutomation.UaServer.SystemOffNormalAlarmModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.SystemOffNormalAlarmModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SystemOffNormalAlarmModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.SystemOffNormalAlarmModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.CertificateExpirationAlarmModel">
            <summary>
            A SystemOffNormalAlarmType raised by the Server when the Server’s certificate
            is within the ExpirationLimit of expiration.
            </summary>
            <remarks>
            This alarm automatically returns to normal when the certificate is updated.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.CertificateExpirationAlarmModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.CertificateExpirationAlarmModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.CertificateExpirationAlarmModel.#ctor(UnifiedAutomation.UaServer.CertificateExpirationAlarmModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.CertificateExpirationAlarmModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CertificateExpirationAlarmModel.Certificate">
            <summary>
            The certificate that is about to expire.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CertificateExpirationAlarmModel.CertificateType">
            <summary>
            Describes the purpose of a certificate.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CertificateExpirationAlarmModel.ExpirationDate">
            <summary>
            The date and time this certificate will expire.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CertificateExpirationAlarmModel.ExpirationLimit">
            <summary>
            Gets or sets the ExpirationLimit
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.CertificateExpirationAlarmModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.CertificateExpirationAlarmModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.TripAlarmModel">
            <summary>
            A specialization of the OffNormalAlarmType intended to represent an equipment
            trip Condition
            </summary>
            <remarks>
            The Alarm becomes active when the monitored piece of equipment experiences some
            abnormal fault such as a motor shutting down due to an overload Condition. This
            Type is mainly used for categorization.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TripAlarmModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.TripAlarmModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TripAlarmModel.#ctor(UnifiedAutomation.UaServer.TripAlarmModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.TripAlarmModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TripAlarmModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.TripAlarmModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.LimitAlarmModel">
             <summary>
             An abstract type used to provide a base Type for AlarmConditions with multiple
             limits
             </summary>
             <remarks>
             Alarms can be modelled with multiple exclusive substates and assigned limits or
             they may be modelled with non exclusive limits that can be used to group
             multiple states together.
            
             Four optional limits are defined that configure the states of the derived limit
             Alarm Types: HighHighLimit, HighLimit, LowLimit, and LowLowLimit. These
             Properties shall be set for any Alarm limits that are exposed by the derived
             limit Alarm Types. These Properties are listed as optional but at least one is
             required. For cases where an underlying system cannot provide the actual value
             of a limit, the limit Property shall still be provided, but will have its
             AccessLevel set to not readable. It is assumed that the limits are described
             using the same Engineering Unit that is assigned to the variable that is the
             source of the alarm. For Rate of change limit alarms, it is assumed this rate
             is units per second unless otherwise specified.
            
             The Alarm limits listed may cause an Alarm to be generated when a value equals
             the limit or it may generate the Alarm when the limit is exceeded, (i.e. the
             Value is above the limit for HighLimit and below the limit for LowLimit). The
             exact behaviour when the value is equal to the limit is Server specific.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.LimitAlarmModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.LimitAlarmModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.LimitAlarmModel.#ctor(UnifiedAutomation.UaServer.LimitAlarmModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.LimitAlarmModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.LimitAlarmModel.BaseHighHighLimit">
            <summary>
            Gets or sets the BaseHighHighLimit
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.LimitAlarmModel.BaseHighLimit">
            <summary>
            Gets or sets the BaseHighLimit
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.LimitAlarmModel.BaseLowLimit">
            <summary>
            Gets or sets the BaseLowLimit
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.LimitAlarmModel.BaseLowLowLimit">
            <summary>
            Gets or sets the BaseLowLowLimit
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.LimitAlarmModel.HighHighLimit">
            <summary>
            Gets or sets the HighHighLimit
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.LimitAlarmModel.HighLimit">
            <summary>
            Gets or sets the HighLimit
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.LimitAlarmModel.LowLimit">
            <summary>
            Gets or sets the LowLimit
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.LimitAlarmModel.LowLowLimit">
            <summary>
            Gets or sets the LowLowLimit
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.LimitAlarmModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.LimitAlarmModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ExclusiveDeviationAlarmModel">
             <summary>
             A special deviation alarm utilized with multiple mutually exclusive limits.
             </summary>
             <remarks>
             A deviation Alarm is commonly used to report an excess deviation between a
             desired set point level of a process value and an actual measurement of that
             value. The deviation Alarm becomes active when the deviation exceeds or drops
             below a defined limit.
            
             For example if a set point had a value of 10 and the high deviation Alarm limit
             were set for 2 and the low deviation Alarm limit had a value of -1 then the low
             sub state is entered if the process value dropped to below 9; the high sub
             state is entered if the process value became larger than 12. If the set point
             were changed to 11 then the new deviation values would be 10 and 13
             respectively.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ExclusiveDeviationAlarmModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ExclusiveDeviationAlarmModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ExclusiveDeviationAlarmModel.#ctor(UnifiedAutomation.UaServer.ExclusiveDeviationAlarmModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ExclusiveDeviationAlarmModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ExclusiveDeviationAlarmModel.BaseSetpointNode">
            <summary>
            Gets or sets the BaseSetpointNode
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ExclusiveDeviationAlarmModel.SetpointNode">
            <summary>
            Provides the NodeId of the set point used in the deviation calculation.
            </summary>
            <remarks>
            If this Variable is not in the AddressSpace, a Null NodeId shall be provided.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ExclusiveDeviationAlarmModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ExclusiveDeviationAlarmModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ExclusiveLevelAlarmModel">
            <summary>
            The ExclusiveLevelAlarmType is a special level Alarm utilized with multiple
            mutually exclusive limits.
            </summary>
            <remarks>
            A level Alarm is commonly used to report when a limit is exceeded. It typically
            relates to an instrument – e.g. a temperature meter. The level Alarm becomes
            active when the observed value is above a high limit or below a low limit.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ExclusiveLevelAlarmModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ExclusiveLevelAlarmModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ExclusiveLevelAlarmModel.#ctor(UnifiedAutomation.UaServer.ExclusiveLevelAlarmModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ExclusiveLevelAlarmModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ExclusiveLevelAlarmModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ExclusiveLevelAlarmModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ExclusiveRateOfChangeAlarmModel">
             <summary>
             A Rate of Change Alarm utilized with multiple mutually exclusive limits.
             </summary>
             <remarks>
             A Rate of Change Alarm is commonly used to report an unusual change or lack of
             change in a measured value related to the speed at which the value has changed.
             The Rate of Change Alarm becomes active when the rate at which the value
             changes exceeds or drops below a defined limit.
            
             A Rate of Change is measured in some time unit, such as seconds or minutes and
             some unit of measure such as percent or meter. For example, a tank may have a
             High limit for the Rate of Change of its level (measured in meters) which would
             be 4 meters per minute. If the tank level changes at a rate that is greater
             than 4 meters per minute then the High sub state is entered.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ExclusiveRateOfChangeAlarmModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ExclusiveRateOfChangeAlarmModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ExclusiveRateOfChangeAlarmModel.#ctor(UnifiedAutomation.UaServer.ExclusiveRateOfChangeAlarmModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ExclusiveRateOfChangeAlarmModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ExclusiveRateOfChangeAlarmModel.EngineeringUnits">
            <summary>
            Gets or sets the EngineeringUnits
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ExclusiveRateOfChangeAlarmModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ExclusiveRateOfChangeAlarmModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.NonExclusiveLimitAlarmModel">
             <summary>
             Used to specify the common behaviour for Alarm Types with multiple
             non-exclusive limits
             </summary>
             <remarks>
             HighHighState, HighState, LowState, and LowLowState represent the non-exclusive
             states. As an example, it is possible that both HighState and HighHighState are
             in their TRUE state. Vendors may choose to support any subset of these states.
            
             Four optional limits are defined that configure these states. At least the
             HighState or the LowState shall be provided even though all states are
             optional. It is implied by the definition of a HighState and a LowState, that
             these groupings are mutually exclusive. A value cannot exceed both a HighState
             value and a LowState value simultaneously.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.NonExclusiveLimitAlarmModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.NonExclusiveLimitAlarmModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.NonExclusiveLimitAlarmModel.#ctor(UnifiedAutomation.UaServer.NonExclusiveLimitAlarmModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.NonExclusiveLimitAlarmModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.NonExclusiveLimitAlarmModel.ActiveState">
            <summary>
            Gets or sets the ActiveState
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.NonExclusiveLimitAlarmModel.HighHighState">
             <summary>
             Represents one of the four non-exclusive states.
             </summary>
             <remarks>
             Recommended state names for LocaleIds are listed in the following table.
            
             LocaleId | FALSE State Name    | TRUE State Name
             ---------|---------------------|-------------------
             en       | HighHigh inactive   | HighHigh active
             de       | HighHigh inaktiv    | HighHigh aktiv
             fr       | Très Haute Inactive | Très Haute active
             </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.NonExclusiveLimitAlarmModel.HighState">
             <summary>
             Represents one of the four non-exclusive states.
             </summary>
             <remarks>
             Recommended state names for LocaleIds are listed in the following table.
            
             LocaleId | FALSE State Name | TRUE State Name
             ---------|------------------|-----------------
             en       | High inactive    | High active
             de       | High inaktiv     | High aktiv
             fr       | Haute inactive   | Haute active
             </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.NonExclusiveLimitAlarmModel.LowLowState">
             <summary>
             Represents one of the four non-exclusive states.
             </summary>
             <remarks>
             Recommended state names for LocaleIds are listed in the following table.
            
             LocaleId | FALSE State Name    | TRUE State Name
             ---------|---------------------|-------------------
             en       | LowLow inactive     | LowLow active
             de       | LowLow inaktiv      | LowLow aktiv
             fr       | Très basse inactive | Très basse active
             </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.NonExclusiveLimitAlarmModel.LowState">
             <summary>
             Represents one of the four non-exclusive states.
             </summary>
             <remarks>
             Recommended state names for LocaleIds are listed in the following table.
            
             LocaleId | FALSE State Name | TRUE State Name
             ---------|------------------|-----------------
             en       | Low inactive     | Low active
             de       | Low inaktiv      | Low aktiv
             fr       | Basse inactive   | Basse active
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.NonExclusiveLimitAlarmModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.NonExclusiveLimitAlarmModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.NonExclusiveDeviationAlarmModel">
             <summary>
             A special level Alarm utilized with one or more non-exclusive states.
             </summary>
             <remarks>
             For example if a set point had a value of 10 and the high deviation Alarm limit
             were set for 2 and the low deviation Alarm limit had a value of -1 then the low
             sub state is entered if the process value dropped to below 9; the high sub
             state is entered if the process value became larger than 12. If the set point
             were changed to 11 then the new deviation values would be 10 and 13
             respectively.
            
             If for example both the High and HighHigh states need to be maintained as
             active at the same time this AlarmType should be used. The
             NonExclusiveDeviationAlarmType is based on the NonExclusiveLimitAlarmType.
            
             A deviation Alarm is commonly used to report an excess deviation between a
             desired set point level of a process value and an actual measurement of that
             value. The deviation Alarm becomes active when the deviation exceeds or drops
             below a defined limit.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.NonExclusiveDeviationAlarmModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.NonExclusiveDeviationAlarmModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.NonExclusiveDeviationAlarmModel.#ctor(UnifiedAutomation.UaServer.NonExclusiveDeviationAlarmModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.NonExclusiveDeviationAlarmModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.NonExclusiveDeviationAlarmModel.BaseSetpointNode">
            <summary>
            Gets or sets the BaseSetpointNode
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.NonExclusiveDeviationAlarmModel.SetpointNode">
            <summary>
            Provides the NodeId of the set point used in the deviation calculation.
            </summary>
            <remarks>
            If this Variable is not in the AddressSpace, a Null NodeId shall be provided.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.NonExclusiveDeviationAlarmModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.NonExclusiveDeviationAlarmModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.NonExclusiveLevelAlarmModel">
             <summary>
             A special level Alarm utilized with one or more non-exclusive states.
             </summary>
             <remarks>
             If for example both the High and HighHigh states need to be maintained as
             active at the same time this AlarmType should be used.
            
             A level Alarm is commonly used to report when a limit is exceeded. It typically
             relates to an instrument – e.g. a temperature meter. The level Alarm becomes
             active when the observed value is above a high limit or below a low limit.
            
             The NonExclusiveLevelAlarmType is based on the NonExclusiveLimitAlarmType.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.NonExclusiveLevelAlarmModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.NonExclusiveLevelAlarmModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.NonExclusiveLevelAlarmModel.#ctor(UnifiedAutomation.UaServer.NonExclusiveLevelAlarmModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.NonExclusiveLevelAlarmModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.NonExclusiveLevelAlarmModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.NonExclusiveLevelAlarmModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.NonExclusiveRateOfChangeAlarmModel">
             <summary>
             A special level Alarm utilized with one or more non-exclusive states.
             </summary>
             <remarks>
             If for example both the High and HighHigh states need to be maintained as
             active at the same time this AlarmType should be used.
            
             A Rate of Change Alarm is commonly used to report an unusual change or lack of
             change in a measured value related to the speed at which the value has changed.
             The Rate of Change Alarm becomes active when the rate at which the value
             changes exceeds or drops below a defined limit.
            
             A Rate of Change is measured in some time unit, such as seconds or minutes and
             some unit of measure such as percent or meter. For example a tank may have a
             High limit for the Rate of Change of its level (measured in meters) which would
             be 4 meters per minute. If the tank level changes at a rate that is greater
             than 4 meters per minute then the High sub state is entered.
            
             The NonExclusiveRateOfChangeAlarmType is based on the
             NonExclusiveLimitAlarmType.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.NonExclusiveRateOfChangeAlarmModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.NonExclusiveRateOfChangeAlarmModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.NonExclusiveRateOfChangeAlarmModel.#ctor(UnifiedAutomation.UaServer.NonExclusiveRateOfChangeAlarmModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.NonExclusiveRateOfChangeAlarmModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.NonExclusiveRateOfChangeAlarmModel.EngineeringUnits">
            <summary>
            Gets or sets the EngineeringUnits
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.NonExclusiveRateOfChangeAlarmModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.NonExclusiveRateOfChangeAlarmModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.DialogConditionModel">
            <summary>
            Used to represent Conditions as dialogs.
            </summary>
            <remarks>
            The DialogConditionType inherits all Properties of the ConditionType.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DialogConditionModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.DialogConditionModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DialogConditionModel.#ctor(UnifiedAutomation.UaServer.DialogConditionModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.DialogConditionModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DialogConditionModel.CancelResponse">
            <summary>
            Provides the index of the response in the ResponseOptionSet array that will
            cause the Dialog to go into the inactive state without proceeding with the
            operation described by the prompt.
            </summary>
            <remarks>
            This allows a Client to identify the Cancel option if a special handling for
            this option is available. If no Cancel option is available the value of this
            Property is -1.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DialogConditionModel.DefaultResponse">
            <summary>
            Identifies the response option that should be shown as default to the user.
            </summary>
            <remarks>
            It is the index in the ResponseOptionSet array. If no response option is the
            default, the value of the Property is -1.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DialogConditionModel.DialogState">
             <remarks>
             DialogState when set to TRUE indicates that the Dialog is active and waiting
             for a response. Recommended state names for LocaleIds are listed in the
             following table.
            
             LocaleId | FALSE State Name | TRUE State Name
             ---------|------------------|-----------------
             en       | Inactive         | Active
             de       | Inaktiv          | Aktiv
             fr       | Inactive         | Active
             </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DialogConditionModel.EnabledState">
            <summary>
            Gets or sets the EnabledState
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DialogConditionModel.LastResponse">
            <summary>
            Contains the last response provided by a Client in the Respond method.
            </summary>
            <remarks>
            If no previous response exists then the value of the Property is -1.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DialogConditionModel.OkResponse">
            <summary>
            Provides the index of the OK option in the ResponseOptionSet array.
            </summary>
            <remarks>
            This choice is the response that will allow the system to proceed with the
            operation described by the prompt. This allows a Client to identify the OK
            option if a special handling for this option is available. If no OK option is
            available the value of this Property is -1.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DialogConditionModel.Prompt">
            <summary>
            Prompt is a dialog prompt to be shown to the user.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DialogConditionModel.ResponseOptionSet">
             <summary>
             Specifies the desired set of responses as array of LocalizedText.
             </summary>
             <remarks>
             The index in this array is used for the corresponding fields like
             DefaultResponse, LastResponse and SelectedOption in the Respond method. The
             recommended Dialog response option names in different locales are listed in the
             following table.
            
             Locale “en” | Locale “de”
             ------------|-------------
             Ok          | OK
             Cancel      | Abbrechen
             Yes         | Ja
             No          | Nein
             Abort       | Abbrechen
             Retry       | Wiederholen
             Ignore      | Ignorieren
             Next        | Nächster
             Previous    | Vorheriger
            
             Typical combinations of response options are
             - OK
             - OK, Cancel
             - Yes, No, Cancel
             - Abort, Retry, Ignore
             - Retry, Cancel
             - Yes, No
            
            
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DialogConditionModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.DialogConditionModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DialogConditionModel.GetMethodDispatcher(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Gets the method dispatcher.
            </summary>
            <param name="context">The context.</param>
            <param name="objectId">The object id.</param>
            <param name="methodId">The method id.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DialogConditionModel.DispatchMethod(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MethodHandle,System.Collections.Generic.IList{UnifiedAutomation.UaBase.Variant},System.Collections.Generic.List{UnifiedAutomation.UaBase.StatusCode},System.Collections.Generic.List{UnifiedAutomation.UaBase.Variant})">
            <summary>
            Dispatches the method.
            </summary>
            <param name="context">The context.</param>
            <param name="methodHandle">The method handle.</param>
            <param name="inputArguments">The input arguments.</param>
            <param name="inputArgumentResults">The input argument results.</param>
            <param name="outputArguments">The output arguments.</param>
            <returns></returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.IDialogConditionMethods">
            <summary>
            The interface for methods implemented on the DialogConditionModel object.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IDialogConditionMethods.Respond(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.DialogConditionModel,System.Int32)">
             <summary>
             Respond is used to pass the selected response option and end the dialog.
             </summary>
             <remarks>
             DialogState will return to FALSE.
            
             <b>Method Result Codes</b>
            
             ResultCode                | Description
             --------------------------|--------------------------------------------------------------------------
             Bad_DialogNotActive       | The DialogConditionType instance is not in Active state.
             Bad_DialogResponseInvalid | The selected option is not a valid index in the ResponseOptionSet array.
             </remarks>
             <param name="context"></param>
             <param name="model"></param>
             <param name="SelectedResponse">
             Selected index of the ResponseOptionSet array.
             </param>
             <returns></returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.EventQueueOverflowEventModel">
             <summary>
             Generated when an internal queue of a MonitoredItem subscribing for Events in
             the Server overflows.
             </summary>
             <remarks>
             This EventType inherits all Properties of the BaseEventType. The SourceNode for
             Events of this type shall be assigned to the NodeId of the Server object. The
             SourceName for Events of this type shall be “Internal/EventQueueOverflow”.
            
             This Event is generated when the first Event has to be discarded on a
             MonitoredItem subscribing for Events. It is put into the Queue of the
             MonitoredItem in addition to the size of the Queue defined for this
             MonitoredItem without discarding any other Event. If discardOldest is set to
             TRUE, it is put at the beginning of the queue and is never discarded, otherwise
             at the end. An aggregating Server shall not pass on such an Event. It shall be
             handled like other connection error scenarios
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.EventQueueOverflowEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.EventQueueOverflowEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.EventQueueOverflowEventModel.#ctor(UnifiedAutomation.UaServer.EventQueueOverflowEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.EventQueueOverflowEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.EventQueueOverflowEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.EventQueueOverflowEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ProgressEventModel">
             <summary>
             Generated to identify the progress of an operation.
             </summary>
             <remarks>
             An operation can be a Service call or something application specific like a
             program execution. This EventType inherits all Properties of the BaseEventType.
             The SourceNode for Events of this type shall be assigned to the NodeId of the
             Session object where the operation was initiated. The SourceName for Events of
             this type shall be “Service/[Service Name as defined in Part 4 of the OPC UA
             Specification]” when the progress of a Service call is exposed.
            
             It is recommended that Servers only expose ProgressEvents for Service calls to
             the Session that invoked the Service.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ProgressEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ProgressEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ProgressEventModel.#ctor(UnifiedAutomation.UaServer.ProgressEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ProgressEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ProgressEventModel.Context">
            <summary>
            Contains context information about what operation progress is reported.
            </summary>
            <remarks>
            In the case of Service calls it shall be a UInt32 containing the requestHandle
            of the RequestHeader of the Service call.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ProgressEventModel.Progress">
            <summary>
            Contains the percentage completed of the progress.
            </summary>
            <remarks>
            The value shall be between 0 and 100, where 100 identifies that the operation
            has been finished.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ProgressEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ProgressEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.SystemEventModel">
            <summary>
            Event which is generated as a result of some Event that occurs within the
            Server or by a system that the Server is representing.
            </summary>
            <remarks>
            This EventType inherits all Properties of the BaseEventType. There are no
            additional Properties defined for this EventType.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SystemEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.SystemEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SystemEventModel.#ctor(UnifiedAutomation.UaServer.SystemEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.SystemEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SystemEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.SystemEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.DeviceFailureEventModel">
            <summary>
            Event that indicates a failure in a device of the underlying system.
            </summary>
            <remarks>
            This EventType inherits all Properties of the SystemEventType. There are no
            additional Properties defined for this EventType.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DeviceFailureEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.DeviceFailureEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DeviceFailureEventModel.#ctor(UnifiedAutomation.UaServer.DeviceFailureEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.DeviceFailureEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DeviceFailureEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.DeviceFailureEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.PubSubStatusEventModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.PubSubStatusEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.PubSubStatusEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.PubSubStatusEventModel.#ctor(UnifiedAutomation.UaServer.PubSubStatusEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.PubSubStatusEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.PubSubStatusEventModel.ConnectionId">
            <summary>
            Gets or sets the ConnectionId
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.PubSubStatusEventModel.GroupId">
            <summary>
            Gets or sets the GroupId
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.PubSubStatusEventModel.State">
            <summary>
            Gets or sets the State
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.PubSubStatusEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.PubSubStatusEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.PubSubCommunicationFailureEventModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.PubSubCommunicationFailureEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.PubSubCommunicationFailureEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.PubSubCommunicationFailureEventModel.#ctor(UnifiedAutomation.UaServer.PubSubCommunicationFailureEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.PubSubCommunicationFailureEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.PubSubCommunicationFailureEventModel.Error">
            <summary>
            Gets or sets the Error
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.PubSubCommunicationFailureEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.PubSubCommunicationFailureEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.PubSubTransportLimitsExceedEventModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.PubSubTransportLimitsExceedEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.PubSubTransportLimitsExceedEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.PubSubTransportLimitsExceedEventModel.#ctor(UnifiedAutomation.UaServer.PubSubTransportLimitsExceedEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.PubSubTransportLimitsExceedEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.PubSubTransportLimitsExceedEventModel.Actual">
            <summary>
            Gets or sets the Actual
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.PubSubTransportLimitsExceedEventModel.Maximum">
            <summary>
            Gets or sets the Maximum
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.PubSubTransportLimitsExceedEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.PubSubTransportLimitsExceedEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.RefreshEndEventModel">
            <summary>
            This EventType is used by a Server to mark the end of a Refresh Notification
            cycle.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RefreshEndEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.RefreshEndEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RefreshEndEventModel.#ctor(UnifiedAutomation.UaServer.RefreshEndEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.RefreshEndEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RefreshEndEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.RefreshEndEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.RefreshRequiredEventModel">
            <summary>
            This EventType is used by a Server to indicate that a significant change has
            occurred in the Server or in the subsystem below the Server that may or does
            invalidate the Condition state of a Subscription.
            </summary>
            <remarks>
            When a Server detects an Event queue overflow, it shall track if any Condition
            Events have been lost, if any Condition Events were lost, it shall issue a
            RefreshRequiredEventType Event to the Client after the Event queue is no longer
            in an overflow state.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RefreshRequiredEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.RefreshRequiredEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RefreshRequiredEventModel.#ctor(UnifiedAutomation.UaServer.RefreshRequiredEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.RefreshRequiredEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RefreshRequiredEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.RefreshRequiredEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.RefreshStartEventModel">
            <summary>
            This EventType is used by a Server to mark the beginning of a Refresh
            Notification cycle.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RefreshStartEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.RefreshStartEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RefreshStartEventModel.#ctor(UnifiedAutomation.UaServer.RefreshStartEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.RefreshStartEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RefreshStartEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.RefreshStartEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.SystemStatusChangeEventModel">
             <summary>
             Event that indicates a status change in a system.
             </summary>
             <remarks>
             For example, if the status indicates that an underlying system is not running,
             then a Client cannot expect any Events from the underlying system. A Server can
             identify its own status changes using this EventType.
            
             This EventType inherits all Properties of the SystemEventType. The SourceNode
             and the SourceName shall identify the system. The system can be the Server
             itself or some underlying system.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SystemStatusChangeEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.SystemStatusChangeEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SystemStatusChangeEventModel.#ctor(UnifiedAutomation.UaServer.SystemStatusChangeEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.SystemStatusChangeEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SystemStatusChangeEventModel.SystemState">
            <summary>
            Specifies the current state of the system.
            </summary>
            <remarks>
            Changes to the ServerState of the system shall trigger a
            SystemStatusChangeEvent, when the event is supported by the system.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SystemStatusChangeEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.SystemStatusChangeEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.TransitionEventModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TransitionEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.TransitionEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TransitionEventModel.#ctor(UnifiedAutomation.UaServer.TransitionEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.TransitionEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.TransitionEventModel.FromState">
            <summary>
            Gets or sets the FromState
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.TransitionEventModel.ToState">
            <summary>
            Gets or sets the ToState
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.TransitionEventModel.Transition">
            <summary>
            Gets or sets the Transition
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TransitionEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.TransitionEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ProgramTransitionEventModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ProgramTransitionEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ProgramTransitionEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ProgramTransitionEventModel.#ctor(UnifiedAutomation.UaServer.ProgramTransitionEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ProgramTransitionEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ProgramTransitionEventModel.IntermediateResult">
            <summary>
            Gets or sets the IntermediateResult
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ProgramTransitionEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ProgramTransitionEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.BaseVariableModel">
             <summary>
             The BaseVariableType is the abstract base type for all other variable types.
             </summary>
             <remarks>
             However, only the <see cref="T:UnifiedAutomation.UaServer.PropertyModel"/> and
             the <see cref="T:UnifiedAutomation.UaServer.BaseDataVariableModel"/> directly
             inherit from this type.
            
             There are no references, except for HasSubtype references, specified for this
             variable type.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseVariableModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.BaseVariableModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseVariableModel.#ctor(UnifiedAutomation.UaServer.BaseVariableModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.BaseVariableModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.BaseVariableModel.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.BaseVariableModel`1">
            <summary>
            A typed object which represents a BaseVariableType.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseVariableModel`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.BaseVariableModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseVariableModel`1.#ctor(UnifiedAutomation.UaServer.BaseVariableModel{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.BaseVariableModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.BaseVariableModel`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.BaseDataVariableModel">
             <summary>
             This VariableType is used as the type definition whenever there is a
             DataVariable having no more concrete type definition available.
             </summary>
             <remarks>
             This VariableType is the base VariableType for VariableTypes of DataVariables,
             and all other VariableTypes of DataVariables shall either directly or
             indirectly inherit from it. However, it might not be possible for Servers to
             provide all HasSubtype References from this VariableType to its subtypes, and
             therefore it is not required to provide this information. The
             BaseDataVariableType is a subtype of the BaseVariableType.
            
             There are no References except for HasSubtype References specified for this
             VariableType.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseDataVariableModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.BaseDataVariableModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseDataVariableModel.#ctor(UnifiedAutomation.UaServer.BaseDataVariableModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.BaseDataVariableModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.BaseDataVariableModel`1">
            <summary>
            A typed object which represents a BaseDataVariableType.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseDataVariableModel`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.BaseDataVariableModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseDataVariableModel`1.#ctor(UnifiedAutomation.UaServer.BaseDataVariableModel{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.BaseDataVariableModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.BaseDataVariableModel`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AlarmRateVariableModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AlarmRateVariableModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AlarmRateVariableModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AlarmRateVariableModel.#ctor(UnifiedAutomation.UaServer.AlarmRateVariableModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AlarmRateVariableModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AlarmRateVariableModel.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AlarmRateVariableModel.Rate">
            <summary>
            Gets or sets the Rate
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AudioVariableModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AudioVariableModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AudioVariableModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AudioVariableModel.#ctor(UnifiedAutomation.UaServer.AudioVariableModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AudioVariableModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AudioVariableModel.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AudioVariableModel.AgencyId">
            <summary>
            Gets or sets the AgencyId
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AudioVariableModel.ListId">
            <summary>
            Gets or sets the ListId
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AudioVariableModel.VersionId">
            <summary>
            Gets or sets the VersionId
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.BuildInfoModel">
            <summary>
            This complex variable type is used for information about the Server status.
            </summary>
            <remarks>
            Its data variables reflect its data type having the same semantic (see
            <see cref="T:UnifiedAutomation.UaBase.BuildInfo"/>).
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BuildInfoModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.BuildInfoModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BuildInfoModel.#ctor(UnifiedAutomation.UaServer.BuildInfoModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.BuildInfoModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.BuildInfoModel.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.BuildInfoModel.BuildDate">
            <summary>
            Gets or sets the BuildDate
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.BuildInfoModel.BuildNumber">
            <summary>
            Gets or sets the BuildNumber
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.BuildInfoModel.ManufacturerName">
            <summary>
            Gets or sets the ManufacturerName
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.BuildInfoModel.ProductName">
            <summary>
            Gets or sets the ProductName
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.BuildInfoModel.ProductUri">
            <summary>
            Gets or sets the ProductUri
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.BuildInfoModel.SoftwareVersion">
            <summary>
            Gets or sets the SoftwareVersion
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ConditionVariableModel">
            <remarks>
            Various information elements of a Condition are not considered to be states.
            However, a change in their value is considered important and supposed to
            trigger an Event Notification. These information elements are called
            ConditionVariables. ConditionVariables are represented by a
            ConditionVariableType. It defines the mandatory Property SourceTimestamp.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ConditionVariableModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ConditionVariableModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ConditionVariableModel.#ctor(UnifiedAutomation.UaServer.ConditionVariableModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ConditionVariableModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ConditionVariableModel.SourceTimestamp">
            <summary>
            SourceTimestamp indicates the time of the last change of the Value of this
            ConditionVariable.
            </summary>
            <remarks>
            It shall be the same time that would be returned from the Read Service inside
            the DataValue structure for the ConditionVariable Value Attribute.
            </remarks>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ConditionVariableModel`1">
            <summary>
            A typed object which represents a ConditionVariableType.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ConditionVariableModel`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ConditionVariableModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ConditionVariableModel`1.#ctor(UnifiedAutomation.UaServer.ConditionVariableModel{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ConditionVariableModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ConditionVariableModel`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.DataItemModel">
            <summary>
            This VariableType defines the general characteristics of a DataItem.
            </summary>
            <remarks>
            All other DataItem Types derive from it. It defines the optional properties
            Definition and ValuePrecision. The DataItemType derives from the
            BaseDataVariableType.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DataItemModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.DataItemModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DataItemModel.#ctor(UnifiedAutomation.UaServer.DataItemModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.DataItemModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DataItemModel.Definition">
            <summary>
            A vendor-specific, human readable string that specifies how the value of this
            DataItem is calculated.
            </summary>
            <remarks>
            Definition is non-localized and will often contain an equation that can be
            parsed by certain clients. Example: Definition::="(TempA - 25) + TempB"
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DataItemModel.ValuePrecision">
             <summary>
             Specifies the maximum precision that the server can maintain for the item based
             on restrictions in the target environment.
             </summary>
             <remarks>
             ValuePrecision can be used for the following DataTypes:
             - For Float and Double values it specifies the number of digits after the
               decimal place.
             - For DateTime values it indicates the minimum time difference in nanoseconds.
               For example, a ValuePrecision of 20 000 000 defines a precision of 20 ms.
            
            
            
             The ValuePrecision Property is an approximation that is intended to provide
             guidance to a Client. A Server is expected to silently round any value with
             more precision that it supports. This implies that a Client may encounter cases
             where the value read back from a Server differs from the value that it wrote to
             the Server. This difference shall be no more than the difference suggested by
             this Property.
             </remarks>
        </member>
        <member name="T:UnifiedAutomation.UaServer.DataItemModel`1">
            <summary>
            A typed object which represents a DataItemType.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DataItemModel`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.DataItemModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DataItemModel`1.#ctor(UnifiedAutomation.UaServer.DataItemModel{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.DataItemModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DataItemModel`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AnalogItemModel">
             <summary>
             This VariableType defines the general characteristics of an AnalogItem.
             </summary>
             <remarks>
             The AnalogItemType derives from the DataItemType.
            
             The StatusCode delivered with the value also contains an informational bit
             called SemanticsChanged. Servers that implement Data Access shall set this Bit
             in notifications if EURange (could change the behaviour of a Subscription if a
             PercentDeadband filter is used) or EngineeringUnits (could create problems if
             the client uses the value to perform calculations) Properties are changed.
             Clients that use any of these Properties should re-read them before they
             process the data value.
            
             In addition a server can send SemanticChangeEvents if the value of the
             properties EURange and EngineeringUnits are changed. To indicate this
             capability, the SemanticChange flag must be set in the AccessLevel and
             UserAccessLevel attributes of this variable.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AnalogItemModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AnalogItemModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AnalogItemModel.#ctor(UnifiedAutomation.UaServer.AnalogItemModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AnalogItemModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AnalogItemModel.EngineeringUnits">
             <summary>
             Specifies the units for the AnalogItem value (e.g., DEGC, hertz, seconds).
             </summary>
             <remarks>
             Understanding the units of a measurement value is essential for a uniform
             system. In an open system in particular where servers from different cultures
             might be used, it is essential to know what the units of measurement are. Based
             on such knowledge, values can be converted if necessary before being used.
             Therefore, although defined as optional, support of the EngineeringUnits
             Property is strongly advised.
            
             To facilitate interoperability, OPC UA specifies how to apply the widely
             accepted “Codes for Units of Measurement (Recommendation No. 20)” published by
             the “United Nations Centre for Trade Facilitation and Electronic Business” (see
             UN/CEFACT). It uses and is based on the International System of Units (SI
             Units) but in addition provides a fixed code that can be used for automated
             evaluation. This recommendation has been accepted by many industries on a
             global basis.
            
             The class UaEUInformation provides helper functions to create the unit
             information from a unitId provided as enumeration. The methods are
             UaEUInformation::fromUnitId and UaEUInformation::setEUInformation.
             </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AnalogItemModel.EURange">
             <summary>
             Defines the value range likely to be obtained in normal operation.
             </summary>
             <remarks>
             It is intended for such use as automatically scaling a bar graph display.
             Sensor or instrument failure or deactivation can result in a returned item
             value which is actually outside of this range. Client software must be prepared
             to deal with this possibility. Similarly a client may attempt to write a value
             that is outside of this range back to the server. The exact behaviour (accept,
             reject, clamp, etc.) in this case is server-dependent. However, in general
             servers shall be prepared to handle this.
            
             The EURange is also used as base for the calculation of the PercentDeadband.
             </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AnalogItemModel.InstrumentRange">
            <summary>
            Defines the value range that can be returned by the instrument.
            </summary>
            <remarks>
            Although defined as optional, it is strongly recommended for Servers to support
            this Property. Without an InstrumentRange being provided, Clients will commonly
            assume the full range according to the DataType.
            </remarks>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AnalogItemModel`1">
            <summary>
            A typed object which represents a AnalogItemType.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AnalogItemModel`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AnalogItemModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AnalogItemModel`1.#ctor(UnifiedAutomation.UaServer.AnalogItemModel{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AnalogItemModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AnalogItemModel`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AnalogUnitItemModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AnalogUnitItemModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AnalogUnitItemModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AnalogUnitItemModel.#ctor(UnifiedAutomation.UaServer.AnalogUnitItemModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AnalogUnitItemModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AnalogUnitItemModel.EngineeringUnits">
            <summary>
            Gets or sets the EngineeringUnits
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AnalogUnitItemModel.EURange">
            <summary>
            Gets or sets the EURange
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AnalogUnitItemModel.InstrumentRange">
            <summary>
            Gets or sets the InstrumentRange
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AnalogUnitItemModel`1">
            <summary>
            A typed object which represents a AnalogUnitItemType.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AnalogUnitItemModel`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AnalogUnitItemModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.AnalogUnitItemModel`1.#ctor(UnifiedAutomation.UaServer.AnalogUnitItemModel{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.AnalogUnitItemModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AnalogUnitItemModel`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.DiscreteItemModel">
            <remarks>
            This VariableType is an abstract type. Only derived types like
            MultiStateDiscreteType or TwoStateDiscreteType can be instantiated. However, it
            might be used in a filter when browsing or querying.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DiscreteItemModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.DiscreteItemModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DiscreteItemModel.#ctor(UnifiedAutomation.UaServer.DiscreteItemModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.DiscreteItemModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.DiscreteItemModel`1">
            <summary>
            A typed object which represents a DiscreteItemType.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DiscreteItemModel`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.DiscreteItemModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DiscreteItemModel`1.#ctor(UnifiedAutomation.UaServer.DiscreteItemModel{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.DiscreteItemModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DiscreteItemModel`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.MultiStateDiscreteModel">
             <summary>
             Defines the general characteristics of a DiscreteItem that can have more than
             two states.
             </summary>
             <remarks>
             The value of the DiscreteItem is delivered as UInteger but the EnumStrings
             Property defined by the MultiStateDiscreteType provides display strings for
             every possible state value.
            
             The EnumStrings Property is also used for Enumeration DataTypes.
            
             The StatusCode delivered with the value also contains an informational bit
             called SemanticsChanged. Servers that implement Data Access shall set this Bit
             in notifications if the EnumStrings (changes can cause misinterpretation by
             users or (scripting) programs) Property is changed. Clients that use any of
             these Properties should re-read them before they process the data value.
            
             In addition a server can send SemanticChangeEvents if the value of the Property
             EnumStrings is changed. To indicate this capability, the SemanticChange flag
             must be set in the AccessLevel and UserAccessLevel attributes of this variable.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.MultiStateDiscreteModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.MultiStateDiscreteModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.MultiStateDiscreteModel.#ctor(UnifiedAutomation.UaServer.MultiStateDiscreteModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.MultiStateDiscreteModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.MultiStateDiscreteModel.EnumStrings">
             <summary>
             EnumStrings is a string lookup table corresponding to sequential numeric values
             of the variable (0, 1, 2, etc.).
             </summary>
             <remarks>
             Example:"OPEN""CLOSE""IN TRANSIT" etc. Here the string"OPEN" corresponds to 0,
             "CLOSE" to 1 and"IN TRANSIT" to 2.
            
             If the item contains an array then this lookup table shall apply to all
             elements in the array.
            
             The EnumStrings Property is also used for Enumeration DataTypes.
             </remarks>
        </member>
        <member name="T:UnifiedAutomation.UaServer.MultiStateDiscreteModel`1">
            <summary>
            A typed object which represents a MultiStateDiscreteType.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.MultiStateDiscreteModel`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.MultiStateDiscreteModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.MultiStateDiscreteModel`1.#ctor(UnifiedAutomation.UaServer.MultiStateDiscreteModel{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.MultiStateDiscreteModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.MultiStateDiscreteModel`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.MultiStateValueDiscreteModel">
             <summary>
             This VariableType defines the general characteristics of a DiscreteItem that
             can have more than two states and where the state values (the enumeration) do
             not consist of consecutive numeric values (may have gaps) or where the
             enumeration is not zero-based.
             </summary>
             <remarks>
             The MultiStateValueDiscreteType derives from the DiscreteItemType.
             MultiStateValueDiscrete Variables can have any numeric Data Type; this includes
             signed and unsigned integers from 8 to 64 Bit length.
            
             The numeric representation of the current enumeration value is provided via the
             Value Attribute of the MultiStateValueDiscrete Variable.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.MultiStateValueDiscreteModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.MultiStateValueDiscreteModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.MultiStateValueDiscreteModel.#ctor(UnifiedAutomation.UaServer.MultiStateValueDiscreteModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.MultiStateValueDiscreteModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.MultiStateValueDiscreteModel.EnumValues">
            <summary>
            An array of EnumValueType where each entry of the array represents one
            enumeration value with its integer notation, a human-readable representation,
            and help information.
            </summary>
            <remarks>
            This represents enumerations with integers that are not zero-based or have gaps
            (e.g. 1, 2, 4, 8, 16). See <see cref="T:UnifiedAutomation.UaBase.EnumValueType"/>
            for the definition of this type. MultiStateValueDiscrete Variables expose the
            current integer notation in their Value Attribute. Clients will often read the
            EnumValues Property in advance and cache it to look up a name or help whenever
            they receive the numeric representation.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.MultiStateValueDiscreteModel.ValueAsText">
            <summary>
            Provides the localized text representation of the enumeration value.
            </summary>
            <remarks>
            It can be used by Clients only interested in displaying the text to subscribe
            to the Property instead of the Value Attribute.
            </remarks>
        </member>
        <member name="T:UnifiedAutomation.UaServer.MultiStateValueDiscreteModel`1">
            <summary>
            A typed object which represents a MultiStateValueDiscreteType.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.MultiStateValueDiscreteModel`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.MultiStateValueDiscreteModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.MultiStateValueDiscreteModel`1.#ctor(UnifiedAutomation.UaServer.MultiStateValueDiscreteModel{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.MultiStateValueDiscreteModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.MultiStateValueDiscreteModel`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.TwoStateDiscreteModel">
             <summary>
             This VariableType defines the general characteristics of a DiscreteItem that
             can have two states.
             </summary>
             <remarks>
             The value of the DiscreteItem is delivered as boolean but the TrueState and
             FalseState properties defined by the TwoStateDiscreteType provides display
             strings for the two possible states.
            
             The StatusCode delivered with the value also contains an informational bit
             called SemanticsChanged. Servers that implement Data Access shall set this Bit
             in notifications if any of the FalseState or TrueState (changes can cause
             misinterpretation by users or (scripting) programs) Properties are changed.
             Clients that use any of these Properties should re-read them before they
             process the data value.
            
             In addition a server can send SemanticChangeEvents if the value of the Property
             EnumStrings is changed. To indicate this capability, the SemanticChange flag
             must be set in the AccessLevel and UserAccessLevel attributes of this variable.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TwoStateDiscreteModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.TwoStateDiscreteModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TwoStateDiscreteModel.#ctor(UnifiedAutomation.UaServer.TwoStateDiscreteModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.TwoStateDiscreteModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.TwoStateDiscreteModel.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.TwoStateDiscreteModel.FalseState">
             <summary>
             FalseState contains a string to be associated with this DataItem when it is
             FALSE.
             </summary>
             <remarks>
             This is typically used for a contact when it is in the open (zero) state. for
             example:"STOP","OPEN","DISABLE","UNSAFE", etc.
            
             If the item contains an array then this lookup table shall apply to all
             elements in the array.
             </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.TwoStateDiscreteModel.TrueState">
             <summary>
             TrueState contains a string to be associated with this DataItem when it is
             TRUE.
             </summary>
             <remarks>
             This is typically used for a contact when it is in the closed (non-zero) state.
             for example:"RUN","CLOSE","ENABLE","SAFE", etc.
            
             If the item contains an array then this lookup table shall apply to all
             elements in the array.
             </remarks>
        </member>
        <member name="T:UnifiedAutomation.UaServer.EUItemModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.EUItemModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.EUItemModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.EUItemModel.#ctor(UnifiedAutomation.UaServer.EUItemModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.EUItemModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.EUItemModel.EngineeringUnits">
            <summary>
            Gets or sets the EngineeringUnits
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.EUItemModel.EURange">
            <summary>
            Gets or sets the EURange
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.EUItemModel.InstrumentRange">
            <summary>
            Gets or sets the InstrumentRange
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.EUItemModel`1">
            <summary>
            A typed object which represents a EUItemType.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.EUItemModel`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.EUItemModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.EUItemModel`1.#ctor(UnifiedAutomation.UaServer.EUItemModel{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.EUItemModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.EUItemModel`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.DataTypeDescriptionModel">
             <summary>
             Used as the type for the DataTypeDescriptions.
             </summary>
             <remarks>
             There are no References specified for this VariableType. It defines the
             optional properties DataTypeVersion and DictionaryFragment.
            
             DataTypeVersion indicates whether the type description of the DataType has
             changed. Changes to the DataTypeVersion may impact the operation of
             Subscriptions. If the DataTypeVersion changes for a Variable that is being
             monitored for a Subscription and that uses this DataTypeDescription, then the
             next data change Notification sent for the Variable will contain a status that
             indicates the change in the DataTypeDescription.
            
             \todo Modify text for DictionaryFragment.
            
             In some scenarios an OPC UA Server may have resource limitations which make it
             impractical to expose large DataTypeDictionaries. In these scenarios the Server
             may be able to provide access to descriptions for individual DataTypes even if
             the entire dictionary cannot be read. For this reason, this standard defines a
             Property for the DataTypeDescription called DictionaryFragment. This Property
             is a ByteString that contains a subset of the DataTypeDictionary which
             describes the format of the DataType associated with the DataTypeDescription.
             Thus, the Server splits the large DataTypeDictionary into several small parts
             and Clients can access without affecting the overall system performance.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DataTypeDescriptionModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.DataTypeDescriptionModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DataTypeDescriptionModel.#ctor(UnifiedAutomation.UaServer.DataTypeDescriptionModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.DataTypeDescriptionModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DataTypeDescriptionModel.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DataTypeDescriptionModel.DataTypeVersion">
            <summary>
            DataTypeVersion indicates whether the type description of the DataType has
            changed.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DataTypeDescriptionModel.DictionaryFragment">
            <summary>
            A ByteString that contains a subset of the DataTypeDictionary which describes
            the format of the DataType associated with the DataTypeDescription.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.DataTypeDictionaryModel">
             <summary>
             This VariableType is used as the type for the DataTypeDictionaries.
             </summary>
             <remarks>
             There are no References specified for this VariableType. It defines the
             optional properties DataTypeVersion and NamespaceUri.
            
             \todo Is this paragraph clear? Context from Spec missing...
            
             Changes in DataTypeDictionaries may be a result of a change to a type
             description, but it is more likely that dictionary changes are a result of the
             addition or deletion of type descriptions. This includes changes made while the
             Server is offline so that the new version is available when the Server
             restarts. Clients may subscribe to the DataTypeVersion Property to determine if
             the DataTypeDictionary has changed since it was last read.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DataTypeDictionaryModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.DataTypeDictionaryModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DataTypeDictionaryModel.#ctor(UnifiedAutomation.UaServer.DataTypeDictionaryModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.DataTypeDictionaryModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DataTypeDictionaryModel.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DataTypeDictionaryModel.DataTypeVersion">
            <summary>
            Clients may subscribe to the DataTypeVersion Property to determine if the
            DataTypeDictionary has changed since it was last read.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DataTypeDictionaryModel.Deprecated">
            <summary>
            Gets or sets the Deprecated
            </summary>
            <details>
            Indicates that all of the definitions for the dictionary are available through a DataTypeDefinition Attribute.
            </details>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DataTypeDictionaryModel.NamespaceUri">
            <summary>
            The URI for the namespace described by the Value Attribute of the
            DataTypeDictionary.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.OptionSetModel">
             <summary>
             This VariableType is used to represent a bit mask.
             </summary>
             <remarks>
             Each array element of the OptionSetValues Property contains either the
             human-readable representation for the corresponding bit used in the option set
             or an empty LocalizedText for a bit that has no specific meaning. The order of
             the bits of the bit mask maps to a position of the array, i.e. the first bit
             (least significant bit) maps to the first entry in the array, etc.
            
             The DataType of this VariableType shall be capable of representing a bit mask.
             It shall be either a numeric DataType representing a signed or unsigned
             integer, or a ByteString. For example, it can be the BitFieldMaskDataType.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.OptionSetModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.OptionSetModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.OptionSetModel.#ctor(UnifiedAutomation.UaServer.OptionSetModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.OptionSetModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.OptionSetModel.BitMask">
            <summary>
            Provides the bit mask in an array of Booleans.
            </summary>
            <remarks>
            This allows subscribing to individual entries of the bit mask. The order of the
            bits of the bit mask points to a position of the array, i.e. the first bit
            points to the first entry in the array, etc.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.OptionSetModel.OptionSetValues">
            <summary>
            Gets or sets the OptionSetValues
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.OptionSetModel`1">
            <summary>
            A typed object which represents a OptionSetType.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.OptionSetModel`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.OptionSetModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.OptionSetModel`1.#ctor(UnifiedAutomation.UaServer.OptionSetModel{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.OptionSetModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.OptionSetModel`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ProgramDiagnostic2Model">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ProgramDiagnostic2Model.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ProgramDiagnostic2Model" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ProgramDiagnostic2Model.#ctor(UnifiedAutomation.UaServer.ProgramDiagnostic2Model)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ProgramDiagnostic2Model" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ProgramDiagnostic2Model.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ProgramDiagnostic2Model.CreateClientName">
            <summary>
            Gets or sets the CreateClientName
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ProgramDiagnostic2Model.CreateSessionId">
            <summary>
            Gets or sets the CreateSessionId
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ProgramDiagnostic2Model.InvocationCreationTime">
            <summary>
            Gets or sets the InvocationCreationTime
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ProgramDiagnostic2Model.LastMethodCall">
            <summary>
            Gets or sets the LastMethodCall
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ProgramDiagnostic2Model.LastMethodCallTime">
            <summary>
            Gets or sets the LastMethodCallTime
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ProgramDiagnostic2Model.LastMethodInputArguments">
            <summary>
            Gets or sets the LastMethodInputArguments
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ProgramDiagnostic2Model.LastMethodInputValues">
            <summary>
            Gets or sets the LastMethodInputValues
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ProgramDiagnostic2Model.LastMethodOutputArguments">
            <summary>
            Gets or sets the LastMethodOutputArguments
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ProgramDiagnostic2Model.LastMethodOutputValues">
            <summary>
            Gets or sets the LastMethodOutputValues
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ProgramDiagnostic2Model.LastMethodReturnStatus">
            <summary>
            Gets or sets the LastMethodReturnStatus
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ProgramDiagnostic2Model.LastMethodSessionId">
            <summary>
            Gets or sets the LastMethodSessionId
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ProgramDiagnostic2Model.LastTransitionTime">
            <summary>
            Gets or sets the LastTransitionTime
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ProgramDiagnosticModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ProgramDiagnosticModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ProgramDiagnosticModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ProgramDiagnosticModel.#ctor(UnifiedAutomation.UaServer.ProgramDiagnosticModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ProgramDiagnosticModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ProgramDiagnosticModel.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ProgramDiagnosticModel.CreateClientName">
            <summary>
            Gets or sets the CreateClientName
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ProgramDiagnosticModel.CreateSessionId">
            <summary>
            Gets or sets the CreateSessionId
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ProgramDiagnosticModel.InvocationCreationTime">
            <summary>
            Gets or sets the InvocationCreationTime
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ProgramDiagnosticModel.LastMethodCall">
            <summary>
            Gets or sets the LastMethodCall
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ProgramDiagnosticModel.LastMethodCallTime">
            <summary>
            Gets or sets the LastMethodCallTime
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ProgramDiagnosticModel.LastMethodInputArguments">
            <summary>
            Gets or sets the LastMethodInputArguments
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ProgramDiagnosticModel.LastMethodOutputArguments">
            <summary>
            Gets or sets the LastMethodOutputArguments
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ProgramDiagnosticModel.LastMethodReturnStatus">
            <summary>
            Gets or sets the LastMethodReturnStatus
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ProgramDiagnosticModel.LastMethodSessionId">
            <summary>
            Gets or sets the LastMethodSessionId
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ProgramDiagnosticModel.LastTransitionTime">
            <summary>
            Gets or sets the LastTransitionTime
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.PubSubDiagnosticsCounterModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.PubSubDiagnosticsCounterModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.PubSubDiagnosticsCounterModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.PubSubDiagnosticsCounterModel.#ctor(UnifiedAutomation.UaServer.PubSubDiagnosticsCounterModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.PubSubDiagnosticsCounterModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.PubSubDiagnosticsCounterModel.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.PubSubDiagnosticsCounterModel.Active">
            <summary>
            Gets or sets the Active
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.PubSubDiagnosticsCounterModel.Classification">
            <summary>
            Gets or sets the Classification
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.PubSubDiagnosticsCounterModel.DiagnosticsLevel">
            <summary>
            Gets or sets the DiagnosticsLevel
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.PubSubDiagnosticsCounterModel.TimeFirstChange">
            <summary>
            Gets or sets the TimeFirstChange
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.SamplingIntervalDiagnosticsArrayModel">
            <summary>
            This complex variable type is used for diagnostic information.
            </summary>
            <remarks>
            For each entry of the array, instances of this type will provide a variable of
            the <see cref="T:UnifiedAutomation.UaServer.SamplingIntervalDiagnosticsModel"/>
            variable type having the sampling rate as browse name.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SamplingIntervalDiagnosticsArrayModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.SamplingIntervalDiagnosticsArrayModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SamplingIntervalDiagnosticsArrayModel.#ctor(UnifiedAutomation.UaServer.SamplingIntervalDiagnosticsArrayModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.SamplingIntervalDiagnosticsArrayModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SamplingIntervalDiagnosticsArrayModel.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.SamplingIntervalDiagnosticsModel">
            <summary>
            This complex variable type is used for diagnostic information.
            </summary>
            <remarks>
            Its data variables reflect its data type, having the same semantic defined (see
            <see cref="T:UnifiedAutomation.UaServer.SamplingIntervalDiagnosticsModel"/>).
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SamplingIntervalDiagnosticsModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.SamplingIntervalDiagnosticsModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SamplingIntervalDiagnosticsModel.#ctor(UnifiedAutomation.UaServer.SamplingIntervalDiagnosticsModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.SamplingIntervalDiagnosticsModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SamplingIntervalDiagnosticsModel.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SamplingIntervalDiagnosticsModel.DisabledMonitoredItemsSamplingCount">
            <summary>
            Gets or sets the DisabledMonitoredItemsSamplingCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SamplingIntervalDiagnosticsModel.MaxSampledMonitoredItemsCount">
            <summary>
            Gets or sets the MaxSampledMonitoredItemsCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SamplingIntervalDiagnosticsModel.SampledMonitoredItemsCount">
            <summary>
            Gets or sets the SampledMonitoredItemsCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SamplingIntervalDiagnosticsModel.SamplingInterval">
            <summary>
            Gets or sets the SamplingInterval
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.SelectionListModel">
            <summary>
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SelectionListModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.SelectionListModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SelectionListModel.#ctor(UnifiedAutomation.UaServer.SelectionListModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.SelectionListModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SelectionListModel.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SelectionListModel.RestrictToList">
            <summary>
            Gets or sets the RestrictToList
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SelectionListModel.SelectionDescriptions">
            <summary>
            Gets or sets the SelectionDescriptions
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SelectionListModel.Selections">
            <summary>
            Gets or sets the Selections
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ServerDiagnosticsSummaryModel">
            <summary>
            This complex variable type is used for diagnostic information.
            </summary>
            <remarks>
            Its data variables reflect its data type having the same semantic (see
            <see cref="T:UnifiedAutomation.UaBase.ServerDiagnosticsSummaryDataType"/>).
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerDiagnosticsSummaryModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ServerDiagnosticsSummaryModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerDiagnosticsSummaryModel.#ctor(UnifiedAutomation.UaServer.ServerDiagnosticsSummaryModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ServerDiagnosticsSummaryModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerDiagnosticsSummaryModel.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerDiagnosticsSummaryModel.CumulatedSessionCount">
            <summary>
            Gets or sets the CumulatedSessionCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerDiagnosticsSummaryModel.CumulatedSubscriptionCount">
            <summary>
            Gets or sets the CumulatedSubscriptionCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerDiagnosticsSummaryModel.CurrentSessionCount">
            <summary>
            Gets or sets the CurrentSessionCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerDiagnosticsSummaryModel.CurrentSubscriptionCount">
            <summary>
            Gets or sets the CurrentSubscriptionCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerDiagnosticsSummaryModel.PublishingIntervalCount">
            <summary>
            Gets or sets the PublishingIntervalCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerDiagnosticsSummaryModel.RejectedRequestsCount">
            <summary>
            Gets or sets the RejectedRequestsCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerDiagnosticsSummaryModel.RejectedSessionCount">
            <summary>
            Gets or sets the RejectedSessionCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerDiagnosticsSummaryModel.SecurityRejectedRequestsCount">
            <summary>
            Gets or sets the SecurityRejectedRequestsCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerDiagnosticsSummaryModel.SecurityRejectedSessionCount">
            <summary>
            Gets or sets the SecurityRejectedSessionCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerDiagnosticsSummaryModel.ServerViewCount">
            <summary>
            Gets or sets the ServerViewCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerDiagnosticsSummaryModel.SessionAbortCount">
            <summary>
            Gets or sets the SessionAbortCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerDiagnosticsSummaryModel.SessionTimeoutCount">
            <summary>
            Gets or sets the SessionTimeoutCount
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ServerStatusModel">
            <summary>
            This complex variable type is used for diagnostic information.
            </summary>
            <remarks>
            Its data variables reflect its data type having the same semantic (see
            <see cref="T:UnifiedAutomation.UaBase.ServerStatusDataType"/>).
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerStatusModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ServerStatusModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerStatusModel.#ctor(UnifiedAutomation.UaServer.ServerStatusModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ServerStatusModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerStatusModel.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerStatusModel.BuildInfo">
            <summary>
            Gets or sets the BuildInfo
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerStatusModel.CurrentTime">
            <summary>
            Gets or sets the CurrentTime
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerStatusModel.SecondsTillShutdown">
            <summary>
            Gets or sets the SecondsTillShutdown
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerStatusModel.ShutdownReason">
            <summary>
            Gets or sets the ShutdownReason
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerStatusModel.StartTime">
            <summary>
            Gets or sets the StartTime
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerStatusModel.State">
            <summary>
            Gets or sets the State
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ServerVendorCapabilityModel">
            <summary>
            An abstract type whose subtypes define capabilities of the Server. Vendors may
            define subtypes of this type.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerVendorCapabilityModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ServerVendorCapabilityModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerVendorCapabilityModel.#ctor(UnifiedAutomation.UaServer.ServerVendorCapabilityModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ServerVendorCapabilityModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ServerVendorCapabilityModel`1">
            <summary>
            A typed object which represents a ServerVendorCapabilityType.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerVendorCapabilityModel`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ServerVendorCapabilityModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerVendorCapabilityModel`1.#ctor(UnifiedAutomation.UaServer.ServerVendorCapabilityModel{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ServerVendorCapabilityModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerVendorCapabilityModel`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.SessionDiagnosticsArrayModel">
            <summary>
            This complex variable type is used for diagnostic information.
            </summary>
            <remarks>
            For each entry of the array instances of this type will provide a variable of
            the <see cref="T:UnifiedAutomation.UaServer.SessionDiagnosticsVariableModel"/>
            variable type, having the SessionDiagnostics as browse name. Those variables
            will also be referenced by the SessionDiagnostics objects defined by the
            <see cref="T:UnifiedAutomation.UaServer.SessionDiagnosticsObjectModel"/>).
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SessionDiagnosticsArrayModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.SessionDiagnosticsArrayModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SessionDiagnosticsArrayModel.#ctor(UnifiedAutomation.UaServer.SessionDiagnosticsArrayModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.SessionDiagnosticsArrayModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionDiagnosticsArrayModel.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.SessionDiagnosticsVariableModel">
            <summary>
            This complex variable type is used for diagnostic information.
            </summary>
            <remarks>
            Its data variables reflect its data type, having the same semantic defined (see
            <see cref="T:UnifiedAutomation.UaBase.SessionDiagnosticsDataType"/>).
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SessionDiagnosticsVariableModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.SessionDiagnosticsVariableModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SessionDiagnosticsVariableModel.#ctor(UnifiedAutomation.UaServer.SessionDiagnosticsVariableModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.SessionDiagnosticsVariableModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionDiagnosticsVariableModel.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionDiagnosticsVariableModel.ActualSessionTimeout">
            <summary>
            Gets or sets the ActualSessionTimeout
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionDiagnosticsVariableModel.AddNodesCount">
            <summary>
            Gets or sets the AddNodesCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionDiagnosticsVariableModel.AddReferencesCount">
            <summary>
            Gets or sets the AddReferencesCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionDiagnosticsVariableModel.BrowseCount">
            <summary>
            Gets or sets the BrowseCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionDiagnosticsVariableModel.BrowseNextCount">
            <summary>
            Gets or sets the BrowseNextCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionDiagnosticsVariableModel.CallCount">
            <summary>
            Gets or sets the CallCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionDiagnosticsVariableModel.ClientConnectionTime">
            <summary>
            Gets or sets the ClientConnectionTime
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionDiagnosticsVariableModel.ClientDescription">
            <summary>
            Gets or sets the ClientDescription
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionDiagnosticsVariableModel.ClientLastContactTime">
            <summary>
            Gets or sets the ClientLastContactTime
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionDiagnosticsVariableModel.CreateMonitoredItemsCount">
            <summary>
            Gets or sets the CreateMonitoredItemsCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionDiagnosticsVariableModel.CreateSubscriptionCount">
            <summary>
            Gets or sets the CreateSubscriptionCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionDiagnosticsVariableModel.CurrentMonitoredItemsCount">
            <summary>
            Gets or sets the CurrentMonitoredItemsCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionDiagnosticsVariableModel.CurrentPublishRequestsInQueue">
            <summary>
            Gets or sets the CurrentPublishRequestsInQueue
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionDiagnosticsVariableModel.CurrentSubscriptionsCount">
            <summary>
            Gets or sets the CurrentSubscriptionsCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionDiagnosticsVariableModel.DeleteMonitoredItemsCount">
            <summary>
            Gets or sets the DeleteMonitoredItemsCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionDiagnosticsVariableModel.DeleteNodesCount">
            <summary>
            Gets or sets the DeleteNodesCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionDiagnosticsVariableModel.DeleteReferencesCount">
            <summary>
            Gets or sets the DeleteReferencesCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionDiagnosticsVariableModel.DeleteSubscriptionsCount">
            <summary>
            Gets or sets the DeleteSubscriptionsCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionDiagnosticsVariableModel.EndpointUrl">
            <summary>
            Gets or sets the EndpointUrl
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionDiagnosticsVariableModel.HistoryReadCount">
            <summary>
            Gets or sets the HistoryReadCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionDiagnosticsVariableModel.HistoryUpdateCount">
            <summary>
            Gets or sets the HistoryUpdateCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionDiagnosticsVariableModel.LocaleIds">
            <summary>
            Gets or sets the LocaleIds
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionDiagnosticsVariableModel.MaxResponseMessageSize">
            <summary>
            Gets or sets the MaxResponseMessageSize
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionDiagnosticsVariableModel.ModifyMonitoredItemsCount">
            <summary>
            Gets or sets the ModifyMonitoredItemsCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionDiagnosticsVariableModel.ModifySubscriptionCount">
            <summary>
            Gets or sets the ModifySubscriptionCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionDiagnosticsVariableModel.PublishCount">
            <summary>
            Gets or sets the PublishCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionDiagnosticsVariableModel.QueryFirstCount">
            <summary>
            Gets or sets the QueryFirstCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionDiagnosticsVariableModel.QueryNextCount">
            <summary>
            Gets or sets the QueryNextCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionDiagnosticsVariableModel.ReadCount">
            <summary>
            Gets or sets the ReadCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionDiagnosticsVariableModel.RegisterNodesCount">
            <summary>
            Gets or sets the RegisterNodesCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionDiagnosticsVariableModel.RepublishCount">
            <summary>
            Gets or sets the RepublishCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionDiagnosticsVariableModel.ServerUri">
            <summary>
            Gets or sets the ServerUri
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionDiagnosticsVariableModel.SessionId">
            <summary>
            Gets or sets the SessionId
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionDiagnosticsVariableModel.SessionName">
            <summary>
            Gets or sets the SessionName
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionDiagnosticsVariableModel.SetMonitoringModeCount">
            <summary>
            Gets or sets the SetMonitoringModeCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionDiagnosticsVariableModel.SetPublishingModeCount">
            <summary>
            Gets or sets the SetPublishingModeCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionDiagnosticsVariableModel.SetTriggeringCount">
            <summary>
            Gets or sets the SetTriggeringCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionDiagnosticsVariableModel.TotalRequestCount">
            <summary>
            Gets or sets the TotalRequestCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionDiagnosticsVariableModel.TransferSubscriptionsCount">
            <summary>
            Gets or sets the TransferSubscriptionsCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionDiagnosticsVariableModel.TranslateBrowsePathsToNodeIdsCount">
            <summary>
            Gets or sets the TranslateBrowsePathsToNodeIdsCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionDiagnosticsVariableModel.UnauthorizedRequestCount">
            <summary>
            Gets or sets the UnauthorizedRequestCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionDiagnosticsVariableModel.UnregisterNodesCount">
            <summary>
            Gets or sets the UnregisterNodesCount
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionDiagnosticsVariableModel.WriteCount">
            <summary>
            Gets or sets the WriteCount
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.SessionSecurityDiagnosticsArrayModel">
            <summary>
            This complex variable type is used for diagnostic information.
            </summary>
            <remarks>
            For each entry of the array instances of this type will provide a variable of
            the <see cref="T:UnifiedAutomation.UaServer.SessionSecurityDiagnosticsModel"/>
            variable type, having the SessionSecurityDiagnostics as browse name. Those
            variables will also be referenced by the SessionDiagnostics objects defined by
            the <see cref="T:UnifiedAutomation.UaServer.SessionDiagnosticsObjectModel"/>.
            Since this information is security related, it should not be made accessible to
            all users, but only to authorised users.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SessionSecurityDiagnosticsArrayModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.SessionSecurityDiagnosticsArrayModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SessionSecurityDiagnosticsArrayModel.#ctor(UnifiedAutomation.UaServer.SessionSecurityDiagnosticsArrayModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.SessionSecurityDiagnosticsArrayModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionSecurityDiagnosticsArrayModel.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.SessionSecurityDiagnosticsModel">
            <summary>
            This complex variable type is used for diagnostic information.
            </summary>
            <remarks>
            Its data variables reflect its data type, having the same semantic (see
            <see cref="T:UnifiedAutomation.UaBase.SessionSecurityDiagnosticsDataType"/>).
            Since this information is security-related, it should not be made accessible to
            all users, but only to authorised users.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SessionSecurityDiagnosticsModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.SessionSecurityDiagnosticsModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SessionSecurityDiagnosticsModel.#ctor(UnifiedAutomation.UaServer.SessionSecurityDiagnosticsModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.SessionSecurityDiagnosticsModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionSecurityDiagnosticsModel.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionSecurityDiagnosticsModel.AuthenticationMechanism">
            <summary>
            Gets or sets the AuthenticationMechanism
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionSecurityDiagnosticsModel.ClientCertificate">
            <summary>
            Gets or sets the ClientCertificate
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionSecurityDiagnosticsModel.ClientUserIdHistory">
            <summary>
            Gets or sets the ClientUserIdHistory
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionSecurityDiagnosticsModel.ClientUserIdOfSession">
            <summary>
            Gets or sets the ClientUserIdOfSession
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionSecurityDiagnosticsModel.Encoding">
            <summary>
            Gets or sets the Encoding
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionSecurityDiagnosticsModel.SecurityMode">
            <summary>
            Gets or sets the SecurityMode
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionSecurityDiagnosticsModel.SecurityPolicyUri">
            <summary>
            Gets or sets the SecurityPolicyUri
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionSecurityDiagnosticsModel.SessionId">
            <summary>
            Gets or sets the SessionId
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionSecurityDiagnosticsModel.TransportProtocol">
            <summary>
            Gets or sets the TransportProtocol
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.StateVariableModel">
            <summary>
            The base VariableType for Variables that store the current state of a
            StateMachine as a human readable name.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.StateVariableModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.StateVariableModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.StateVariableModel.#ctor(UnifiedAutomation.UaServer.StateVariableModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.StateVariableModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.StateVariableModel.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.StateVariableModel.EffectiveDisplayName">
            <summary>
            Contains a human readable name for the current state of the state machine after
            taking the state of any SubStateMachines in account.
            </summary>
            <remarks>
            There is no rule specified for which state or sub-state should be used. It is
            up to the Server and will depend on the semantics of the StateMachineType.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.StateVariableModel.Id">
            <summary>
            A name which uniquely identifies the current state within the StateMachineType.
            </summary>
            <remarks>
            A subtype may restrict the DataType.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.StateVariableModel.Name">
            <summary>
            A QualifiedName which uniquely identifies the current state within the
            StateMachineType.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.StateVariableModel.Number">
            <summary>
            An integer which uniquely identifies the current state within the
            StateMachineType.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.FiniteStateVariableModel">
             <remarks>
             The FiniteStateVariableType is a subtype of StateVariableType and is used to
             store the current state of a FiniteStateMachine as a human readable name. It
             inherits the Properties Id, Name, and Number from the StateVariableType.
            
             The optional Name Property is inherited from StateVariableType. Its Value shall
             be the BrowseName of one of the State objects of the FiniteStateMachineType.
            
             The optional Number Property is inherited from StateVariableType. Its Value
             shall be the StateNumber for one of the State objects of the
             FiniteStateMachineType.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FiniteStateVariableModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.FiniteStateVariableModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FiniteStateVariableModel.#ctor(UnifiedAutomation.UaServer.FiniteStateVariableModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.FiniteStateVariableModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.FiniteStateVariableModel.Id">
            <remarks>
            The Property Id shall be the NodeId of one of the State objects of the
            FiniteStateMachineType.
            </remarks>
        </member>
        <member name="T:UnifiedAutomation.UaServer.TwoStateVariableModel">
             <remarks>
             Most states defined in the OPC UA Specification are simple – i.e. they are
             either TRUE or FALSE. The TwoStateVariableType is introduced specifically for
             this use case. More complex states are modelled by using a StateMachineType.
             The TwoStateVariableType is derived from the StateVariableType. The Value
             Attribute of a TwoStateVariable contains the current state as a human readable
             name. The EnabledState for example, might contain the name “Enabled” when TRUE
             and “Disabled” when FALSE.
            
             The optional Property EffectiveDisplayName from the StateVariableType is used
             if a state has substates. It contains a human readable name for the current
             state after taking the state of any SubStateMachines in account. As an example,
             the EffectiveDisplayName of the EnabledState could contain “Active/HighHigh” to
             specify that the Condition is active and has exceeded the HighHigh limit.
            
             \todo Mention References HasTrueSubState and HasFalseSubState?
            
             A HasTrueSubState Reference is used to indicate that the TRUE state has
             substates.
            
             A HasFalseSubState Reference is used to indicate that the FALSE state has
             substates.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TwoStateVariableModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.TwoStateVariableModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TwoStateVariableModel.#ctor(UnifiedAutomation.UaServer.TwoStateVariableModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.TwoStateVariableModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.TwoStateVariableModel.EffectiveTransitionTime">
            <summary>
            EffectiveTransitionTime specifies the time when the current state or one of its
            substates was entered.
            </summary>
            <remarks>
            If, for example, a LevelAlarm is active and – while active – switches several
            times between High and HighHigh, then the TransitionTime stays at the point in
            time where the Alarm became active whereas the EffectiveTransitionTime changes
            with each shift of a substate.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.TwoStateVariableModel.FalseState">
            <summary>
            TrueState and FalseState contain the localized string for the TwoStateVariable
            value when its Id Property has the value TRUE or FALSE, respectively.
            </summary>
            <remarks>
            Since the two Properties provide metadata for the Type, Servers may not allow
            these Properties to be selected in the Event filter for a monitored item.
            Clients can use the Read Service to get the information from the specific
            ConditionType.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.TwoStateVariableModel.Id">
            <summary>
            The Property Id shall be the current state, i.e. either TRUE or FALSE.
            </summary>
            <remarks>
            Id is inherited from the StateVariableType and overridden to reflect the
            required DataType (Boolean).
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.TwoStateVariableModel.TransitionTime">
            <summary>
            TransitionTime specifies the time when the current state was entered.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.TwoStateVariableModel.TrueState">
            <summary>
            TrueState and FalseState contain the localized string for the TwoStateVariable
            value when its Id Property has the value TRUE or FALSE, respectively.
            </summary>
            <remarks>
            Since the two Properties provide meta-data for the Type, Servers may not allow
            these Properties to be selected in the Event filter for a monitored item.
            Clients can use the Read Service to get the information from the specific
            ConditionType.
            </remarks>
        </member>
        <member name="T:UnifiedAutomation.UaServer.SubscriptionDiagnosticsArrayModel">
            <summary>
            This complex variable type is used for diagnostic information.
            </summary>
            <remarks>
            For each entry of the array, instances of this type will provide a Variable of
            the <see cref="T:UnifiedAutomation.UaServer.SubscriptionDiagnosticsModel"/>
            variable type having the SubscriptionId as browse name.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SubscriptionDiagnosticsArrayModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.SubscriptionDiagnosticsArrayModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SubscriptionDiagnosticsArrayModel.#ctor(UnifiedAutomation.UaServer.SubscriptionDiagnosticsArrayModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.SubscriptionDiagnosticsArrayModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SubscriptionDiagnosticsArrayModel.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.TransitionVariableModel">
            <summary>
            The base VariableType for Variables that store a Transition that occurred
            within a StateMachine as a human readable name.
            </summary>
            <remarks>
            The SourceTimestamp for the value specifies when the Transition occurred. This
            value may also be exposed with the TransitionTime Property.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TransitionVariableModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.TransitionVariableModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TransitionVariableModel.#ctor(UnifiedAutomation.UaServer.TransitionVariableModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.TransitionVariableModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.TransitionVariableModel.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.TransitionVariableModel.EffectiveTransitionTime">
            <summary>
            Specifies the time when the current state or one of its substates was entered.
            </summary>
            <remarks>
            If, for example, a StateA is active and – while active – switches several times
            between its substates SubA and SubB, then the TransitionTime stays at the point
            in time where StateA became active whereas the EffectiveTransitionTime changes
            with each change of a substate.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.TransitionVariableModel.Id">
            <summary>
            A name which uniquely identifies a Transition within the StateMachineType.
            </summary>
            <remarks>
            A subtype may restrict the DataType.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.TransitionVariableModel.Name">
            <summary>
            A QualifiedName which uniquely identifies a transition within the
            StateMachineType.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.TransitionVariableModel.Number">
            <summary>
            An integer which uniquely identifies a transition within the StateMachineType.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.TransitionVariableModel.TransitionTime">
            <summary>
            Specifies when the transition occurred.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.FiniteTransitionVariableModel">
             <summary>
             Used to store a Transition that occurred within a FiniteStateMachine as a human
             readable name
             </summary>
             <remarks>
             The FiniteTransitionVariableType is a subtype of TransitionVariableType. It
             inherits the Properties Id, Name, and Number from the StateVariableType.
            
             The optional Name Property is inherited from the TransitionVariableType. Its
             Value shall be the BrowseName of one of the Transition objects of the
             FiniteStateMachineType.
            
             The optional Number Property is inherited from the TransitionVariableType. Its
             Value shall be the TransitionNumber for one of the Transition objects of the
             FiniteStateMachineType.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FiniteTransitionVariableModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.FiniteTransitionVariableModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FiniteTransitionVariableModel.#ctor(UnifiedAutomation.UaServer.FiniteTransitionVariableModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.FiniteTransitionVariableModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.FiniteTransitionVariableModel.Id">
            <summary>
            The NodeId of one of the Transition objects of the FiniteStateMachineType.
            </summary>
            <remarks>
            The property Id is inherited from the TransitionVariableType and overridden to
            reflect the required DataType.
            </remarks>
        </member>
        <member name="T:UnifiedAutomation.UaServer.PropertyModel">
             <summary>
             This VariableType is used as the type definition for all Properties.
             </summary>
             <remarks>
             Properties are defined by their BrowseName and therefore they do not need a
             specialised type definition. It is not allowed to subtype this VariableType.
             The PropertyType is a subtype of the BaseVariableType.
            
             There are no References specified for this VariableType.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.PropertyModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.PropertyModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.PropertyModel.#ctor(UnifiedAutomation.UaServer.PropertyModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.PropertyModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.PropertyModel`1">
            <summary>
            A typed object which represents a PropertyType.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.PropertyModel`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.PropertyModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.PropertyModel`1.#ctor(UnifiedAutomation.UaServer.PropertyModel{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.PropertyModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.PropertyModel`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.CreateTypeDictionarySettings">
            <summary>
            A class which is used to create new type dictionary nodes.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.CreateTypeDictionarySettings.NamespaceUriForSchema">
            <summary>
            The namespace URI for the dictionary.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.CreateTypeDictionarySettings.NamespaceUriForNodes">
            <summary>
            The namespace URI for the data type and encoding node ids.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.CreateTypeDictionarySettings.BrowseName">
            <summary>
            The browse name for the dictionary nodes.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.CreateTypeDictionarySettings.XmlDictionaryNodeId">
            <summary>
            The id for node which exposes the XML Schema dictionary.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.CreateTypeDictionarySettings.BinaryDictionaryNodeId">
            <summary>
            The id for node which exposes the OPC Binary dictionary.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.AddNodeSettings">
            <summary>
            The parameters used to add a new node to the server address space.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AddNodeSettings.BrowseName">
            <summary>
            Gets or sets the browse name of the new node.
            </summary>
            <value>
            The the browse name of the new node.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AddNodeSettings.ParentNodeId">
            <summary>
            Gets or sets the parent node id.
            </summary>
            <value>
            The parent node id.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AddNodeSettings.ReferenceTypeId">
            <summary>
            Gets or sets the reference type id.
            </summary>
            <value>
            The reference type id.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AddNodeSettings.TypeDefinitionId">
            <summary>
            Gets or sets the type definition id.
            </summary>
            <value>
            The type definition id.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AddNodeSettings.RequestedNodeId">
            <summary>
            Gets or sets the requested node id.
            </summary>
            <value>
            The requested node id.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AddNodeSettings.Attributes">
            <summary>
            Gets or sets the attributes.
            </summary>
            <value>
            The attributes.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AddNodeSettings.OptionalBrowsePaths">
            <summary>
            Gets or sets the optional browse paths.
            </summary>
            <value>
            The optional browse paths.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.AddNodeSettings.Persistent">
            <summary>
            Gets or sets a value indicating whether the Node is available after a server restart.
            </summary>
            <value>
              <c>true</c> if persistent; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.CreateNodeSettings">
            <summary>
            The settings used to create a new in-memory node.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.CreateNodeSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.CreateNodeSettings" /> class.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CreateNodeSettings.ParentNodeId">
            <summary>
            Gets or sets the parent node id.
            </summary>
            <value>
            The parent node id.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CreateNodeSettings.ReferenceTypeId">
            <summary>
            Gets or sets the reference type id.
            </summary>
            <value>
            The reference type id.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CreateNodeSettings.RequestedNodeId">
            <summary>
            Gets or sets the requested node id.
            </summary>
            <value>
            The requested node id.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CreateNodeSettings.BrowseName">
            <summary>
            Gets or sets the name of the browse.
            </summary>
            <value>
            The name of the browse.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CreateNodeSettings.DisplayName">
            <summary>
            Gets or sets the display name.
            </summary>
            <value>
            The display name.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CreateNodeSettings.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CreateNodeSettings.NodeData">
            <summary>
            Gets or sets the node data.
            </summary>
            <value>
            The node data.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.CreateInstanceSettings">
            <summary>
            The settings used to create a new in-memory instance node.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CreateInstanceSettings.TypeDefinitionId">
            <summary>
            Gets or sets the type definition id.
            </summary>
            <value>
            The type definition id.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CreateInstanceSettings.ModellingRuleId">
            <summary>
            Gets or sets the modelling rule id.
            </summary>
            <value>
            The modelling rule id.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CreateInstanceSettings.OptionalBrowsePaths">
            <summary>
            Gets or sets the optional browse paths.
            </summary>
            <value>
            The optional browse paths.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CreateInstanceSettings.ParentAsOwner">
            <summary>
            Indicates if the parent specifified by ParentNodeId takes the ownership of the new instance.
            If set to 'true', the instance will be deleted if the parent is deleted.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.CreateObjectSettings">
            <summary>
            The settings used to create a new in-memory object node.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.CreateObjectSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.CreateObjectSettings" /> class.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CreateObjectSettings.NotifierParent">
            <summary>
            Gets or sets the notifier parent.
            </summary>
            <value>
            The notifier parent.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CreateObjectSettings.EventNotifier">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.CreateVariableSettings">
            <summary>
            The settings used to create a new in-memory variable node.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.CreateVariableSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.CreateVariableSettings" /> class.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CreateVariableSettings.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CreateVariableSettings.DataType">
            <summary>
            Gets or sets the type of the data.
            </summary>
            <value>
            The type of the data.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CreateVariableSettings.ValueRank">
            <summary>
            Gets or sets the value rank.
            </summary>
            <value>
            The value rank.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CreateVariableSettings.ArrayDimensions">
            <summary>
            Gets or sets the array dimensions.
            </summary>
            <value>
            The array dimensions.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CreateVariableSettings.AccessLevel">
            <summary>
            Gets or sets the access level.
            </summary>
            <value>
            The access level.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CreateVariableSettings.MinimumSamplingInterval">
            <summary>
            Gets or sets the minimum sampling interval.
            </summary>
            <value>
            The minimum sampling interval.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CreateVariableSettings.Historizing">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:UnifiedAutomation.UaServer.CreateVariableSettings" /> is historizing.
            </summary>
            <value>
              <c>true</c> if historizing; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CreateVariableSettings.AccessLevelEx">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:UnifiedAutomation.UaServer.CreateVariableSettings" /> is historizing.
            </summary>
            <value>
              <c>true</c> if historizing; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CreateVariableSettings.ValueType">
            <summary>
            Gets or sets the type of the value.
            </summary>
            <remarks>
            The ValueType should only be set together with ValueData.
            ValueType and ValueData create the variable configuration which controls how the NodeManager
            handles I/O for the variable value.
            The class NodeHandleType defines standard values which can be passed as the ValueType.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CreateVariableSettings.ValueData">
            <summary>
            Gets or sets the value data.
            </summary>
            <remarks>
            The ValueType should only be set together with ValueData.
            ValueType and ValueData create the variable configuration which controls how the NodeManager
            handles I/O for the variable value.
            The ValueData is passed as the UserData of the NodeAttributeHandle. The use case of this
            data is getting access to a data source.
            </remarks>
        </member>
        <member name="T:UnifiedAutomation.UaServer.CreateMethodSettings">
            <summary>
            The settings used to create a new in-memory method node.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.CreateMethodSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.CreateMethodSettings" /> class.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CreateMethodSettings.InputArguments">
            <summary>
            Gets or sets the input arguments.
            </summary>
            <value>
            The input arguments.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CreateMethodSettings.OutputArguments">
            <summary>
            Gets or sets the onput arguments.
            </summary>
            <value>
            The onput arguments.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CreateMethodSettings.Executable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:UnifiedAutomation.UaServer.CreateMethodSettings" /> is executable.
            </summary>
            <value>
              <c>true</c> if executable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.CreateViewSettings">
            <summary>
            The settings used to create a new in-memory view node.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.CreateViewSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.CreateViewSettings" /> class.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CreateViewSettings.ContainsNoLoops">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:UnifiedAutomation.UaServer.CreateViewSettings" /> is contains loops.
            </summary>
            <value>
              <c>true</c> if the view contains loops; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.CreateTypeSettings">
            <summary>
            The settings used to create a new in-memory instance node.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.CreateTypeSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.CreateTypeSettings" /> class.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CreateTypeSettings.SuperTypeId">
            <summary>
            Gets or sets the super type id.
            </summary>
            <value>
            The super type id.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.CreateObjectTypeSettings">
            <summary>
            The settings used to create a new in-memory object type node.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.CreateObjectTypeSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.CreateObjectTypeSettings" /> class.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CreateObjectTypeSettings.IsAbstract">
            <summary>
            Gets or sets a value indicating whether this type is abstract.
            </summary>
            <value>
              <c>true</c> if the type is abstract; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.CreateVariableTypeSettings">
            <summary>
            The settings used to create a new in-memory variable type node.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.CreateVariableTypeSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.CreateVariableTypeSettings" /> class.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CreateVariableTypeSettings.IsAbstract">
            <summary>
            Gets or sets a value indicating whether this type is abstract.
            </summary>
            <value>
              <c>true</c> if the type is abstract; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CreateVariableTypeSettings.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CreateVariableTypeSettings.DataType">
            <summary>
            Gets or sets the type of the data.
            </summary>
            <value>
            The type of the data.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CreateVariableTypeSettings.ValueRank">
            <summary>
            Gets or sets the value rank.
            </summary>
            <value>
            The value rank.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CreateVariableTypeSettings.ArrayDimensions">
            <summary>
            Gets or sets the array dimensions.
            </summary>
            <value>
            The array dimensions.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.CreateDataTypeSettings">
            <summary>
            The settings used to create a new in-memory data type node.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.CreateDataTypeSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.CreateObjectTypeSettings" /> class.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CreateDataTypeSettings.IsAbstract">
            <summary>
            Gets or sets a value indicating whether this type is abstract.
            </summary>
            <value>
              <c>true</c> if the type is abstract; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CreateDataTypeSettings.DataTypeDefinition">
            <summary>
            Gets or sets the DataTypeDefinition settings.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.CreateReferenceTypeSettings">
            <summary>
            The settings used to create a new in-memory reference type node.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.CreateReferenceTypeSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.CreateReferenceTypeSettings" /> class.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CreateReferenceTypeSettings.IsAbstract">
            <summary>
            Gets or sets a value indicating whether this type is abstract.
            </summary>
            <value>
              <c>true</c> if the type is abstract; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CreateReferenceTypeSettings.Symmetric">
            <summary>
            Gets or sets a value indicating whether this type is symmetric.
            </summary>
            <value>
              <c>true</c> if the type is symmetric; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.CreateReferenceTypeSettings.InverseName">
            <summary>
            Gets or sets the inverse name.
            </summary>
            <value>
            The inverse name.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.NodeIdGenerationSettings">
            <summary>
            The settings that control how NodeIds are created by the node manager.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.NodeIdGenerationSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.NodeIdGenerationSettings" /> class.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.NodeIdGenerationSettings.NextNumericId">
            <summary>
            Gets or sets the next numeric id.
            </summary>
            <value>
            The next numeric id.
            </value>
            <remarks>
            This value is incremented each time a numeric id is created.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.NodeIdGenerationSettings.AutogeneratedIdType">
            <summary>
            Gets or sets the IdType to use for autogenerated NodeIds.
            </summary>
            <value>
            The type for autogenerated NodeIds.
            </value>
            <remarks>
            Creating Numeric NodeIds increments the NextNumericId property.
            Other types of NodeIds generate a Guid.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.NodeIdGenerationSettings.ComponentDelimiter">
            <summary>
            Gets or sets the component delimiter.
            </summary>
            <value>
            The component delimiter.
            </value>
            <remarks>
            If a String NodeId is provided for a root object or variable the NodeIds for all
            components nodes are constructed by appending this value and the BrowseName.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.NodeIdGenerationSettings.FirstComponentDelimiter">
            <summary>
            Gets or sets the first component delimiter.
            </summary>
            <value>
            The first component delimiter.
            </value>
            <remarks>
            If specified this is the delimiter used before the first component name appended to
            the root NodeId. Additional component names are appended with the ComponentDelimiter.
            </remarks>
        </member>
        <member name="T:UnifiedAutomation.UaServer.BaseNodeManagerEx">
            <summary>
            EXPERIMENTAL: This type is a prototype for a not released feature.
            The type is subject to change. Do not use this type in a product.
            </summary>
            <remarks>
            A subtype of BaseNodeManager with an enhanced toolkit API for variables with HandleType = ExternalPolled
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManagerEx.#ctor(UnifiedAutomation.UaServer.ServerManager,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.BaseNodeManagerEx"/> class.
            </summary>
            <param name="server">The server.</param>
            <param name="namespaceUris">The namespace uris.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManagerEx.OnMonitoringChanged(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.NodeAttributeHandle,System.Double,System.Double)">
            <summary>
            Called when monitoring status changes for variable with a HandleType = ExternalPolled.
            </summary>
            <param name="context">The context.</param>
            <param name="nodeHandle">The node handle.</param>
            <param name="oldSamplingInterval">The old mininum sampling interval among all enabled monitored items. MinimumSamplingIntervals.Indeterminate if all monitored items were disabled.</param>
            <param name="newSamplingInterval">The new mininum sampling interval among all enabled monitored items. MinimumSamplingIntervals.Indeterminate if all monitored items are disabled.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManagerEx.ReportChange(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.NodeAttributeHandle,UnifiedAutomation.UaBase.DataValue)">
            <summary>
            Reports a change to the value of a variable with a HandleType = ExternalPolled.
            </summary>
            <param name="context">The context.</param>
            <param name="nodeHandle">The node handle.</param>
            <param name="dv">The data value to report.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManagerEx.ReportStatusChange(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.NodeAttributeHandle,UnifiedAutomation.UaBase.StatusCode)">
            <summary>
            Reports a change to the value of a variable with a HandleType = ExternalPolled.
            </summary>
            <param name="context">The context.</param>
            <param name="nodeHandle">The node handle.</param>
            <param name="status">The status to report.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManagerEx.GetNodeHandle(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,System.UInt32,UnifiedAutomation.UaServer.NodeAttributeHandle@)">
            <summary>
            Gets the node handle.
            </summary>
            <param name="context">The context.</param>
            <param name="nodeId">The node identifier.</param>
            <param name="attributeId">The attribute identifier.</param>
            <param name="handle">The handle.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManagerEx.Read(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.NodeAttributeHandle,System.String,UnifiedAutomation.UaBase.QualifiedName)">
            <summary>
            Reads a variable.
            </summary>
            <param name="context">The context.</param>
            <param name="nodeHandle">The node handle.</param>
            <param name="indexRange">The index range.</param>
            <param name="dataEncoding">The data encoding.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManagerEx.StartDataMonitoring(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MonitoredItemHandle,UnifiedAutomation.UaBase.MonitoredItemCreateRequest,UnifiedAutomation.UaServer.DataChangeEventHandler)">
            <summary>
            Starts monitoring a variable.
            </summary>
            <param name="context">The context.</param>
            <param name="itemHandle">The item handle.</param>
            <param name="settings">The settings.</param>
            <param name="callback">The callback.</param>
            <returns>The result of the operation. NULL if the operation was not procesed by the method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManagerEx.ModifyDataMonitoring(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MonitoredItemHandle,UnifiedAutomation.UaBase.MonitoredItemModifyRequest)">
            <summary>
            Modifies the monitoring for the variable.
            </summary>
            <param name="context">The context.</param>
            <param name="itemHandle">The item handle.</param>
            <param name="settings">The settings.</param>
            <returns>The result of the operation. NULL if the operation was not procesed by the method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManagerEx.StopDataMonitoring(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MonitoredItemHandle)">
            <summary>
            Stops monitoring a variable.
            </summary>
            <param name="context">The context.</param>
            <param name="itemHandle">The item handle.</param>
            <returns>The result of the operation. NULL if the operation was not procesed by the method.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseNodeManagerEx.SetDataMonitoringMode(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MonitoredItemHandle,UnifiedAutomation.UaBase.MonitoringMode,UnifiedAutomation.UaBase.MonitoringParameters)">
            <summary>
            Sets the data monitoring mode.
            </summary>
            <param name="context">The context.</param>
            <param name="itemHandle">The item handle.</param>
            <param name="monitoringMode">The monitoring mode.</param>
            <param name="parameters">The parameters.</param>
            <returns>The result of the operation. NULL if the operation was not procesed by the method.</returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ExternalDataSourceMonitoredItem">
            <summary>
            A MonitoredItem for an external a Variable representing an external DataSource
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.ExternalDataSourceMonitoredItem.ItemHandle">
            <summary>
            The item handle
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.ExternalDataSourceMonitoredItem.IndexRange">
            <summary>
            The index range
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.ExternalDataSourceMonitoredItem.DataEncoding">
            <summary>
            The data encoding
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.ExternalDataSourceMonitoredItem.SamplingInterval">
            <summary>
            The sampling interval
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.ExternalDataSourceMonitoredItem.MonitoringMode">
            <summary>
            The monitoring mode
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.ExternalDataSourceMonitoredItem.Callback">
            <summary>
            The data change callback
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ExternalDataSource">
            <summary>
            A base type which handles the MonitoredItems for a Variable representing an external DataSource.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ExternalDataSource.CachedValue">
            <summary>
            Gets or sets the cached value.
            </summary>
            <value>
            The cached value.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ExternalDataSource.MonitoredItems">
            <summary>
            Gets or sets the monitored items.
            </summary>
            <value>
            The monitored items.
            </value>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ExternalDataSource.StartMonitoring(UnifiedAutomation.UaServer.MonitoredItemHandle,System.String,UnifiedAutomation.UaBase.QualifiedName,System.Double,UnifiedAutomation.UaBase.MonitoringMode,UnifiedAutomation.UaServer.DataChangeEventHandler)">
            <summary>
            Adds a monitored item to the datasource.
            </summary>
            <param name="itemHandle">The item handle.</param>
            <param name="indexRange">The index range.</param>
            <param name="dataEncoding">The data encoding.</param>
            <param name="samplingInterval">The sampling interval.</param>
            <param name="monitoringMode">The monitoring mode.</param>
            <param name="callback">The callback.</param>
            <returns>The shortest sampling interval. MinimumSamplingIntervals.Indeterminate if all monitored items are disabled.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ExternalDataSource.ModifyMonitoring(System.UInt32,System.Double)">
            <summary>
            Modifies the monitoring for for a monitored item belonging to the datasource.
            </summary>
            <param name="monitoredItemId">The monitored item id.</param>
            <param name="samplingInterval">The new sampling interval.</param>
            <returns>
            The shortest sampling interval. MinimumSamplingIntervals.Indeterminate if all monitored items are disabled.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ExternalDataSource.SetMonitoringMode(System.UInt32,UnifiedAutomation.UaBase.MonitoringMode)">
            <summary>
            Changes the monitoring mode for a monitored item belonging to the datasource.
            </summary>
            <param name="monitoredItemId">The monitored item id.</param>
            <param name="monitoringMode">The monitoring mode.</param>
            <returns>The shortest sampling interval. MinimumSamplingIntervals.Indeterminate if all monitored items are disabled.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ExternalDataSource.StopMonitoring(System.UInt32)">
            <summary>
            Removes a monitoring items from the datasource.
            </summary>
            <param name="monitoredItemId">The monitored item id.</param>
            <returns>The shortest sampling interval. MinimumSamplingIntervals.Indeterminate if all monitored items are disabled.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ExternalDataSource.GetMinSamplingInterval">
            <summary>
            Gets the shortest sampling interval.
            </summary>
            <returns>The shortest sampling interval. MinimumSamplingIntervals.Indeterminate if all monitored items are disabled.</returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.HistoryDataRawReader">
            <summary>
            A class which manages reading from data from an archive.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.HistoryDataRawReader.Initialize(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.IHistoryDataSource,UnifiedAutomation.UaBase.ReadRawModifiedDetails)">
            <summary>
            Initializes the specified context.
            </summary>
            <param name="context">The context.</param>
            <param name="datasource">The datasource.</param>
            <param name="details">The details.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.HistoryDataRawReader.Next">
            <summary>
            Moves the position to the next data value.
            </summary>
            <returns>
            True if successful, false if there is no more data.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.HistoryDataRawReader.Back">
            <summary>
            Moves the position to the next data value.
            </summary>
            <returns>
            True if successful, false if there is no more data.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.HistoryDataRawReader.Move(System.DateTime,System.Boolean,System.Boolean)">
            <summary>
            Resets the reader to the specified timestamp.
            </summary>
            <param name="timestamp">The timestamp.</param>
            <param name="treatUncertainAsBad">if set to <c>true</c> then treat uncertain values as bad values.</param>
            <param name="useSimpleBounds">if set to <c>true</c> then use simple bounds.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.HistoryDataRawReader.GetValue">
            <summary>
            Get the value at the current position.
            </summary>
            <returns>
            The value, null if there is no data.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.HistoryDataRawReader.GetModificationInfo">
            <summary>
            Gets the modification info for the value at the current position.
            </summary>
            <returns>
            The modification info, null if no data exists.
            </returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.HistoryDataReadContinuationPoint">
            <summary>
            Stores a read history request.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.HistoryDataReadContinuationPoint.ApplyIndexRangeAndEncoding">
            <summary>
            The apply index range and encoding
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.HistoryDataReadContinuationPoint.IndexRange">
            <summary>
            The index range
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.HistoryDataReadContinuationPoint.DataEncoding">
            <summary>
            The data encoding
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.HistoryDataReadContinuationPoint.Reader">
            <summary>
            The reader
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.HistoryDataReadRawContinuationPoint">
            <summary>
            Stores a read history request.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.HistoryDataReadRawContinuationPoint.IsReadModified">
            <summary>
            True if reading modified data.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.HistoryDataReadRawContinuationPoint.NumValuesPerNode">
            <summary>
            The num values per node
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.HistoryDataReadRawContinuationPoint.SavedValue">
            <summary>
            The saved value
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.HistoryDataReadProcessedContinuationPoint">
            <summary>
            Stores a read history request.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.HistoryDataReadProcessedContinuationPoint.Calculator">
            <summary>
            The calculator
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.HistoryDataReadAtTimeContinuationPoint">
            <summary>
            Stores a read history request.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.HistoryDataReadAtTimeContinuationPoint.ReqTimes">
            <summary>
            The requested times.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.HistoryDataReadAtTimeContinuationPoint.Stepped">
            <summary>
            Whether use stepped interpolation.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.HistoryDataReadAtTimeContinuationPoint.UseSimpleBounds">
            <summary>
            Whether to use simple bounds
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.InMemoryHistoryDataSource">
            <summary>
            An in-memory history data source.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.InMemoryHistoryDataSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.InMemoryHistoryDataSource"/> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.InMemoryHistoryDataSource.Insert(UnifiedAutomation.UaBase.Variant,UnifiedAutomation.UaBase.StatusCode,System.DateTime)">
            <summary>
            Inserts the specified value in the history.
            </summary>
            <param name="value">The value.</param>
            <param name="status">The status.</param>
            <param name="timestamp">The timestamp.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.InMemoryHistoryDataSource.GetEnumerator(UnifiedAutomation.UaServer.RequestContext,System.DateTime)">
            <summary>
            Begins iterating the historical values for a datasource.
            </summary>
            <param name="context"></param>
            <param name="timestamp">The timestamp where the iterating begins.</param>
            <returns>
            A iterator object that can be used to navigate the archive.
            </returns>
            <remarks>
            An iterator that points to the first value if multiple values exist at the timestamp.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.InMemoryHistoryDataSource.Enumerator.Reset(System.DateTime)">
            <summary>
            Resets the specified timestamp.
            </summary>
            <param name="timestamp">The timestamp.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.NodeAttributeConfiguration">
            <summary>
            Stores the configuration for a node attribute stored in a BaseNodeManager.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.NodeAttributeConfiguration.Node">
            <summary>
            Gets or sets the in-memory node associated with the node attribute.
            </summary>
            <value>
            The node.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.NodeAttributeConfiguration.HandleType">
            <summary>
            Gets or sets the handle type.
            </summary>
            <value>
            The handle type
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.NodeAttributeConfiguration.HandleData">
            <summary>
            Gets or sets data associated with the handle.
            </summary>
            <value>
            The handle data.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.NodeHandleType">
            <summary>
            The basic handle types used by the BaseNodeManager.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.NodeHandleType.Internal">
            <summary>
            A handle for a node attribute stored in memory.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.NodeHandleType.InternalPolled">
            <summary>
            A handle for a node attribute stored in memory that must be polled when subscribed.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.NodeHandleType.ExternalPolled">
            <summary>
            A handle for a node attribute stored in an external system that must be polled when subscribed.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.NodeHandleType.ExternalPush">
            <summary>
            A handle for a node attribute stored in an external system pushes data changes when subscribed.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.NodeHandleType.VendorDefined">
            <summary>
            A vendor defined handle type that is treated as ExternalPush by default.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.NotifierManager">
            <summary>
            Manages the notifier heirarchy for a node manager.
            </summary>
            <remarks>
            This class allows event related operations to efficiently propagate up and down the hierarchy.
            The INotifierManagerCallback interface is used to receive notifications when an operation occurs.
            This class is part of the BaseNodeManager class.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.NotifierManager.#ctor(UnifiedAutomation.UaServer.ServerManager,UnifiedAutomation.UaServer.IEventManager,UnifiedAutomation.UaServer.INotifierManagerCallback)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.CrossReferenceManager"/> class.
            </summary>
            <param name="server">The server.</param>
            <param name="eventManager">The event manager.</param>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.NotifierManager.AddNotifier(UnifiedAutomation.UaBase.NodeId,System.Collections.Generic.IList{UnifiedAutomation.UaBase.NodeId})">
            <summary>
            Adds the remote notifier source.
            </summary>
            <param name="notifierId">The notifier id.</param>
            <param name="parentNotifierIds">The parent notifier ids.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.NotifierManager.RemoveNotifier(UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Removes the remote notifier source.
            </summary>
            <param name="notifierId">The notifier id.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.NotifierManager.AddNotifier(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.IEventManager)">
            <summary>
            Adds a notifier from another node manager
            </summary>
            <param name="notifierId">The notifier id.</param>
            <param name="manager">The manager.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.NotifierManager.RemoveNotifier(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.IEventManager)">
            <summary>
            Removes the notifier.
            </summary>
            <param name="notifierId">The notifier id.</param>
            <param name="manager">The manager.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.NotifierManager.IsNotifierForSource(UnifiedAutomation.UaServer.NotifierHandle,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Determines whether [is notifier for source] [the specified notifier handle].
            </summary>
            <param name="notifierHandle">The notifier handle.</param>
            <param name="sourceId">The source id.</param>
            <returns>
              <c>true</c> if [is notifier for source] [the specified notifier handle]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.NotifierManager.AddMonitoredItem(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.MonitoredItemHandle,UnifiedAutomation.UaBase.MonitoringMode,UnifiedAutomation.UaBase.MonitoringParameters,UnifiedAutomation.UaServer.EventNotificationEventHandler)">
            <summary>
            Gets the incoming references for the source.
            </summary>
            <param name="context">The context.</param>
            <param name="notifierId">The notifier id.</param>
            <param name="itemHandle">The item handle.</param>
            <param name="monitoringMode">The monitoring mode.</param>
            <param name="parameters">The parameters.</param>
            <param name="callback">The callback.</param>
            <exception cref="T:System.ArgumentNullException">
            notifierId
            or
            itemHandle
            or
            callback
            </exception>
        </member>
        <member name="M:UnifiedAutomation.UaServer.NotifierManager.ModifyMonitoredItem(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.MonitoredItemHandle,UnifiedAutomation.UaBase.MonitoringParameters)">
            <summary>
            Adds the monitored item.
            </summary>
            <param name="context">The context.</param>
            <param name="notifierId">The notifier id.</param>
            <param name="itemHandle">The item handle.</param>
            <param name="parameters">The parameters.</param>
            <exception cref="T:System.ArgumentNullException">
            notifierId
            or
            itemHandle
            </exception>
        </member>
        <member name="M:UnifiedAutomation.UaServer.NotifierManager.RemoveMonitoredItem(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.MonitoredItemHandle)">
            <summary>
            Removes the monitored item.
            </summary>
            <param name="context">The context.</param>
            <param name="notifierId">The notifier id.</param>
            <param name="itemHandle">The item handle.</param>
            <exception cref="T:System.ArgumentNullException">
            notifierId
            or
            itemHandle
            </exception>
        </member>
        <member name="M:UnifiedAutomation.UaServer.NotifierManager.SetMonitoringMode(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.MonitoredItemHandle,UnifiedAutomation.UaBase.MonitoringMode)">
            <summary>
            Sets the monitoring mode.
            </summary>
            <param name="context">The context.</param>
            <param name="notifierId">The notifier id.</param>
            <param name="itemHandle">The item handle.</param>
            <param name="monitoringMode">The monitoring mode.</param>
            <exception cref="T:System.ArgumentNullException">
            notifierId
            or
            itemHandle
            </exception>
        </member>
        <member name="M:UnifiedAutomation.UaServer.NotifierManager.ConditionRefresh(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.MonitoredItemHandle,UnifiedAutomation.UaServer.EventNotificationEventHandler)">
            <summary>
            Conditions the refresh.
            </summary>
            <param name="context">The context.</param>
            <param name="notifierId">The notifier id.</param>
            <param name="itemHandle">The item handle.</param>
            <param name="callback">The callback.</param>
            <exception cref="T:System.ArgumentNullException">
            notifierId
            or
            itemHandle
            or
            callback
            </exception>
        </member>
        <member name="M:UnifiedAutomation.UaServer.NotifierManager.ReportEvent(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Conditions the refresh.
            </summary>
            <param name="notifierId">The notifier id.</param>
            <param name="e">The e.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.INotifierManagerCallback">
            <summary>
            Used to receive notifications from the NotifierManager that the subscription state has changed.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.INotifierManagerCallback.OnMonitoringStarted(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.EventMonitoredItem)">
            <summary>
            Called when event monitoring has started for a notifier.
            </summary>
            <param name="notifierId">The notifier id.</param>
            <param name="monitoredItem">The monitored item.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.INotifierManagerCallback.OnMonitoringModified(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.EventMonitoredItem)">
            <summary>
            Called when event monitoring has been modified for a notifier.
            </summary>
            <param name="notifierId">The notifier id.</param>
            <param name="monitoredItem">The monitored item.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.INotifierManagerCallback.OnMonitoringStopped(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.EventMonitoredItem)">
            <summary>
            Called when event monitoring has stopped for a notifier.
            </summary>
            <param name="notifierId">The notifier id.</param>
            <param name="monitoredItem">The monitored item.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.INotifierManagerCallback.OnConditionRefresh(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.MonitoredItemHandle,UnifiedAutomation.UaServer.EventNotificationEventHandler)">
            <summary>
            Called when condition refresh has been called for the notifier.
            </summary>
            <param name="notifierId">The notifier id.</param>
            <param name="itemHandle">The item handle.</param>
            <param name="callback">The callback to use to report the current state of all conditions.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.EventMonitoredItem">
            <summary>
            Stores the state for an event monitored item.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.EventMonitoredItem.#ctor(UnifiedAutomation.UaServer.MonitoredItemHandle,UnifiedAutomation.UaBase.MonitoringMode,UnifiedAutomation.UaBase.MonitoringParameters,UnifiedAutomation.UaServer.EventNotificationEventHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.EventMonitoredItem"/> class.
            </summary>
            <param name="itemHandle">The item handle.</param>
            <param name="monitoringMode">The monitoring mode.</param>
            <param name="parameters">The parameters.</param>
            <param name="callback">The callback.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.EventMonitoredItem.ItemHandle">
            <summary>
            Gets the item handle.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.EventMonitoredItem.Callback">
            <summary>
            Gets the callback.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.EventMonitoredItem.MonitoringMode">
            <summary>
            Gets or sets the monitoring mode.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.EventMonitoredItem.Parameters">
            <summary>
            Gets or sets the monitoring mode.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.CoreNodeManager.#ctor(UnifiedAutomation.UaServer.ServerManager,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.CoreNodeManager"/> class.
            </summary>
            <param name="server">The server.</param>
            <param name="namespaceUris">The namespace uris.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.CoreNodeManager.Startup">
            <summary>
            Called when the node manager is started.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.CoreNodeManager.HasAccess(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.BrowseHandle)">
            <summary>
            Determines whether the specified context has access to the browse handle.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodeHandle">The node handle.</param>
            <returns>
            <c>true</c> if the specified context has access; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.CoreNodeManager.HasAccess(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.NodeAttributeHandle,UnifiedAutomation.UaServer.UserAccessMask)">
            <summary>
            Determines whether the current context has specified access to the handle.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodeHandle">The node handle.</param>
            <param name="accessMasks">The desired access masks.</param>
            <returns>
            <c>true</c>, if the specified context has access; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.CoreNodeManager.GetMethodDispatcher(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MethodHandle)">
            <summary>
            Gets the method handler.
            </summary>
            <param name="context">The request context.</param>
            <param name="methodHandle">The method handle.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.CoreNodeManager.SetGetHistoryEventHandleOverride(UnifiedAutomation.UaServer.GetHistoryEventHandleEventHandler)">
            <summary>
            Sets a delegate used to override the GetHistoryEventHandle method.
            </summary>
            <param name="handler">The handler.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.CoreNodeManager.GetHistoryEventHandle(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.HistoryEventHandle@)">
            <summary>
            Gets the history event handle.
            </summary>
            <param name="context">The context.</param>
            <param name="notifierId">The notifier identifier.</param>
            <param name="handle">The handle.</param>
            <returns>Good if successful; An appropriate error otherwise.</returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.GetHistoryEventHandleEventHandler">
            <summary>
            A delegate used to provide a handler for historical events.
            </summary>
            <param name="context">The context.</param>
            <param name="notifierId">The notifier identifier.</param>
            <param name="handle">The handle.</param>
            <returns>Good if successful; An appropriate error otherwise.</returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ParsedNodeId">
            <summary>
            Stores the elements of a NodeId after it is parsed.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ParsedNodeId.NamespaceIndex">
            <summary>
            The namespace index that qualified the NodeId.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ParsedNodeId.BaseId">
            <summary>
            The identifier for the base for the NodeId.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ParsedNodeId.BaseType">
            <summary>
            The type of root node.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ParsedNodeId.ComponentPath">
            <summary>
            The relative path to the component identified by the NodeId.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ParsedNodeId.Parse(UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Parses the specified node identifier.
            </summary>
            <param name="nodeId">The node identifier.</param>
            <returns>The parsed node identifier. Null if the identifier cannot be parsed.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ParsedNodeId.Construct(System.Int32,System.String,System.UInt16,System.String[])">
            <summary>
            Constructs a node identifier from the component pieces.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ParsedNodeId.Construct(System.String[])">
            <summary>
            Constructs a node identifier for a component with the specified name.
            </summary>
            <returns>The node identifier.</returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ServerInternalClient">
            <summary>
            A class that can be used to access server functionality internally.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerInternalClient.#ctor(UnifiedAutomation.UaServer.ServerManager)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ServerInternalClient"/> class.
            </summary>
            <param name="server">The server.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerInternalClient.GetNodeMetadata(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.NodeMetadataMask,UnifiedAutomation.UaBase.NodeClass)">
            <summary>
            Gets the node metadata.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodeId">The node id.</param>
            <param name="fieldsToReturn">The fields to return.</param>
            <param name="nodeClassFilter">The node class filter.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerInternalClient.GetNodeMetadata(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.NodeAttributeHandle,UnifiedAutomation.UaServer.NodeMetadataMask,UnifiedAutomation.UaBase.NodeClass)">
            <summary>
            Gets the node metadata.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodeHandle">The node handle.</param>
            <param name="fieldsToReturn">The fields to return.</param>
            <param name="nodeClassFilter">The node class filter.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerInternalClient.GetNodeMetadata(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.BrowseHandle,UnifiedAutomation.UaServer.NodeMetadataMask,UnifiedAutomation.UaBase.NodeClass)">
            <summary>
            Gets the node metadata.
            </summary>
            <param name="context">The request context.</param>
            <param name="browseHandle">The browse handle.</param>
            <param name="fieldsToReturn">The fields to return.</param>
            <param name="nodeClassFilter">The node class filter.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerInternalClient.GetReferenceDescription(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.ExpandedNodeId,UnifiedAutomation.UaBase.NodeId,System.Boolean,System.UInt32,System.UInt32)">
            <summary>
            Gets the reference description.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodeId">The node id.</param>
            <param name="referenceTypeId">The reference type id.</param>
            <param name="isForward">if set to <c>true</c> [is forward].</param>
            <param name="resultMask">The result mask.</param>
            <param name="nodeClassMask">The node class mask.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerInternalClient.GetNodeAttributes(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeClass)">
            <summary>
            Gets the node attributes.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodeId">The node id.</param>
            <param name="expectedNodeClass">The expected node class.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerInternalClient.ReadAttribute``1(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,System.UInt32,``0)">
            <summary>
            Reads the attribute.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="context">The request context.</param>
            <param name="nodeId">The node id.</param>
            <param name="attributeId">The attribute id.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerInternalClient.ReadValue``1(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.QualifiedName,``0)">
            <summary>
            Reads the component value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="context">The request context.</param>
            <param name="nodeId">The node id.</param>
            <param name="componentName">Name of the component.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerInternalClient.ReadValue``1(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.QualifiedName[],``0)">
            <summary>
            Reads the component value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="context">The request context.</param>
            <param name="nodeId">The node id.</param>
            <param name="browsePath">The browse path.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerInternalClient.WriteAttribute(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,System.UInt32,UnifiedAutomation.UaBase.Variant)">
            <summary>
            Writes the attribute.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodeId">The node id.</param>
            <param name="attributeId">The attribute id.</param>
            <param name="valueToWrite">The value to write.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerInternalClient.WriteValue(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.QualifiedName,UnifiedAutomation.UaBase.Variant)">
            <summary>
            Reads the component value.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodeId">The node id.</param>
            <param name="componentName">Name of the component.</param>
            <param name="valueToWrite">The value to write.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerInternalClient.WriteValue(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.QualifiedName[],UnifiedAutomation.UaBase.Variant)">
            <summary>
            Reads the component value.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodeId">The node id.</param>
            <param name="browsePath">The browse path.</param>
            <param name="valueToWrite">The value to write.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerInternalClient.Browse(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.ViewHandle,UnifiedAutomation.UaBase.BrowseDescription)">
            <summary>
            Browses the specified context.
            </summary>
            <param name="context">The request context.</param>
            <param name="viewToBrowse">The view to browse.</param>
            <param name="nodeToBrowse">The node to browse.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerInternalClient.Browse(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.ViewHandle,System.UInt32,UnifiedAutomation.UaBase.BrowseDescription,UnifiedAutomation.UaServer.INodeManager,System.Collections.Generic.List{UnifiedAutomation.UaBase.ReferenceDescription},UnifiedAutomation.UaServer.ContinuationPoint@)">
            <summary>
            Browses the specified context.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ServerInternalClient.AsyncRequestData">
            <summary>
            Callback data for a asynchronous requests.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ServerInternalClient.BrowseAsyncRequestData">
            <summary>
            Callback for a asynchronous browse requests.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerInternalClient.OnBrowseComplete(UnifiedAutomation.UaServer.BrowseOperationHandle,System.Object,UnifiedAutomation.UaBase.BrowseResult,UnifiedAutomation.UaServer.ContinuationPoint,System.Boolean)">
            <summary>
            Called when browses operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerInternalClient.BrowseNext(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.ContinuationPoint,System.Collections.Generic.List{UnifiedAutomation.UaBase.ReferenceDescription},UnifiedAutomation.UaServer.ContinuationPoint@)">
            <summary>
            Browses the specified context.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerInternalClient.ReleaseContinuationPoint(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.ContinuationPoint)">
            <summary>
            Browses the specified context.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerInternalClient.BrowseNext(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.ContinuationPoint,System.Boolean,System.Collections.Generic.List{UnifiedAutomation.UaBase.ReferenceDescription},UnifiedAutomation.UaServer.ContinuationPoint@)">
            <summary>
            Browses the specified context.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ServerInternalClient.BrowseNextAsyncRequestData">
            <summary>
            Callback for a asynchronous browse requests.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerInternalClient.OnBrowseNextComplete(UnifiedAutomation.UaServer.BrowseOperationHandle,System.Object,UnifiedAutomation.UaBase.BrowseResult,UnifiedAutomation.UaServer.ContinuationPoint,System.Boolean)">
            <summary>
            Called when browses operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerInternalClient.Translate(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.RelativePath,System.UInt32,UnifiedAutomation.UaBase.BrowsePathResult)">
            <summary>
            Translates the specified context.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodeToTranslate">The node to translate.</param>
            <param name="relativePath">The relative path.</param>
            <param name="index">The index.</param>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ServerInternalClient.TranslateAsyncRequestData">
            <summary>
            Callback for a asynchronous browse requests.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerInternalClient.OnTranslateComplete(UnifiedAutomation.UaServer.BrowseOperationHandle,System.Object,UnifiedAutomation.UaBase.BrowsePathResult,System.Boolean)">
            <summary>
            Called when browses operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerInternalClient.Read(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.TimestampsToReturn,System.Collections.Generic.IList{UnifiedAutomation.UaBase.ReadValueId})">
            <summary>
            Reads the values of the specified nodes.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ServerInternalClient.ReadAsyncRequestData">
            <summary>
            Callback data for a asynchronous read requests.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerInternalClient.OnReadComplete(UnifiedAutomation.UaServer.NodeAttributeOperationHandle,System.Object,UnifiedAutomation.UaBase.DataValue,System.Boolean)">
            <summary>
            Called when a read operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerInternalClient.Write(UnifiedAutomation.UaServer.RequestContext,System.Collections.Generic.IList{UnifiedAutomation.UaBase.WriteValue})">
            <summary>
            Writes the values of the specified nodes.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ServerInternalClient.WriteAsyncRequestData">
            <summary>
            Callback data for a asynchronous Write requests.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerInternalClient.OnWriteComplete(UnifiedAutomation.UaServer.NodeAttributeOperationHandle,System.Object,UnifiedAutomation.UaBase.StatusCode,System.Boolean)">
            <summary>
            Called when a Write operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerInternalClient.Call(UnifiedAutomation.UaServer.RequestContext,System.Collections.Generic.IList{UnifiedAutomation.UaBase.CallMethodRequest})">
            <summary>
            Calls the values of the specified nodes.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ServerInternalClient.CallAsyncRequestData">
            <summary>
            Callback data for a asynchronous Call requests.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerInternalClient.OnCallComplete(UnifiedAutomation.UaServer.MethodOperationHandle,System.Object,UnifiedAutomation.UaBase.CallMethodResult,System.Boolean)">
            <summary>
            Called when a Call operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerInternalClient.CreateDataMonitoredItems(UnifiedAutomation.UaServer.RequestContext,System.Collections.Generic.IList{UnifiedAutomation.UaServer.InternalClientFastDataMonitoredItem})">
            <summary>
            Creates the data monitored item.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerInternalClient.CreateDataMonitoredItems(UnifiedAutomation.UaServer.RequestContext,System.Collections.Generic.IList{UnifiedAutomation.UaServer.InternalClientFullDataMonitoredItem})">
            <summary>
            Creates the data monitored item.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerInternalClient.CreateDataMonitoredItems(UnifiedAutomation.UaServer.RequestContext,System.Collections.Generic.IList{UnifiedAutomation.UaBase.MonitoredItemCreateRequest})">
            <summary>
            Creates the data monitored item.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ServerInternalClient.CreateMonitoredAsyncRequestData">
            <summary>
            Callback data for a asynchronous  create data monitored item requests.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerInternalClient.OnCreateDataMonitoredItemsComplete(UnifiedAutomation.UaServer.NodeAttributeOperationHandle,System.Object,UnifiedAutomation.UaServer.MonitoredItemHandle,UnifiedAutomation.UaServer.DataMonitoringResult,System.Boolean)">
            <summary>
            Called when a create data operation  completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerInternalClient.ModifyDataMonitoredItems(UnifiedAutomation.UaServer.RequestContext,System.Collections.Generic.IList{UnifiedAutomation.UaBase.MonitoredItemModifyRequest})">
            <summary>
            Modifies the data monitored item.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ServerInternalClient.ModifyMonitoredAsyncRequestData">
            <summary>
            Callback data for a asynchronous  create data monitored item requests.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerInternalClient.OnModifyDataMonitoredItemsComplete(UnifiedAutomation.UaServer.MonitoredItemOperationHandle,System.Object,UnifiedAutomation.UaServer.DataMonitoringResult,System.Boolean)">
            <summary>
            Called when a create data operation  completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerInternalClient.DeleteDataMonitoredItems(UnifiedAutomation.UaServer.RequestContext,System.Collections.Generic.IList{System.UInt32})">
            <summary>
            Deletes the data monitored item.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ServerInternalClient.DeleteMonitoredAsyncRequestData">
            <summary>
            Callback data for a asynchronous delete data monitored item requests.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerInternalClient.OnDeleteDataMonitoredItemsComplete(UnifiedAutomation.UaServer.MonitoredItemOperationHandle,System.Object,UnifiedAutomation.UaBase.StatusCode,System.Boolean)">
            <summary>
            Called when a delete monitored item operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerInternalClient.CreateEventMonitoredItems(UnifiedAutomation.UaServer.RequestContext,System.Collections.Generic.IList{UnifiedAutomation.UaServer.InternalClientFastEventMonitoredItem})">
            <summary>
            Creates the event monitored item.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerInternalClient.CreateEventMonitoredItems(UnifiedAutomation.UaServer.RequestContext,System.Collections.Generic.IList{UnifiedAutomation.UaServer.InternalClientFullEventMonitoredItem})">
            <summary>
            Creates the event monitored item.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerInternalClient.CreateEventMonitoredItems(UnifiedAutomation.UaServer.RequestContext,System.Collections.Generic.IList{UnifiedAutomation.UaBase.MonitoredItemCreateRequest})">
            <summary>
            Creates the data monitored item.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerInternalClient.OnCreateEventMonitoredItemsComplete(UnifiedAutomation.UaServer.NotifierOperationHandle,System.Object,UnifiedAutomation.UaServer.MonitoredItemHandle,UnifiedAutomation.UaServer.EventMonitoringResult,System.Boolean)">
            <summary>
            Called when a create data operation  completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerInternalClient.ModifyEventMonitoredItems(UnifiedAutomation.UaServer.RequestContext,System.Collections.Generic.IList{UnifiedAutomation.UaBase.MonitoredItemModifyRequest})">
            <summary>
            Modifies the data monitored item.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerInternalClient.OnModifyEventMonitoredItemsComplete(UnifiedAutomation.UaServer.MonitoredItemOperationHandle,System.Object,UnifiedAutomation.UaServer.EventMonitoringResult,System.Boolean)">
            <summary>
            Called when a create data operation  completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerInternalClient.DeleteEventMonitoredItems(UnifiedAutomation.UaServer.RequestContext,System.Collections.Generic.IList{System.UInt32})">
            <summary>
            Deletes the data monitored item.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerInternalClient.OnDeleteEventMonitoredItemsComplete(UnifiedAutomation.UaServer.MonitoredItemOperationHandle,System.Object,UnifiedAutomation.UaBase.StatusCode,System.Boolean)">
            <summary>
            Called when a delete monitored item operation completes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerInternalClient.SetMonitoringMode(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.MonitoringMode,System.Collections.Generic.IList{System.UInt32})">
            <summary>
            Sets the monitoring mode.
            </summary>
            <param name="context">The request context.</param>
            <param name="monitoringMode">The monitoring mode.</param>
            <param name="itemsToModify">The items to modify.</param>
            <returns></returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ServerInternalClient.SetMonitoringModeAsyncRequestData">
            <summary>
            Callback data for a asynchronous delete data monitored item requests.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerInternalClient.OnSetMonitoringModeComplete(UnifiedAutomation.UaServer.MonitoredItemOperationHandle,System.Object,UnifiedAutomation.UaBase.StatusCode,System.Boolean)">
            <summary>
            Called when a delete monitored item operation completes.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.InternalClientFastDataMonitoredItem">
            <summary>
            The parameters used to create a data monitored item with no filtering or queuing.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.InternalClientFastDataMonitoredItem.NodeId">
            <summary>
            Gets or sets the node id.
            </summary>
            <value>
            The node id.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.InternalClientFastDataMonitoredItem.AttributeId">
            <summary>
            Gets or sets the attribute id.
            </summary>
            <value>
            The attribute id.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.InternalClientFastDataMonitoredItem.Callback">
            <summary>
            Gets or sets the callback.
            </summary>
            <value>
            The callback.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.InternalClientFullDataMonitoredItem">
            <summary>
            The parameters used to create a data monitored item with filtering and/or queuing.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.InternalClientFullDataMonitoredItem.NodeId">
            <summary>
            Gets or sets the node id.
            </summary>
            <value>
            The node id.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.InternalClientFullDataMonitoredItem.AttributeId">
            <summary>
            Gets or sets the attribute id.
            </summary>
            <value>
            The attribute id.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.InternalClientFullDataMonitoredItem.IndexRange">
            <summary>
            Gets or sets the index range.
            </summary>
            <value>
            The index range.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.InternalClientFullDataMonitoredItem.SamplingInterval">
            <summary>
            Gets or sets the sampling interval.
            </summary>
            <value>
            The sampling interval.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.InternalClientFullDataMonitoredItem.QueueSize">
            <summary>
            Gets or sets the size of the queue.
            </summary>
            <value>
            The size of the queue.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.InternalClientFullDataMonitoredItem.DiscardOldest">
            <summary>
            Gets or sets a value indicating whether [discard oldest].
            </summary>
            <value>
              <c>true</c> if [discard oldest]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.InternalClientFullDataMonitoredItem.Filter">
            <summary>
            Gets or sets the filter.
            </summary>
            <value>
            The filter.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.InternalClientFullDataMonitoredItem.Callback">
            <summary>
            Gets or sets the callback.
            </summary>
            <value>
            The callback.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.InternalClientFullDataMonitoredItem.CallbackData">
            <summary>
            Gets or sets the callback data.
            </summary>
            <value>
            The callback data.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.InternalClientFastEventMonitoredItem">
            <summary>
            The parameters used to create a data monitored item with no filtering or queuing.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.InternalClientFastEventMonitoredItem.NodeId">
            <summary>
            Gets or sets the node id.
            </summary>
            <value>
            The node id.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.InternalClientFastEventMonitoredItem.SelectClause">
            <summary>
            Gets or sets the select clause.
            </summary>
            <value>
            The select clause.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.InternalClientFastEventMonitoredItem.QueueSize">
            <summary>
            Gets or sets the size of the queue.
            </summary>
            <value>
            The size of the queue.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.InternalClientFastEventMonitoredItem.DiscardOldest">
            <summary>
            Gets or sets a value indicating whether [discard oldest].
            </summary>
            <value>
              <c>true</c> if [discard oldest]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.InternalClientFastEventMonitoredItem.Callback">
            <summary>
            Gets or sets the callback.
            </summary>
            <value>
            The callback.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.InternalClientFullEventMonitoredItem">
            <summary>
            The parameters used to create a data monitored item with filtering and/or queuing.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.InternalClientFullEventMonitoredItem.NodeId">
            <summary>
            Gets or sets the node id.
            </summary>
            <value>
            The node id.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.InternalClientFullEventMonitoredItem.QueueSize">
            <summary>
            Gets or sets the size of the queue.
            </summary>
            <value>
            The size of the queue.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.InternalClientFullEventMonitoredItem.DiscardOldest">
            <summary>
            Gets or sets a value indicating whether [discard oldest].
            </summary>
            <value>
              <c>true</c> if [discard oldest]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.InternalClientFullEventMonitoredItem.Filter">
            <summary>
            Gets or sets the filter.
            </summary>
            <value>
            The filter.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.InternalClientFullEventMonitoredItem.Callback">
            <summary>
            Gets or sets the callback.
            </summary>
            <value>
            The callback.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.InternalClientFullEventMonitoredItem.CallbackData">
            <summary>
            Gets or sets the callback data.
            </summary>
            <value>
            The callback data.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.InternalClientDataChangeEventHandler">
            <summary>
            Invoked when a new data change is available for an internal subscription.
            </summary>
            <param name="context">The request context.</param>
            <param name="itemHandle">The item handle.</param>
            <param name="dataChange">The data change.</param>
            <param name="callbackData">The callback data.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.InternalClientEventEventHandler">
            <summary>
            Invoked when a new event is available for an internal subscription.
            </summary>
            <param name="context">The request context.</param>
            <param name="itemHandle">The item handle.</param>
            <param name="e">The e.</param>
            <param name="callbackData">The callback data.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ServerSettings">
            <summary>
            A class that stores the settings for a server.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerSettings.#ctor(UnifiedAutomation.UaBase.ApplicationInstance)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ServerSettings"/> class.
            </summary>
            <param name="application">The application.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerSettings.ProductUri">
            <summary>
            Gets or sets the product URI.
            </summary>
            <value>
            The product URI.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerSettings.ProductName">
            <summary>
            Gets or sets the name of the product.
            </summary>
            <value>
            The name of the product.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerSettings.ManufacturerName">
            <summary>
            Gets or sets the name of the manufacturer.
            </summary>
            <value>
            The name of the manufacturer.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerSettings.SoftwareVersion">
            <summary>
            Gets or sets the software version.
            </summary>
            <value>
            The software version.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerSettings.BuildNumber">
            <summary>
            Gets or sets the build number.
            </summary>
            <value>
            The build number.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerSettings.BuildDate">
            <summary>
            Gets or sets the build date.
            </summary>
            <value>
            The build date.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerSettings.IsAuditActivated">
            <summary>
            Gets or sets a value indicating whether this instance is audit activated.
            </summary>
            <value>
            <c>true</c> if this instance is audit activated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerSettings.AvailableLocaleIds">
            <summary>
            Gets or sets the available locale ids.
            </summary>
            <value>
            The available locale ids.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerSettings.AvailableServerProfiles">
            <summary>
            Gets or sets the available server profiles
            </summary>
            <remarks>
            This value specified the value of ServerProfilesArray property of ServerCapabilities
            Object.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerSettings.Capabilities">
            <summary>
            Gets or sets the ServerCapabilities.
            </summary>
            <remarks>
            Contains the strings exposed in the ServerCapabilties variable.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerSettings.DisableUseLeafCertificateOnlyForSignature">
            <summary>
            Indicates if the server uses the chain of the client certificate.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerSettings.AllowDepreciatedPolicies">
            <summary>
            Indicates that the server will not allow depreciated security policies, such as Basic128Rsa15, to be used even if configured.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerSettings.DiscoveryServerUrl">
            <summary>
            Gets or sets the discovery server URL.
            </summary>
            <value>
            The discovery server URL.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerSettings.RegistrationEnabled">
            <summary>
            Gets or sets a value indicating whether [registration enabled].
            </summary>
            <value>
              <c>true</c> if [registration enabled]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerSettings.RegistrationInterval">
            <summary>
            Gets or sets the registration interval.
            </summary>
            <value>
            The registration interval.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.BrowseHandle">
            <summary>
            A handle for a node accessed during a browse operation.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BrowseHandle.#ctor(UnifiedAutomation.UaServer.INodeManager,UnifiedAutomation.UaServer.IUserAccessManager,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.BrowseHandle"/> class.
            </summary>
            <param name="nodeManager">The node manager.</param>
            <param name="userAccessManager">The user access manager.</param>
            <param name="nodeId">The node id.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BrowseHandle.IsReferenceSelected(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,System.Boolean,UnifiedAutomation.UaBase.BrowseDescription)">
            <summary>
            Determines whether the reference is selected by the browse settings.
            </summary>
            <param name="context">The request context.</param>
            <param name="referenceTypeId">The reference type id.</param>
            <param name="isInverse">Set to <c>true</c> if the reference is an inverse reference.</param>
            <param name="settings">The browse settings to use in the comparison.</param>
            <returns>
              <c>true</c> if the reference is selected by the browse settings; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.BrowseOperationHandle">
            <summary>
            A handle for a single operation within a browse or translate request.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BrowseOperationHandle.#ctor(UnifiedAutomation.UaServer.BrowseHandle,UnifiedAutomation.UaServer.ViewHandle)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.BrowseOperationHandle"/> class.
            </summary>
            <param name="browseHandle">The browse handle.</param>
            <param name="viewHandle">The view handle.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.BrowseOperationHandle.BrowseHandle">
            <summary>
            Gets the browse handle.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.BrowseOperationHandle.ViewHandle">
            <summary>
            Gets the view handle.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.BrowseOperationHandle.ViewManager">
            <summary>
            Gets the view manager.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.BrowseOperationHandle.NodeManager">
            <summary>
            Gets the node manager.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.BrowseOperationHandle.NodeId">
            <summary>
            Gets the node id.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.NotifierHandle">
            <summary>
            A handle for a node.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.NotifierHandle.#ctor(UnifiedAutomation.UaServer.IEventManager,UnifiedAutomation.UaServer.INodeManager,UnifiedAutomation.UaServer.IUserAccessManager,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.NotifierHandle"/> class.
            </summary>
            <param name="manager">The event manager.</param>
            <param name="nodeManager">The node manager.</param>
            <param name="userAccessManager">The user access manager.</param>
            <param name="nodeId">The node id.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.NotifierHandle.EventManager">
            <summary>
            Gets the I/O manager that created the handle.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.NotifierOperationHandle">
            <summary>
            A handle for a node related operations.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.NotifierOperationHandle.#ctor(UnifiedAutomation.UaServer.NotifierHandle)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.NotifierOperationHandle"/> class.
            </summary>
            <param name="notifierHandle">The notifier handle.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.NotifierOperationHandle.NotifierHandle">
            <summary>
            Gets the node handle.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.NotifierOperationHandle.EventManager">
            <summary>
            Gets the IO manager.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.NotifierOperationHandle.NodeId">
            <summary>
            Gets the node id.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.MonitoredItemHandle">
            <summary>
            A handle for a monitored item.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.MonitoredItemHandle.#ctor(UnifiedAutomation.UaServer.NodeAttributeHandle,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.MonitoredItemHandle"/> class.
            </summary>
            <param name="nodeHandle">The node handle.</param>
            <param name="monitoredItemId">The monitored item id.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.MonitoredItemHandle.#ctor(UnifiedAutomation.UaServer.NotifierHandle,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.MonitoredItemHandle"/> class.
            </summary>
            <param name="notifierHandle">The notifier handle.</param>
            <param name="monitoredItemId">The monitored item id.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.MonitoredItemHandle.MonitoredItemId">
            <summary>
            Gets the monitored item id.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.MonitoredItemHandle.UserData">
            <summary>
            Gets the opaque data associated with the handle by the creator.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.MonitoredItemHandle.ItemType">
            <summary>
            Gets the monitored item type.
            </summary>
            <value>
            The monitored item type.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.MonitoredItemHandle.NodeId">
            <summary>
            Gets the node id.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.MonitoredItemHandle.AttributeId">
            <summary>
            Gets the node id.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.MonitoredItemHandle.NodeHandle">
            <summary>
            Gets the node handle (must be null if the ItemType is MonitoredItemType.Event).
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.MonitoredItemHandle.NotifierHandle">
            <summary>
            Gets the notifier handle (must be null if the ItemType is MonitoredItemType.Data).
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.MonitoredItemHandle.IOManager">
            <summary>
            Gets the I/O manager that knows how read the value of the node attribute.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.MonitoredItemHandle.EventManager">
            <summary>
            Gets the event manager that knows how to access the events produced by the notifier.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.MonitoredItemOperationHandle">
            <summary>
            A handle for monitored item operations.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.MonitoredItemOperationHandle.#ctor(UnifiedAutomation.UaServer.MonitoredItemHandle)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.MonitoredItemOperationHandle"/> class.
            </summary>
            <param name="itemHandle">The item handle.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.MonitoredItemOperationHandle.ItemHandle">
            <summary>
            Gets the item handle.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.MonitoredItemOperationHandle.ItemType">
            <summary>
            Gets the monitored item type.
            </summary>
            <value>
            The monitored item type.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.MonitoredItemOperationHandle.MonitoredItemId">
            <summary>
            Gets the monitored item id.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.MonitoredItemOperationHandle.NodeId">
            <summary>
            Gets the node id.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.MonitoredItemOperationHandle.NodeHandle">
            <summary>
            Gets the node handle (must be null if the ItemType is MonitoredItemType.Event).
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.MonitoredItemOperationHandle.IOManager">
            <summary>
            Gets the I/O manager that knows how read the value of the node attribute.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.MonitoredItemOperationHandle.NotifierHandle">
            <summary>
            Gets the notifier handle (must be null if the ItemType is MonitoredItemType.Data).
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.MonitoredItemOperationHandle.EventManager">
            <summary>
            Gets the event manager that knows how to access the events produced by the notifier.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.MonitoredItemType">
            <summary>
            The types of monitored items.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.MonitoredItemType.Data">
            <summary>
            A data monitored item.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.MonitoredItemType.Event">
            <summary>
            An event monitored item.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ViewHandle">
            <summary>
            A handle for a view.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ViewHandle.#ctor(UnifiedAutomation.UaServer.IViewManager,UnifiedAutomation.UaBase.ViewDescription)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ViewHandle"/> class.
            </summary>
            <param name="manager">The view manager.</param>
            <param name="view">The view.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ViewHandle.ViewManager">
            <summary>
            Gets the manager for the view.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ViewHandle.View">
            <summary>
            Gets the view.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.HistoryDataHandle">
            <summary>
            A handle for a node which supports data history.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.HistoryDataHandle.#ctor(UnifiedAutomation.UaServer.IHistoryReadDataManager,UnifiedAutomation.UaServer.IHistoryUpdateDataManager,UnifiedAutomation.UaServer.INodeManager,UnifiedAutomation.UaServer.IUserAccessManager,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.HistoryDataHandle"/> class.
            </summary>
            <param name="readManager">The history data read manager.</param>
            <param name="updateManager">The history data update manager.</param>
            <param name="nodeManager">The node manager.</param>
            <param name="userAccessManager">The user access manager.</param>
            <param name="nodeId">The node id.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.HistoryDataHandle.ReadManager">
            <summary>
            Gets the manager that handles history data reads for the node.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.HistoryDataHandle.UpdateManager">
            <summary>
            Gets the manager that handles history data updates for the node.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.HistoryDataOperationHandle">
            <summary>
            A handle for a single history data operation within a request.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.HistoryDataOperationHandle.#ctor(UnifiedAutomation.UaServer.HistoryDataHandle)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.HistoryDataOperationHandle"/> class.
            </summary>
            <param name="nodeHandle">The node handle.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.HistoryDataOperationHandle.NodeHandle">
            <summary>
            Gets the node handle.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.HistoryDataOperationHandle.ReadManager">
            <summary>
            Gets the manager that handles history data reads for the node.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.HistoryDataOperationHandle.UpdateManager">
            <summary>
            Gets the manager that handles history data updates for the node.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.HistoryDataOperationHandle.NodeId">
            <summary>
            Gets the node id.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.NodeAttributeHandle">
            <summary>
            A handle for node and attribute accessed during a read/write operation.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.NodeAttributeHandle.#ctor(UnifiedAutomation.UaServer.IIOManager,UnifiedAutomation.UaServer.INodeManager,UnifiedAutomation.UaServer.IUserAccessManager,UnifiedAutomation.UaBase.NodeId,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.NodeAttributeHandle"/> class.
            </summary>
            <param name="ioManager">The I/O manager.</param>
            <param name="nodeManager">The node manager.</param>
            <param name="userAccessManager">The user access manager.</param>
            <param name="nodeId">The node id.</param>
            <param name="attributeId">The attribute id.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.NodeAttributeHandle.IOManager">
            <summary>
            Gets the I/O manager to used to access the attribute.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.NodeAttributeHandle.AttributeId">
            <summary>
            Gets the attribute id.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.NodeAttributeHandle.BrowseHandle">
            <summary>
            Gets or sets the browse handled associated with the NodeHandle. Used to optimize lookups of NodeMetadata.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.NodeAttributeOperationHandle">
            <summary>
            A handle for a node related operations.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.NodeAttributeOperationHandle.#ctor(UnifiedAutomation.UaServer.NodeAttributeHandle)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.NodeAttributeOperationHandle"/> class.
            </summary>
            <param name="nodeHandle">The node handle.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.NodeAttributeOperationHandle.NodeHandle">
            <summary>
            Gets the node handle.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.NodeAttributeOperationHandle.IOManager">
            <summary>
            Gets the IO manager.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.NodeAttributeOperationHandle.NodeManager">
            <summary>
            Gets the node manager.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.NodeAttributeOperationHandle.NodeId">
            <summary>
            Gets the node id.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.NodeAttributeOperationHandle.AttributeId">
            <summary>
            Gets the attribute id.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.MethodHandle">
            <summary>
            A handle for an object and method accessed during a call operation.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.MethodHandle.#ctor(UnifiedAutomation.UaServer.IMethodManager,UnifiedAutomation.UaServer.INodeManager,UnifiedAutomation.UaServer.IUserAccessManager,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.MethodHandle"/> class.
            </summary>
            <param name="manager">The method manager.</param>
            <param name="nodeManager">The node manager.</param>
            <param name="userAccessManager">The user access manager.</param>
            <param name="objectId">The object id.</param>
            <param name="methodId">The method id.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.MethodHandle.MethodManager">
            <summary>
            Gets the method manager that knows how to call the method on the selected object.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.MethodHandle.ObjectId">
            <summary>
            Gets the object id.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.MethodHandle.MethodId">
            <summary>
            Gets the method id.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.MethodHandle.MethodDeclarationId">
            <summary>
            Gets the method declaration id.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.MethodHandle.MethodData">
            <summary>
            Gets the UserData for the Method Node. The NodeData has the UserData for the Object Node.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.MethodHandle.Dispatcher">
            <summary>
            Gets the handler for the method.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.MethodHandle.BrowseHandle">
            <summary>
            Gets or sets the browse handled associated with the NodeHandle. Used to optimize lookups of NodeMetadata.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.MethodOperationHandle">
            <summary>
            A handle for a single call operation within a request.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.MethodOperationHandle.#ctor(UnifiedAutomation.UaServer.MethodHandle)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.MethodOperationHandle"/> class.
            </summary>
            <param name="methodHandle">The method handle.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.MethodOperationHandle.MethodHandle">
            <summary>
            Gets the method manager that knows how to call the method on the selected object.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.MethodOperationHandle.MethodManager">
            <summary>
            Gets the method manager that knows how to call the method on the selected object.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.MethodOperationHandle.ObjectId">
            <summary>
            Gets the object id.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.MethodOperationHandle.MethodId">
            <summary>
            Gets the method id.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.MethodOperationHandle.Dispatcher">
            <summary>
            Gets the handler for the method.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.IMethodDispatcher">
            <summary>
            A interface to an object which implements method calls.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IMethodDispatcher.GetMethodDispatcher(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Gets the method dispatcher.
            </summary>
            <param name="context">The request context.</param>
            <param name="objectId">The object id.</param>
            <param name="methodId">The method id.</param>
            <returns>A delegate for a method that can be called to execute the method.</returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.CallMethodEventHandler">
            <summary>
            The method which is called to invoke the method.
            </summary>
            <param name="context">The request context.</param>
            <param name="methodHandle">The method handle.</param>
            <param name="inputArguments">The input arguments.</param>
            <param name="inputArgumentResults">The input argument results.</param>
            <param name="outputArguments">The output arguments.</param>
            <returns>The status for the method.</returns>
            <exception cref="T:UnifiedAutomation.UaBase.StatusException">May be thrown but has the same meaning as a Bad return code.</exception>
        </member>
        <member name="T:UnifiedAutomation.UaServer.TransactionHandle">
            <summary>
            A handle for a transaction.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TransactionHandle.#ctor(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.TransactionType,System.Delegate,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.TransactionHandle"/> class.
            </summary>
            <param name="context">The request context.</param>
            <param name="transactionType">Type of the transaction.</param>
            <param name="callback">The callback to use when an operation completes.</param>
            <param name="callbackData">The callback data.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.TransactionHandle.Context">
            <summary>
            Gets the request context.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.TransactionHandle.TransactionType">
            <summary>
            Gets the type of the transaction.
            </summary>
            <value>
            The type of the transaction.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.TransactionHandle.Callback">
            <summary>
            The callback invoked whenever an operation within a transaction completes.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.TransactionHandle.CallbackData">
            <summary>
            Gets the opaque data associated with the transaction by creator.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.TransactionHandle.Done">
            <summary>
            Gets or sets a value indicating whether the transaction is done.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.TransactionHandle.ExpectedItemCount">
            <summary>
            Gets or sets the total item count hint.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TransactionHandle.Add``1(``0)">
            <summary>
            Adds the specified parameter to the list associated with the type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="parameter">The parameter.</param>
            <remarks>
            This method is used to efficiently store parameters for multiple operations which can be processed as a batch.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TransactionHandle.GetList``1">
            <summary>
            Gets the list of parameters with the specified type.
            </summary>
            <typeparam name="T">The type of parameter.</typeparam>
            <returns>The list.</returns>
            <remarks>
            This method returns a reference to the list populated with the Add method.
            </remarks>
        </member>
        <member name="T:UnifiedAutomation.UaServer.OperationHandle">
            <summary>
            A base class for a handle for a single operation within a request.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.OperationHandle.Transaction">
            <summary>
            Gets or sets the transaction associated with the handle.
            </summary>
            <value>
            The transaction.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.OperationHandle.Index">
            <summary>
            Gets or sets the index within the list of operations for a request.
            </summary>
            <value>
            The index.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.OperationHandle.UserData">
            <summary>
            Gets the opaque data associated with the handle by the creator of the operation handle.
            </summary>
            <value>
            The user data.
            </value>
        </member>
        <member name="M:UnifiedAutomation.UaServer.OperationHandle.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.OperationHandle.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.INodeManagementManager">
            \ingroup UaServerInterfaces
            <summary>
            An interface to an object that allows nodes and references to be added and removed.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.INodeManagementManager.AddNode(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.AddNodeSettings,UnifiedAutomation.UaBase.NodeId@)">
            <summary>
            Adds a new node.
            </summary>
            <param name="context">The request context.</param>
            <param name="settings">The settings.</param>
            <param name="assignedNodeId">The assigned node id.</param>
            <returns>Good if successful; Otherwise an error code.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.INodeManagementManager.DeleteNode(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,System.Boolean)">
            <summary>
            Deletes a node.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodeId">The node id.</param>
            <param name="deleteTargetReferences">if set to <c>true</c> [delete target references].</param>
            <returns>Good if successful; Otherwise an error code.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.INodeManagementManager.AddReference(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,System.Boolean,UnifiedAutomation.UaBase.ExpandedNodeId,System.Boolean)">
            <summary>
            Adds a reference.
            </summary>
            <param name="context">The request context.</param>
            <param name="sourceNodeId">The source node id.</param>
            <param name="referenceTypeId">The reference type id.</param>
            <param name="isInverse">if set to <c>true</c> then the reference is a inverse reference.</param>
            <param name="targetNodeId">The target node id.</param>
            <param name="addBiDirectional">if set to <c>true</c> then the reverse reference is added as well.</param>
            <returns>Good if successful; Otherwise an error code.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.INodeManagementManager.DeleteReference(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,System.Boolean,UnifiedAutomation.UaBase.ExpandedNodeId,System.Boolean)">
            <summary>
            Deletes a reference.
            </summary>
            <param name="context">The request context.</param>
            <param name="sourceNodeId">The source node id.</param>
            <param name="referenceTypeId">The reference type id.</param>
            <param name="isInverse">if set to <c>true</c> then the reference is a inverse reference.</param>
            <param name="targetNodeId">The target node id.</param>
            <param name="deleteBiDirectional">if set to <c>true</c> then the reverse reference is deleted as well.</param>
            <returns>Good if successful; Otherwise an error code.</returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.IEventManager">
            \ingroup UaServerInterfaces
            <summary>
            An interface to an object that manages access to events produced by a node.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IEventManager.BeginEventTransaction(UnifiedAutomation.UaServer.RequestContext,System.UInt32,UnifiedAutomation.UaServer.TransactionType,System.Delegate,System.Object,UnifiedAutomation.UaServer.TransactionHandle@)">
            <summary>
            Begins the transaction.
            </summary>
            <param name="context">The request context.</param>
            <param name="totalItemCountHint">The total item count hint.</param>
            <param name="transactionType">Type of the transaction.</param>
            <param name="callback">The callback to raise when an opereation completes.</param>
            <param name="callbackData">The callback data.</param>
            <param name="handle">The transaction handle.</param>
            <returns>Good if the transaction could be created, an error code otherwise.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IEventManager.FinishEventTransaction(UnifiedAutomation.UaServer.TransactionHandle)">
            <summary>
            Finishes the transaction.
            </summary>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IEventManager.BeginStartEventMonitoring(UnifiedAutomation.UaServer.NotifierOperationHandle,UnifiedAutomation.UaBase.MonitoredItemCreateRequest,System.UInt32,UnifiedAutomation.UaServer.EventNotificationEventHandler)">
            <summary>
            Starts monitoring a notifier for events.
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <param name="settings">The settings.</param>
            <param name="monitoredItemId">The monitored item id.</param>
            <param name="callback">The callback to use when events occur.</param>
            <returns>Good if the monitored item can be created, an error code otherwise.</returns>
            <remarks>If this method returns Good the callback passed to BeginTransaction must be called when the operation completes.</remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IEventManager.BeginModifyEventMonitoring(UnifiedAutomation.UaServer.MonitoredItemOperationHandle,UnifiedAutomation.UaBase.MonitoredItemModifyRequest)">
            <summary>
            Modifies the monitoring for an item.
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <param name="settings">The settings.</param>
            <returns>Good if the monitored item can be modified, an error code otherwise.</returns>
            <remarks>If this method returns Good the callback passed to BeginTransaction must be called when the operation completes.</remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IEventManager.BeginStopEventMonitoring(UnifiedAutomation.UaServer.MonitoredItemOperationHandle)">
            <summary>
            Stops monitoring an item.
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <returns>Good if the monitored item can be modified, an error code otherwise.</returns>
            <remarks>If this method returns Good the callback passed to BeginTransaction must be called when the operation completes.</remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IEventManager.BeginSetEventMonitoringMode(UnifiedAutomation.UaServer.MonitoredItemOperationHandle,UnifiedAutomation.UaBase.MonitoringMode,UnifiedAutomation.UaBase.MonitoringParameters)">
            <summary>
            Changes the monitoring mode for an item.
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <param name="monitoringMode">The monitoring mode.</param>
            <param name="parameters">The parameters.</param>
            <returns>Good if the monitored item can be modified, an error code otherwise.</returns>
            <remarks>If this method returns Good the callback passed to BeginTransaction must be called when the operation completes.</remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IEventManager.EventMonitoringStarted(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.MonitoredItemHandle,UnifiedAutomation.UaBase.MonitoringParameters,UnifiedAutomation.UaServer.EventNotificationEventHandler)">
            <summary>
            Called when monitoring starts for a notifier from another IEventManager higher in the hierarchy.
            </summary>
            <param name="context">The context.</param>
            <param name="notifierId">The id for the notifier in the other IEventManager.</param>
            <param name="itemHandle">The item handle.</param>
            <param name="parameters">The parameters.</param>
            <param name="callback">The callback to use when events occur.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IEventManager.EventMonitoringModified(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.MonitoredItemHandle,UnifiedAutomation.UaBase.MonitoringParameters)">
            <summary>
            Called when monitoring changes for a notifier from another IEventManager higher in the hierarchy.
            </summary>
            <param name="context">The context.</param>
            <param name="notifierId">The id for the notifier in the other IEventManager.</param>
            <param name="itemHandle">The item handle.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IEventManager.EventMonitoringStopped(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.MonitoredItemHandle)">
            <summary>
            Called when monitoring stops for a notifier from another IEventManager higher in the hierarchy.
            </summary>
            <param name="context">The context.</param>
            <param name="notifierId">The id for the notifier in the other IEventManager.</param>
            <param name="itemHandle">The item handle.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IEventManager.ConditionRefresh(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.MonitoredItemHandle,UnifiedAutomation.UaServer.EventNotificationEventHandler)">
            <summary>
            Called when the condition refresh is called for a notifier higher in the hierarchy.
            </summary>
            <param name="context">The context.</param>
            <param name="notifierId">The id for the notifier.</param>
            <param name="itemHandle">The item handle.</param>
            <param name="callback">The callback to call with the current state of all conditions.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.IEventManagerEx">
            <summary>
            The interface for an event manager that allows other event managers to link to it.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IEventManagerEx.AddNotifier(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.IEventManager)">
            <summary>
            Adds a link from a IEventManager to a notifier.
            </summary>
            <param name="notifierId">The notifier id.</param>
            <param name="manager">The event manager.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IEventManagerEx.RemoveNotifier(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.IEventManager)">
            <summary>
            Removes a link from IEventManager to a notifier.
            </summary>
            <param name="notifierId">The notifier id.</param>
            <param name="manager">The manager.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IEventManagerEx.ReportEvent(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Reports an event for the notifier id.
            </summary>
            <param name="notifierId">The notifier id.</param>
            <param name="e">The event.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.StartEventMonitoringCompleteEventHandler">
            <summary>
            Called when a start event monitoring operation completes.
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <param name="callbackData">The callback data.</param>
            <param name="itemHandle">The item handle.</param>
            <param name="result">The result.</param>
            <param name="doNotBlockThread">if set to <c>true</c> then the current thread should not be blocked.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ModifyEventMonitoringCompleteEventHandler">
            <summary>
            Called when a modify event monitoring operation completes.
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <param name="callbackData">The callback data.</param>
            <param name="result">The result.</param>
            <param name="doNotBlockThread">if set to <c>true</c> then the current thread should not be blocked.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.EventNotificationEventHandler">
            <summary>
            Called when a new event ocurrs.
            </summary>
            <param name="context">The request context.</param>
            <param name="itemHandle">The item handle.</param>
            <param name="e">The event.</param>
            <param name="doNotBlockThread">if set to <c>true</c> then the current thread should not be blocked.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.EventMonitoringResult">
            <summary>
            The results for a data monitoring operation.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.EventMonitoringResult.StatusCode">
            <summary>
            Gets or sets the status code.
            </summary>
            <value>
            The status code.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.EventMonitoringResult.ClientHandle">
            <summary>
            Gets or sets the client handle.
            </summary>
            <value>
            The client handle.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.EventMonitoringResult.RevisedQueueSize">
            <summary>
            Gets or sets the size of the revised queue.
            </summary>
            <value>
            The size of the revised queue.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.EventMonitoringResult.DiscardOldest">
            <summary>
            Gets or sets a value indicating whether [discard oldest].
            </summary>
            <value>
            <c>true</c> if [discard oldest]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.EventMonitoringResult.RevisedSamplingInterval">
            <summary>
            Gets or sets the revised sampling interval.
            </summary>
            <value>
            The revised sampling interval.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.EventMonitoringResult.SdkMustApplyFilter">
            <summary>
            Gets or sets a value indicating whether [SDK must apply filter].
            </summary>
            <value>
              <c>true</c> if [SDK must apply filter]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.EventMonitoringResult.Filter">
            <summary>
            Gets or sets the filter.
            </summary>
            <value>
            The filter.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.EventMonitoringResult.FilterResult">
            <summary>
            Gets or sets the filter result.
            </summary>
            <value>
            The filter result.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.IUserAccessManager">
            <summary>
            An interface to an object that manages access to nodes in an address space.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IUserAccessManager.HasAccess(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.BrowseHandle)">
            <summary>
            Determines whether the specified context has access to the browse handle.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodeHandle">The node handle.</param>
            <returns>
            <c>true</c> if the specified context has access; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IUserAccessManager.HasAccess(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.NodeAttributeHandle,UnifiedAutomation.UaServer.UserAccessMask)">
            <summary>
            Determines whether the specified context has access to the handle.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodeHandle">The node handle.</param>
            <param name="accessMasks">The access required.</param>
            <returns>
              <c>true</c> if the specified context has access; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IUserAccessManager.HasAccess(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MethodHandle)">
            <summary>
            Determines whether the specified context has access to the method handle.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodeHandle">The node handle.</param>
            <returns>
            <c>true</c> if the specified context has access; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IUserAccessManager.HasAccess(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.HistoryDataHandle,UnifiedAutomation.UaServer.UserAccessMask)">
            <summary>
            Determines whether the specified context has access to the history data handle.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodeHandle">The node handle.</param>
            <param name="accessMasks">The access masks.</param>
            <returns>
              <c>true</c> if the specified context has access; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IUserAccessManager.HasAccess(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.HistoryEventHandle,UnifiedAutomation.UaServer.UserAccessMask)">
            <summary>
            Determines whether the specified context has access to the history event handle.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodeHandle">The node handle.</param>
            <param name="accessMasks">The access masks.</param>
            <returns>
              <c>true</c> if the specified context has access; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.UserAccessMask">
            <summary>
            The possible user access rights.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.UserAccessMask.Read">
            <summary>
            Read an attribute.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.UserAccessMask.ReadDataHistory">
            <summary>
            Read an attribute history.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.UserAccessMask.Write">
            <summary>
            Write an attribute.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.UserAccessMask.UpdateDataHistory">
            <summary>
            Update an attribute's history.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.UserAccessMask.InsertDataHistory">
            <summary>
            Insert to an attribute's history.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.UserAccessMask.DeleteDataHistory">
            <summary>
            Delete an attribute's history.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.UserAccessMask.ReadEventHistory">
            <summary>
            Read event history for the object.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.UserAccessMask.UpdateEventHistory">
            <summary>
            Update event history for the object.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.UserAccessMask.InsertEventHistory">
            <summary>
            Insert event history for the object.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.UserAccessMask.DeleteEventHistory">
            <summary>
            Delete event history for the object.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.UserAccessMask.Browse">
            <summary>
            Browses the references from a node.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.UserAccessMask.Translate">
            <summary>
            Translates a browse path.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.UserAccessMask.ReadAttribute">
            <summary>
            Read all attributes but the Value attribute
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.UserAccessMask.WriteAttribute">
            <summary>
            Write all attributes but the Value attibute
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.IObjectMappingManager">
            <summary>
            An interface to an object allows objects to be linked via reflection to an in-memory node.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IObjectMappingManager.LinkModelToNode(UnifiedAutomation.UaBase.NodeId,System.Object,System.Object,UnifiedAutomation.UaBase.IModelMapper,System.Double)">
            <summary>
            Links an object to a node in the address space.
            </summary>
            <param name="rootId">The root id.</param>
            <param name="instance">The instance.</param>
            <param name="syncLock">The sync lock.</param>
            <param name="mapper">The mapper.</param>
            <param name="minimumSamplingInterval">The minimum sampling interval.</param>
            <returns>A handle that can be used to unlink the node.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IObjectMappingManager.UnlinkModelFromNode(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.ModelHandle)">
            <summary>
            Unlinks a object from a node in the address space.
            </summary>
            <param name="rootId">The root id.</param>
            <param name="handle">The handle.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.IViewManager">
            <summary>
            An interface to an object that manages access to a view.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IViewManager.IsReferenceInView(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.ViewHandle,UnifiedAutomation.UaServer.BrowseHandle,UnifiedAutomation.UaBase.NodeId,System.Boolean,UnifiedAutomation.UaBase.ExpandedNodeId)">
            <summary>
            Determines whether the reference is in the specified view.
            </summary>
            <param name="context">The request context.</param>
            <param name="view">The view.</param>
            <param name="sourceHandle">The source handle.</param>
            <param name="referenceTypeId">The reference type id.</param>
            <param name="isInverse">if set to <c>true</c> then the reference is an inverse reference.</param>
            <param name="targetId">The target id.</param>
            <returns>
            <c>true</c> if the reference is in the view; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.IIOManager">
            \ingroup UaServerInterfaces
            <summary>
            An interface to an object that manages access to the attribute values of nodes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IIOManager.BeginDataTransaction(UnifiedAutomation.UaServer.RequestContext,System.UInt32,System.Double,UnifiedAutomation.UaBase.TimestampsToReturn,UnifiedAutomation.UaServer.TransactionType,System.Delegate,System.Object,UnifiedAutomation.UaServer.TransactionHandle@)">
            <summary>
            Begins the data transaction.
            </summary>
            <param name="context">The request context.</param>
            <param name="totalItemCountHint">The total item count hint.</param>
            <param name="maxAge">The max age.</param>
            <param name="timestampsToReturn">The timestamps to return.</param>
            <param name="transactionType">Type of the transaction.</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <param name="handle">The data transaction handle.</param>
            <returns>Good if successful; otherwise an error code.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IIOManager.FinishDataTransaction(UnifiedAutomation.UaServer.TransactionHandle)">
            <summary>
            Finishes the data transaction.
            </summary>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IIOManager.BeginRead(UnifiedAutomation.UaServer.NodeAttributeOperationHandle,UnifiedAutomation.UaBase.ReadValueId)">
            <summary>
            Begins a read operation (external I/O).
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <param name="settings">The settings.</param>
            <returns>Good if successful; otherwise an error code.</returns>
            <remarks>If this method returns Good the callback passed to BeginDataTransaction must be called when the operation completes.</remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IIOManager.BeginWrite(UnifiedAutomation.UaServer.NodeAttributeOperationHandle,UnifiedAutomation.UaBase.WriteValue)">
            <summary>
            Begins a write operation (must not block).
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <param name="settings">The settings.</param>
            <returns>Good if successful; otherwise an error code.</returns>
            <remarks>If this method returns Good the callback passed to BeginDataTransaction must be called when the operation completes.</remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IIOManager.BeginStartDataMonitoring(UnifiedAutomation.UaServer.NodeAttributeOperationHandle,System.UInt32,UnifiedAutomation.UaBase.MonitoredItemCreateRequest,UnifiedAutomation.UaServer.DataChangeEventHandler)">
            <summary>
            Begins a start data monitoring operation (must not block).
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <param name="monitoredItemId">The monitored item id.</param>
            <param name="settings">The settings.</param>
            <param name="callback">The callback.</param>
            <returns>Good if successful; otherwise an error code.</returns>
            <remarks>If this method returns Good the callback passed to BeginDataTransaction must be called when the operation completes.</remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IIOManager.BeginModifyDataMonitoring(UnifiedAutomation.UaServer.MonitoredItemOperationHandle,UnifiedAutomation.UaBase.MonitoredItemModifyRequest)">
            <summary>
            Begins a modify data operation (must not block).
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <param name="settings">The settings.</param>
            <returns>Good if successful; otherwise an error code.</returns>
            <remarks>If this method returns Good the callback passed to BeginDataTransaction must be called when the operation completes.</remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IIOManager.BeginStopDataMonitoring(UnifiedAutomation.UaServer.MonitoredItemOperationHandle)">
            <summary>
            Begins a stop data monitoring operation (must not block).
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <returns>Good if successful; otherwise an error code.</returns>
            <remarks>If this method returns Good the callback passed to BeginDataTransaction must be called when the operation completes.</remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.IIOManager.BeginSetDataMonitoringMode(UnifiedAutomation.UaServer.MonitoredItemOperationHandle,UnifiedAutomation.UaBase.MonitoringMode,UnifiedAutomation.UaBase.MonitoringParameters)">
            <summary>
            Begins a set data monitoring mode operation (must not block).
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <param name="monitoringMode">The monitoring mode.</param>
            <param name="parameters">The parameters.</param>
            <returns>Good if successful; otherwise an error code.</returns>
            <remarks>If this method returns Good the callback passed to BeginDataTransaction must be called when the operation completes.</remarks>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ReadCompleteEventHandler">
            <summary>
            A function used to report the results of a read operation.
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <param name="callbackData">The callback data.</param>
            <param name="dataValue">The data value.</param>
            <param name="doNotBlockThread">if set to <c>true</c> then do not block thread.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.WriteCompleteEventHandler">
            <summary>
            A function used to report the results of a write operation.
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <param name="callbackData">The callback data.</param>
            <param name="result">The result.</param>
            <param name="doNotBlockThread">if set to <c>true</c> then do not block thread.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.StartDataMonitoringCompleteEventHandler">
            <summary>
            A function used to report the results of a start data monitoring operation.
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <param name="callbackData">The callback data.</param>
            <param name="itemHandle">The item handle.</param>
            <param name="result">The result.</param>
            <param name="doNotBlockThread">if set to <c>true</c> then do not block thread.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ModifyDataMonitoringCompleteEventHandler">
            <summary>
            A function used to report the results of a modify data monitoring operation.
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <param name="callbackData">The callback data.</param>
            <param name="result">The result.</param>
            <param name="doNotBlockThread">if set to <c>true</c> then do not block thread.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.StopMonitoringCompleteEventHandler">
            <summary>
            A function used to report the results of a stop data monitoring operation.
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <param name="callbackData">The callback data.</param>
            <param name="result">The result.</param>
            <param name="doNotBlockThread">if set to <c>true</c> then do not block thread.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.SetMonitoringModeCompleteEventHandler">
            <summary>
            A function used to report the results of a set data monitoring mode operation.
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <param name="callbackData">The callback data.</param>
            <param name="result">The result.</param>
            <param name="doNotBlockThread">if set to <c>true</c> then do not block thread.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.DataChangeEventHandler">
            <summary>
            A function used to report a change to a monitored attribute.
            </summary>
            <param name="context">The request context.</param>
            <param name="itemHandle">The item handle.</param>
            <param name="dataValue">The data value.</param>
            <param name="doNotBlockThread">if set to <c>true</c> then do not block thread.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.DataMonitoringResult">
            <summary>
            The results for a data monitoring operation.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DataMonitoringResult.StatusCode">
            <summary>
            Gets or sets the status code.
            </summary>
            <value>
            The status code.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DataMonitoringResult.ClientHandle">
            <summary>
            Gets or sets the client handle.
            </summary>
            <value>
            The client handle.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DataMonitoringResult.RevisedQueueSize">
            <summary>
            Gets or sets the size of the revised queue.
            </summary>
            <value>
            The size of the revised queue.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DataMonitoringResult.DiscardOldest">
            <summary>
            Gets or sets a value indicating whether to discard the oldest entry in the queue.
            </summary>
            <value>
            <c>true</c> then the oldest entry is discarded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DataMonitoringResult.RevisedSamplingInterval">
            <summary>
            Gets or sets the revised sampling interval.
            </summary>
            <value>
            The revised sampling interval.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DataMonitoringResult.SdkMustApplyFilter">
            <summary>
            Gets or sets a value indicating whether the SDK must apply monitoring filter.
            </summary>
            <value>
              <c>true</c> if the SDK must apply monitoring filter; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DataMonitoringResult.Filter">
            <summary>
            Gets or sets the monitoring filter.
            </summary>
            <value>
            The monitoring filter.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DataMonitoringResult.FilterData">
            <summary>
            Gets or sets the monitoring filter data.
            </summary>
            <value>
            The monitoring filter data.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DataMonitoringResult.FilterResult">
            <summary>
            Gets or sets the monitoring filter result.
            </summary>
            <value>
            The monitoring filter result.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.BaseEventModel">
            <summary>
            The base class for event objects.
            </summary>
            <remarks>
            The OPC UA BaseEventType defines all general characteristics of an
            Event. All other EventTypes derive from it.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.BaseEventModel" /> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseEventModel.#ctor(UnifiedAutomation.UaServer.BaseEventModel)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.BaseEventModel" /> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.BaseEventModel.NodeId">
            <summary>
            The node identifier for a representation of an event in the Server address space.
            Used mainly for ConditionIds.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.BaseEventModel.EventId">
            <summary>
            Generated by the server to uniquely identify a particular
            Event Notification.
            </summary>
            <remarks>
            The Server is responsible to ensure that each Event has
            its unique EventId. It may do this, for example, by
            putting GUIDs into the ByteString. Clients can use the
            EventId to assist in minimizing or eliminating gaps and
            overlaps that may occur during a redundancy failover. The
            EventId shall always be returned as value and the Server is
            not allowed to return a StatusCode for the EventId indicating
            an error.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.BaseEventModel.EventType">
            <summary>
            Describes the specific type of Event.
            </summary>
            <remarks>
            The EventType shall always be returned as value and the
            Server is not allowed to return a StatusCode for the EventType
            indicating an error.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.BaseEventModel.SourceNode">
            <summary>
            Identifies the Node that the Event originated from.
            </summary>
            <remarks>
            If the Event is not specific to a Node, the NodeId is set
            to null. Some subtypes of this BaseEventType may define
            additional rules for SourceNode.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.BaseEventModel.SourceName">
            <summary>
            Provides a description of the source of the Event.
            </summary>
            <remarks>
            This could be the DisplayName of the Event source, if the
            Event is specific to a Node, or some server-specific notation.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.BaseEventModel.Time">
            <summary>
            Provides the time the Event occurred.
            </summary>
            <remarks>
            This value is set as close to the event generator as
            possible. It often comes from the underlying system or
            device. Once set, intermediate OPC UA Servers shall not alter
            the value.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.BaseEventModel.ReceiveTime">
            <summary>
            Provides the time the OPC UA Server received the Event
            from the underlying device of another Server.
            </summary>
            <remarks>
            ReceiveTime is analogous to ServerTimestamp defined in
            Part 4 of the OPC UA Specification, i.e. in the case where the
            OPC UA Server gets an Event from another OPC UA Server, each
            Server applies its own ReceiveTime. That implies that a Client
            may get the same Event, having the same EventId, from
            different Servers having different values of the
            ReceiveTime. The ReceiveTime shall always be returned as value
            and the Server is not allowed to return a StatusCode for the
            ReceiveTime indicating an error.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.BaseEventModel.LocalTime">
            <summary>
            Contains the Offset and the DaylightSavingInOffset flag.
            </summary>
            <remarks>
            The Offset specifies the time difference (in minutes)
            between the Time Property and the time at the location in
            which the event was issued. If DaylightSavingInOffset is TRUE,
            then Standard/Daylight savings time (DST) at the originating
            location is in effect and Offset includes the DST
            correction. If FALSE, then the Offset does not include DST
            correction and DST may or may not have been in effect.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.BaseEventModel.Message">
            <summary>
            Provides a human-readable and localizable text description
            of the Event.
            </summary>
            <remarks>
            The Server may return any appropriate text to describe the
            Event. A null string is not a valid value; if the Server does
            not have a description, it shall return the string part of the
            BrowseName of the Node associated with the Event.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.BaseEventModel.Severity">
             <summary>
             An indication of the urgency of the Event.
             </summary>
             <remarks>
             This is also commonly called “priority”. Values will range
             from 1 to 1000, with 1 being the lowest severity and 1000
             being the highest. Typically, a severity of 1 would indicate
             an Event which is informational in nature, while a value of
             1000 would indicate an Event of catastrophic nature, which
             could potentially result in severe financial loss or loss of
             life.
            
             It is expected that very few Server implementations will
             support 1000 distinct severity levels.  Therefore, Server
             developers are responsible for distributing their severity
             levels across the 1 – 1000 range in such a manner that clients
             can assume a linear distribution. For example, a client
             wishing to present five severity levels to a user should be
             able to do the following mapping:
            
             Client Severity | OPC Severity
             ----------------|-------------
             HIGH            | 801 – 1000
             MEDIUM HIGH     | 601 – 800
             MEDIUM          | 401 – 600
             MEDIUM LOW      | 201 – 400
             LOW             | 1 – 200
             </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.BaseEventModel.NodeAccessInfo">
            <summary>
            Using a NodeAccessInfo can restrict the access of an event to single scopes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseEventModel.NewId">
            <summary>
            Assigns a new EventId, Time and ReceiveTime to the event.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseEventModel.CreateEvent(UnifiedAutomation.UaServer.FilterManager)">
            <summary>
            Creates the event.
            </summary>
            <param name="manager">The manager.</param>
            <returns>The new event.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseEventModel.CreateEvent(UnifiedAutomation.UaServer.FilterManager,System.Boolean)">
            <summary>
            Creates the event.
            </summary>
            <param name="manager">The manager.</param>
            <param name="autoGenerateEventIdAndTime">If TRUE a new EventId/Time/ReceiveTime is set automatically and stored in the object. If FALSE the caller must set the EventId/Time/ReceiveTime before calling this method.</param>
            <returns>The new event.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.BaseEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Updates the event.
            </summary>
            <param name="e">The event to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.BaseEventModel.FieldHandle">
            <summary>
            A class of handle values used by the class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.GenericEvent">
             <summary>
             A class that stores the fields for an event fired by the server application.
             </summary>
             <remarks>
             This interface is used to pass an event to ServerManager.ReportEvent for distribution to interested clients.
            
             The class BaseEventModel provides the method <see
             cref="M:UnifiedAutomation.UaServer.BaseEventModel.UpdateEvent(UnifiedAutomation.UaServer.GenericEvent)">UpdateEvent</see>, setting all
             event fields at a GenericEvent which are defined by an EventType.
             </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.GenericEvent.#ctor(UnifiedAutomation.UaServer.FilterManager)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.GenericEvent"/> class.
            </summary>
            <param name="manager">The manager.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.GenericEvent.EventId">
            <summary>
            Generated by the server to uniquely identify a particular
            Event Notification.
            </summary>
            <remarks>
            The Server is responsible to ensure that each Event has
            its unique EventId. It may do this, for example, by
            putting GUIDs into the ByteString. Clients can use the
            EventId to assist in minimizing or eliminating gaps and
            overlaps that may occur during a redundancy failover. The
            EventId shall always be returned as value and the Server is
            not allowed to return a StatusCode for the EventId indicating
            an error.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.GenericEvent.EventType">
            <summary>
            Describes the specific type of Event.
            </summary>
            <remarks>
            The EventType shall always be returned as value and the
            Server is not allowed to return a StatusCode for the EventType
            indicating an error.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.GenericEvent.SourceNode">
            <summary>
            Identifies the Node that the Event originated from.
            </summary>
            <remarks>
            If the Event is not specific to a Node, the NodeId is set
            to null. Some subtypes of this BaseEventType may define
            additional rules for SourceNode.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.GenericEvent.Time">
            <summary>
            Provides the time the Event occurred.
            </summary>
            <remarks>
            This value is set as close to the event generator as
            possible. It often comes from the underlying system or
            device. Once set, intermediate OPC UA Servers shall not alter
            the value.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.GenericEvent.NodeAccessInfo">
            <summary>
            Using a NodeAccessInfo can restrict the access of an event to single scopes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.GenericEvent.Initialize(System.Byte[],UnifiedAutomation.UaBase.ExpandedNodeId,UnifiedAutomation.UaBase.NodeId,System.String,UnifiedAutomation.UaServer.EventSeverity,UnifiedAutomation.UaBase.LocalizedText)">
            <summary>
            Initializes the event.
            </summary>
            <param name="eventId">The event id.</param>
            <param name="eventType">Type of the event.</param>
            <param name="sourceNode">The source node.</param>
            <param name="sourceName">Name of the source.</param>
            <param name="severity">The severity.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.GenericEvent.Set(System.Int32,UnifiedAutomation.UaBase.IEncodeable)">
            <summary>
            Sets the value for the event field with the specified handle.
            </summary>
            <param name="handle">The handle.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.GenericEvent.Set(System.Int32,UnifiedAutomation.UaBase.Variant)">
            <summary>
            Sets the value for the event field with the specified handle.
            </summary>
            <param name="handle">The handle.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.GenericEvent.Set(System.String,UnifiedAutomation.UaBase.IEncodeable)">
            <summary>
            Sets the value for the event field with the specified browse path.
            </summary>
            <param name="browsePath">The browse path.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.GenericEvent.Set(System.String,UnifiedAutomation.UaBase.Variant)">
            <summary>
            Sets the value for the event field with the specified browse path.
            </summary>
            <param name="browsePath">The browse path.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.GenericEvent.ToPath(UnifiedAutomation.UaBase.AbsoluteName[])">
            <summary>
            Converts the browse names to a browse path.
            </summary>
            <param name="browseNames">The browse names.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.GenericEvent.ToPath(UnifiedAutomation.UaBase.QualifiedName[])">
            <summary>
            Converts the browse names to a browse path.
            </summary>
            <param name="browseNames">The browse names.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.GenericEvent.ToPath(System.String[])">
            <summary>
            Converts the browse names to a browse path.
            </summary>
            <param name="browseNames">The browse names.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.GenericEvent.Get(UnifiedAutomation.UaBase.AbsoluteName[])">
            <summary>
            Gets the field value for the browse path.
            </summary>
            <param name="browseNames">The browse names.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.GenericEvent.Get(UnifiedAutomation.UaBase.QualifiedName[])">
            <summary>
            Gets the field value for the browse path.
            </summary>
            <param name="browseNames">The browse names.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.GenericEvent.Get(System.String[])">
            <summary>
            Gets the field value for the browse path.
            </summary>
            <param name="browseNames">The browse names.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.GenericEvent.Get(System.Int32)">
            <summary>
            Gets the field value for the handle
            </summary>
            <param name="handle">The handle.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.GenericEvent.Get(UnifiedAutomation.UaBase.SimpleAttributeOperand)">
            <summary>
            Gets the field value for the operand.
            </summary>
            <param name="clause">The clause.</param>
            <returns></returns>
        </member>
        <member name="P:UnifiedAutomation.UaServer.GenericEvent.Manager">
            <summary>
            Gets the manager.
            </summary>
            <value>
            The manager.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.EventSeverity">
            <summary>
            The severity for an event.
            </summary>
            <remarks>
            Event severities can have any value between 1 and 1000. This enumeration provides default values.
            </remarks>
        </member>
        <member name="F:UnifiedAutomation.UaServer.EventSeverity.Max">
            <summary>
            The highest possible severity.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.EventSeverity.High">
            <summary>
            The event has high severity.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.EventSeverity.MediumHigh">
            <summary>
            The event has medium high severity.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.EventSeverity.Medium">
            <summary>
            The event has medium severity.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.EventSeverity.MediumLow">
            <summary>
            The event has medium-low severity.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.EventSeverity.Low">
            <summary>
            The event has low severity.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.EventSeverity.Min">
            <summary>
            The lowest possible severity.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ConditionStateNames">
            <summary>
            Defines the default names for the condition states.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.ConditionStateNames.Disabled">
            <summary>
            The name of the Disabled state.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.ConditionStateNames.Enabled">
            <summary>
            The name of the Enabled state.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.ConditionStateNames.Inactive">
            <summary>
            The name of the Inactive state.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.ConditionStateNames.Active">
            <summary>
            The name of the Active state.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.ConditionStateNames.Unacknowledged">
            <summary>
            The name of the Unacknowledged state.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.ConditionStateNames.Acknowledged">
            <summary>
            The name of the Acknowledged state.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.ConditionStateNames.Unconfirmed">
            <summary>
            The name of the Unconfirmed state.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.ConditionStateNames.Confirmed">
            <summary>
            The name of the Confirmed state.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.ConditionStateNames.Unsuppressed">
            <summary>
            The name of the Unsuppressed state.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.ConditionStateNames.Suppressed">
            <summary>
            The name of the Suppressed state.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.ConditionStateNames.HighHighActive">
            <summary>
            The name of the HighHighActive state.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.ConditionStateNames.HighActive">
            <summary>
            The name of the HighActive state.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.ConditionStateNames.LowActive">
            <summary>
            The name of the LowActive state.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.ConditionStateNames.LowLowActive">
            <summary>
            The name of the LowLowActive state.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.FilterManager">
             <summary>
            
             </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FilterManager.#ctor(UnifiedAutomation.UaServer.ServerManager)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.FilterManager"/> class.
            </summary>
            <param name="server">The server.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.FilterManager.NamespaceUris">
            <summary>
            Gets the namespace uris.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FilterManager.ValidateFilter(UnifiedAutomation.UaServer.ServerContext,UnifiedAutomation.UaBase.EventFilter,UnifiedAutomation.UaBase.EventFilterResult@)">
            <summary>
            Enables the filter.
            </summary>
            <param name="context">The request context.</param>
            <param name="filter">The filter.</param>
            <param name="filterResult">The filter result.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FilterManager.UpdateReferenceCount(UnifiedAutomation.UaBase.EventFilter,System.Boolean)">
            <summary>
            Disables the filter.
            </summary>
            <param name="filter">The filter.</param>
            <param name="enabled">if set to <c>true</c> [enabled].</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FilterManager.GetFieldHandle(System.String)">
            <summary>
            Gets the field handle.
            </summary>
            <param name="browsePath">The browse path.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FilterManager.CreateFieldHandle(System.String)">
            <summary>
            Creates the field handle.
            </summary>
            <param name="browsePath">The browse path.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FilterManager.IsSubscribed(System.Int32)">
            <summary>
            Determines whether the specified id is subscribed.
            </summary>
            <param name="id">The id.</param>
            <returns>
              <c>true</c> if the specified id is subscribed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FilterManager.Evaluate(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.ContentFilter,UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Evaluates the first element in the ContentFilter. If the first or any
            subsequent element has dependent elements, the dependent elements are
            evaluated before the root element (recursive descent). Elements which
            are not linked (directly or indirectly) to the first element will not
            be evaluated (they have no influence on the result).
            </summary>
            <param name="context">The context to use when evaluating the filter.</param>
            <param name="filter">The filter.</param>
            <param name="target">The target to use when evaluating elements that reference the type model.</param>
            <returns>
            Returns true, false or null.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FilterManager.ValidateFilter(UnifiedAutomation.UaServer.ServerContext,System.Int32,UnifiedAutomation.UaBase.ContentFilterElement)">
            <summary>
            Validates the filter.
            </summary>
            <param name="context">The request context.</param>
            <param name="index">The index.</param>
            <param name="element">The element.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FilterManager.ValidateOperand(UnifiedAutomation.UaServer.ServerContext,UnifiedAutomation.UaBase.SimpleAttributeOperand)">
            <summary>
            Validates the operand.
            </summary>
            <param name="context">The request context.</param>
            <param name="operand">The operand.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FilterManager.Evaluate(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.ContentFilter,UnifiedAutomation.UaServer.GenericEvent,System.Int32)">
            <summary>
            Evaluates element at the specified index.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FilterManager.GetOperands(UnifiedAutomation.UaBase.ContentFilterElement,System.Int32)">
            <summary>
            Returns the operands for the element.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FilterManager.GetValue(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.FilterOperand,UnifiedAutomation.UaBase.ContentFilter,UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Returns the value for the element.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FilterManager.GetBuiltInType(System.Object)">
            <summary>
            Returns the BuiltInType type for the value.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FilterManager.GetBuiltInType(UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Returns the BuiltInType type for the DataTypeId.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FilterManager.GetDataTypePrecedence(UnifiedAutomation.UaBase.BuiltInType)">
            <summary>
            Returns the data type precedence for the value.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FilterManager.DoImplicitConversion(System.Object@,System.Object@)">
            <summary>
            Implicitly converts the values according to their data type precedence.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FilterManager.IsEqual(System.Object,System.Object)">
            <summary>
            Returns true if the values are equal.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FilterManager.Match(System.String,System.String)">
            <summary>
            Returns true if the target string matches the UA pattern string.
            The pattern string may include UA wildcards %_\[]!
            </summary>
            <param name="target">String to check for a pattern match.</param>
            <param name="pattern">Pattern to match with the target string.</param>
            <returns>true if the target string matches the pattern, otherwise false.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FilterManager.ToBoolean(System.Object,UnifiedAutomation.UaBase.BuiltInType)">
            <summary>
            Converts a value to a Boolean
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FilterManager.ToSByte(System.Object,UnifiedAutomation.UaBase.BuiltInType)">
            <summary>
            Converts a value to a SByte
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FilterManager.ToByte(System.Object,UnifiedAutomation.UaBase.BuiltInType)">
            <summary>
            Converts a value to a Byte
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FilterManager.ToInt16(System.Object,UnifiedAutomation.UaBase.BuiltInType)">
            <summary>
            Converts a value to a Int16
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FilterManager.ToUInt16(System.Object,UnifiedAutomation.UaBase.BuiltInType)">
            <summary>
            Converts a value to a UInt16
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FilterManager.ToInt32(System.Object,UnifiedAutomation.UaBase.BuiltInType)">
            <summary>
            Converts a value to a Int32
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FilterManager.ToUInt32(System.Object,UnifiedAutomation.UaBase.BuiltInType)">
            <summary>
            Converts a value to a UInt32
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FilterManager.ToInt64(System.Object,UnifiedAutomation.UaBase.BuiltInType)">
            <summary>
            Converts a value to a Int64
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FilterManager.ToUInt64(System.Object,UnifiedAutomation.UaBase.BuiltInType)">
            <summary>
            Converts a value to a UInt64
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FilterManager.ToFloat(System.Object,UnifiedAutomation.UaBase.BuiltInType)">
            <summary>
            Converts a value to a Float
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FilterManager.ToDouble(System.Object,UnifiedAutomation.UaBase.BuiltInType)">
            <summary>
            Converts a value to a Double
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FilterManager.ToString(System.Object,UnifiedAutomation.UaBase.BuiltInType)">
            <summary>
            Converts a value to a String
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FilterManager.ToDateTime(System.Object,UnifiedAutomation.UaBase.BuiltInType)">
            <summary>
            Converts a value to a DateTime
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FilterManager.ToGuid(System.Object,UnifiedAutomation.UaBase.BuiltInType)">
            <summary>
            Converts a value to a Guid
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FilterManager.ToByteString(System.Object,UnifiedAutomation.UaBase.BuiltInType)">
            <summary>
            Converts a value to a ByteString
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FilterManager.ToNodeId(System.Object,UnifiedAutomation.UaBase.BuiltInType)">
            <summary>
            Converts a value to a NodeId
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FilterManager.ToExpandedNodeId(System.Object,UnifiedAutomation.UaBase.BuiltInType)">
            <summary>
            Converts a value to a ExpandedNodeId
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FilterManager.ToStatusCode(System.Object,UnifiedAutomation.UaBase.BuiltInType)">
            <summary>
            Converts a value to a StatusCode
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FilterManager.ToQualifiedName(System.Object,UnifiedAutomation.UaBase.BuiltInType)">
            <summary>
            Converts a value to a QualifiedName
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FilterManager.ToLocalizedText(System.Object,UnifiedAutomation.UaBase.BuiltInType)">
            <summary>
            Converts a value to a LocalizedText
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FilterManager.Cast(System.Object,UnifiedAutomation.UaBase.BuiltInType)">
            <summary>
            Casts a value to the specified target type.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FilterManager.Cast(System.Object,UnifiedAutomation.UaBase.BuiltInType,UnifiedAutomation.UaBase.BuiltInType)">
            <summary>
            Casts a value to the specified target type.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FilterManager.And(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.ContentFilter,UnifiedAutomation.UaServer.GenericEvent,UnifiedAutomation.UaBase.ContentFilterElement)">
            <summary>
            And FilterOperator
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FilterManager.Or(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.ContentFilter,UnifiedAutomation.UaServer.GenericEvent,UnifiedAutomation.UaBase.ContentFilterElement)">
            <summary>
            Or FilterOperator
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FilterManager.Not(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.ContentFilter,UnifiedAutomation.UaServer.GenericEvent,UnifiedAutomation.UaBase.ContentFilterElement)">
            <summary>
            Not FilterOperator
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FilterManager.Equals(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.ContentFilter,UnifiedAutomation.UaServer.GenericEvent,UnifiedAutomation.UaBase.ContentFilterElement)">
            <summary>
            Equals FilterOperator
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FilterManager.GreaterThan(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.ContentFilter,UnifiedAutomation.UaServer.GenericEvent,UnifiedAutomation.UaBase.ContentFilterElement)">
            <summary>
            GreaterThan FilterOperator
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FilterManager.GreaterThanOrEqual(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.ContentFilter,UnifiedAutomation.UaServer.GenericEvent,UnifiedAutomation.UaBase.ContentFilterElement)">
            <summary>
            GreaterThanOrEqual FilterOperator
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FilterManager.LessThan(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.ContentFilter,UnifiedAutomation.UaServer.GenericEvent,UnifiedAutomation.UaBase.ContentFilterElement)">
            <summary>
            LessThan FilterOperator
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FilterManager.LessThanOrEqual(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.ContentFilter,UnifiedAutomation.UaServer.GenericEvent,UnifiedAutomation.UaBase.ContentFilterElement)">
            <summary>
            LessThanOrEqual FilterOperator
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FilterManager.Between(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.ContentFilter,UnifiedAutomation.UaServer.GenericEvent,UnifiedAutomation.UaBase.ContentFilterElement)">
            <summary>
            Between FilterOperator
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FilterManager.InList(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.ContentFilter,UnifiedAutomation.UaServer.GenericEvent,UnifiedAutomation.UaBase.ContentFilterElement)">
            <summary>
            InList FilterOperator
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FilterManager.Like(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.ContentFilter,UnifiedAutomation.UaServer.GenericEvent,UnifiedAutomation.UaBase.ContentFilterElement)">
            <summary>
            Like FilterOperator
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FilterManager.IsNull(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.ContentFilter,UnifiedAutomation.UaServer.GenericEvent,UnifiedAutomation.UaBase.ContentFilterElement)">
            <summary>
            IsNull FilterOperator
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FilterManager.Cast(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.ContentFilter,UnifiedAutomation.UaServer.GenericEvent,UnifiedAutomation.UaBase.ContentFilterElement)">
            <summary>
            Cast FilterOperator
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FilterManager.OfType(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.ContentFilter,UnifiedAutomation.UaServer.GenericEvent,UnifiedAutomation.UaBase.ContentFilterElement)">
            <summary>
            OfType FilterOperator
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FilterManager.InView(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.ContentFilter,UnifiedAutomation.UaServer.GenericEvent,UnifiedAutomation.UaBase.ContentFilterElement)">
            <summary>
            InView FilterOperator
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FilterManager.RelatedTo(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.ContentFilter,UnifiedAutomation.UaServer.GenericEvent,UnifiedAutomation.UaBase.ContentFilterElement)">
            <summary>
            RelatedTo FilterOperator
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.FilterManager.RelatedTo(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.ContentFilter,UnifiedAutomation.UaServer.GenericEvent,UnifiedAutomation.UaBase.ContentFilterElement,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            RelatedTo FilterOperator
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.OptimizedOperand">
            <summary>
            An optimized operand.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.OptimizedOperand.#ctor(UnifiedAutomation.UaBase.NodeId,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.OptimizedOperand"/> class.
            </summary>
            <param name="typeDefinitionId">The type definition id.</param>
            <param name="browsePath">The browse path.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.OptimizedOperand.Handle">
            <summary>
            Gets or sets the handle.
            </summary>
            <value>
            The handle.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.OptimizedOperand.TypeDefinitionId">
            <summary>
            Gets or sets the type definition id.
            </summary>
            <value>
            The type definition id.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.OptimizedOperand.BrowsePath">
            <summary>
            Gets or sets the browse path.
            </summary>
            <value>
            The browse path.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.OptimizedOperand.AttributeId">
            <summary>
            Gets or sets the attribute id.
            </summary>
            <value>
            The attribute id.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.OptimizedOperand.IndexRange">
            <summary>
            Gets or sets the index range.
            </summary>
            <value>
            The index range.
            </value>
        </member>
        <member name="M:UnifiedAutomation.UaServer.OptimizedOperand.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
              </exception>
        </member>
        <member name="M:UnifiedAutomation.UaServer.OptimizedOperand.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.INodeManager">
            \ingroup UaServerInterfaces
            <summary>
            An interface to an object that manages a subset of the nodes in a server.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.INodeManager.Startup">
            <summary>
            Called when the node manager is started.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.INodeManager.Shutdown">
            <summary>
            Called when the node manager is stopped.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.INodeManager.SessionOpened(UnifiedAutomation.UaServer.Session)">
            <summary>
            Called when a new session is created.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.INodeManager.SessionActivated(UnifiedAutomation.UaServer.Session)">
            <summary>
            Called when a session is activated.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.INodeManager.SessionClosed(UnifiedAutomation.UaServer.Session)">
            <summary>
            Called when a new session is closed.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.INodeManager.GetBrowseHandle(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.ViewHandle,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.BrowseHandle@)">
            <summary>
            Gets the browse handle for the specified node.
            </summary>
            <param name="context">The request context.</param>
            <param name="view">The view.</param>
            <param name="nodeId">The node id.</param>
            <param name="handle">The handle.</param>
            <returns>Good if successful; An error code otherwise.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.INodeManager.GetViewHandle(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.ViewDescription,UnifiedAutomation.UaServer.ViewHandle@)">
            <summary>
            Gets the view handle for the specified view.
            </summary>
            <param name="context">The request context.</param>
            <param name="view">The view.</param>
            <param name="handle">The handle.</param>
            <returns>Good if successful; An error code otherwise.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.INodeManager.GetNodeHandle(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,System.UInt32,UnifiedAutomation.UaServer.NodeAttributeHandle@)">
            <summary>
            Gets the node handle for the specified node and attribute.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodeId">The node id.</param>
            <param name="attributeId">The attribute id.</param>
            <param name="handle">The handle.</param>
            <returns>Good if successful; An error code otherwise.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.INodeManager.GetNotifierHandle(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.NotifierHandle@)">
            <summary>
            Gets the notifier handle for the specified notifier.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodeId">The node id.</param>
            <param name="handle">The handle.</param>
            <returns>Good if successful; An error code otherwise.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.INodeManager.GetMethodHandle(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.MethodHandle@)">
            <summary>
            Gets the method handle for the specified object and method.
            </summary>
            <param name="context">The request context.</param>
            <param name="objectId">The object id.</param>
            <param name="methodId">The method id.</param>
            <param name="handle">The handle.</param>
            <returns>Good if successful; An error code otherwise.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.INodeManager.GetHistoryDataHandle(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.HistoryDataHandle@)">
            <summary>
            Gets the history data handle for the specified variable.
            </summary>
            <param name="context">The request context.</param>
            <param name="variableId">The variable id.</param>
            <param name="handle">The handle.</param>
            <returns>
            Good if successful; An error code otherwise.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.INodeManager.GetHistoryEventHandle(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.HistoryEventHandle@)">
            <summary>
            Gets the history events handle for the specified notifier.
            </summary>
            <param name="context">The request context.</param>
            <param name="notifierId">The notifier id.</param>
            <param name="handle">The handle.</param>
            <returns>
            Good if successful; An error code otherwise.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.INodeManager.BeginBrowse(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.BrowseOperationHandle,UnifiedAutomation.UaServer.ContinuationPoint,System.Boolean,System.Delegate,System.Object)">
            <summary>
            Begins a browse operation.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodeToBrowse">The node to browse.</param>
            <param name="continuationPoint">The continuation point.</param>
            <param name="releaseContinuationPoint">if set to <c>true</c> [release continuation point].</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <returns>Good if successful; An error code otherwise.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.INodeManager.BeginTranslate(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.BrowseOperationHandle,UnifiedAutomation.UaBase.RelativePath,System.UInt32,System.Delegate,System.Object)">
            <summary>
            Begins a translate browse paths operation.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodeToBrowse">The node to browse.</param>
            <param name="relativePath">The relative path.</param>
            <param name="index">The index.</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <returns>Good if successful; An error code otherwise.</returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.INodeManagerEx">
            <summary>
            An interface to an object that manages a subset of the nodes in a server.
            </summary>
            <remarks>
            This interface only needs to be implemented by NodeManagers that allow other NodeManagers to link to them.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.INodeManagerEx.AddCrossReference(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.INodeManager)">
            <summary>
            Adds a cross reference.
            </summary>
            <param name="sourceNodeId">The source node id.</param>
            <param name="manager">The node manager.</param>
            <remarks>
            The source node is a node managed by the NodeManager being called. This method tells the
            NodeManager that references from the source exist in another NodeManager. When the source
            is browsed the NodeManager will call the BeginBrowse method on the NodeManger
            passed to this method.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.INodeManagerEx.RemoveCrossReference(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.INodeManager)">
            <summary>
            Removes a cross reference.
            </summary>
            <param name="sourceNodeId">The source node id.</param>
            <param name="manager">The node manager.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.BrowseCompletedEventHandler">
            <summary>
            A function that is called when a browse operation completes.
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <param name="callbackData">The callback data.</param>
            <param name="browseResult">The browse result.</param>
            <param name="continuationPoint">The continuation point.</param>
            <param name="doNotBlockThread">if set to <c>true</c> do not block thread.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.TranslateCompletedEventHandler">
            <summary>
            A function that is called when a translate browse paths operation completes.
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <param name="callbackData">The callback data.</param>
            <param name="browseResult">The browse result.</param>
            <param name="doNotBlockThread">if set to <c>true</c> do not block thread.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.DataSamplingManager">
            <summary>
            A class that polls one or more I/O managers for data changes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DataSamplingManager.#ctor(UnifiedAutomation.UaServer.ServerManager)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.DataSamplingManager"/> class.
            </summary>
            <param name="server">The server.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DataSamplingManager.Dispose">
            <summary>
            Frees any unmanaged resources.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DataSamplingManager.Dispose(System.Boolean)">
            <summary>
            An overrideable version of the Dispose.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DataSamplingManager.StartMonitoring(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MonitoredItemHandle,UnifiedAutomation.UaBase.MonitoredItemCreateRequest,UnifiedAutomation.UaServer.DataChangeEventHandler)">
            <summary>
            Starts the monitoring.
            </summary>
            <param name="context">The request context.</param>
            <param name="handle">The handle.</param>
            <param name="request">The request.</param>
            <param name="callback">The callback.</param>
            <returns>The revised sampling interval.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DataSamplingManager.ModifyMonitoring(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MonitoredItemHandle,UnifiedAutomation.UaBase.MonitoredItemModifyRequest)">
            <summary>
            Modified the monitoring.
            </summary>
            <param name="context">The request context.</param>
            <param name="handle">The handle.</param>
            <param name="request">The request.</param>
            <returns>The revised sampling interval.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DataSamplingManager.SetMonitoringMode(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MonitoredItemHandle,UnifiedAutomation.UaBase.MonitoringMode)">
            <summary>
            Sets the monitoring mode.
            </summary>
            <param name="context">The request context.</param>
            <param name="item">The item.</param>
            <param name="monitoringMode">The monitoring mode.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DataSamplingManager.StopMonitoring(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MonitoredItemHandle)">
            <summary>
            Stops the monitoring.
            </summary>
            <param name="context">The request context.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DataSamplingManager.SessionActivated(UnifiedAutomation.UaServer.Session)">
            <summary>
            Session is activated.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DataSamplingManager.SessionClosed(UnifiedAutomation.UaServer.Session)">
            <summary>
            Session is closed.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DataSamplingManager.UpdateGroupSampleTime(UnifiedAutomation.UaServer.DataSamplingManager.MonitoringGroup)">
            <summary>
            Updates the group sample time.
            </summary>
            <param name="group">The group.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DataSamplingManager.CheckPollingThreadState">
            <summary>
            Checks the state of the thread.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DataSamplingManager.DoPoll">
            <summary>
            Does the poll.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DataSamplingManager.ReadGroup(UnifiedAutomation.UaServer.DataSamplingManager.MonitoringGroup)">
            <summary>
            Reads the group.
            </summary>
            <param name="group">The group.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DataSamplingManager.ReportItem(UnifiedAutomation.UaServer.DataSamplingManager.MonitoringGroupItem,UnifiedAutomation.UaBase.DataValue)">
            <summary>
            Reports the item.
            </summary>
            <param name="item">The item.</param>
            <param name="dataValue">The data value.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DataSamplingManager.OnReadCompleteEventHandler(UnifiedAutomation.UaServer.NodeAttributeOperationHandle,System.Object,UnifiedAutomation.UaBase.DataValue,System.Boolean)">
            <summary>
            Called when [read complete event handler].
            </summary>
            <param name="nodeHandle">The node handle.</param>
            <param name="userData">The user data.</param>
            <param name="dataValue">The data value.</param>
            <param name="doNotBlockThread">if set to <c>true</c> then the current thread should not be blocked.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.DataSamplingManager.MonitoringGroupItem">
            <summary>
            A group of monitored items.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DataSamplingManager.MonitoringGroupItem.MonitoredItemId">
            <summary>
            Gets the monitored item id.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.DataSamplingManager.MonitoringGroup">
            <summary>
            A group of monitored items.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DataSamplingManager.MonitoringGroup.#ctor(UnifiedAutomation.UaServer.DataSamplingManager.MonitoringGroupId)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.DataSamplingManager.MonitoringGroup"/> class.
            </summary>
            <param name="groupId">The group id.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DataSamplingManager.MonitoringGroup.Remove(UnifiedAutomation.UaServer.DataSamplingManager.MonitoringGroupItem)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.DataSamplingManager.MonitoringGroupId">
            <summary>
            The unique identifier for a group.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DataSamplingManager.MonitoringGroupId.#ctor(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.IIOManager)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.DataSamplingManager.MonitoringGroupId"/> class.
            </summary>
            <param name="context">The request context.</param>
            <param name="manager">The manager.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DataSamplingManager.MonitoringGroupId.PreferredLocales">
            <summary>
            Gets or sets the preferred locales.
            </summary>
            <value>
            The preferred locales.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DataSamplingManager.MonitoringGroupId.UserIdentity">
            <summary>
            Gets or sets the user identity.
            </summary>
            <value>
            The user identity.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.DataSamplingManager.MonitoringGroupId.IOManager">
            <summary>
            Gets or sets the IO manager.
            </summary>
            <value>
            The IO manager.
            </value>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DataSamplingManager.MonitoringGroupId.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
              </exception>
        </member>
        <member name="M:UnifiedAutomation.UaServer.DataSamplingManager.MonitoringGroupId.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.NodeAttributeId">
            <summary>
            A class that stores a NodeId/AttributeId pair.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.NodeAttributeId.#ctor(UnifiedAutomation.UaBase.NodeId,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.NodeAttributeId"/> class.
            </summary>
            <param name="nodeId">The node id.</param>
            <param name="attributeId">The attribute id.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.NodeAttributeId.NodeId">
            <summary>
            Gets or sets the node id.
            </summary>
            <value>
            The node id.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.NodeAttributeId.AttributeId">
            <summary>
            Gets or sets the attribute id.
            </summary>
            <value>
            The attribute id.
            </value>
        </member>
        <member name="M:UnifiedAutomation.UaServer.NodeAttributeId.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
              </exception>
        </member>
        <member name="M:UnifiedAutomation.UaServer.NodeAttributeId.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.NodeMetadata">
            <summary>
            The metadata for a node.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.NodeMetadata.NodeId">
            <summary>
            Gets or sets the node id.
            </summary>
            <value>
            The node id.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.NodeMetadata.NodeClass">
            <summary>
            Gets or sets the node class.
            </summary>
            <value>
            The node class.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.NodeMetadata.BrowseName">
            <summary>
            Gets or sets the name of the browse.
            </summary>
            <value>
            The name of the browse.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.NodeMetadata.DisplayName">
            <summary>
            Gets or sets the display name.
            </summary>
            <value>
            The display name.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.NodeMetadata.TypeDefinitionId">
            <summary>
            Gets or sets the type definition id.
            </summary>
            <value>
            The type definition id.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.NodeMetadata.DataTypeId">
            <summary>
            Gets or sets the data type id.
            </summary>
            <value>
            The data type id.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.NodeMetadata.ValueRank">
            <summary>
            Gets or sets the value rank.
            </summary>
            <value>
            The value rank.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.NodeMetadata.ArrayDimensions">
            <summary>
            Gets or sets the array dimensions.
            </summary>
            <value>
            The array dimensions.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.NodeMetadataMask">
            <summary>
            The fields to return in the node metadata.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.NodeMetadataMask.NodeClass">
            <summary>
            The node class.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.NodeMetadataMask.BrowseName">
            <summary>
            The browse name.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.NodeMetadataMask.DisplayName">
            <summary>
            The browse name.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.NodeMetadataMask.TypeDefinition">
            <summary>
            The type definition.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.NodeMetadataMask.DataType">
            <summary>
            The data type, value rank and array dimensions.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.TypeManager">
            <summary>
            An object that manages the types in the address space.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TypeManager.#ctor(UnifiedAutomation.UaServer.ServerManager)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.TypeManager"/> class.
            </summary>
            <param name="server">The server.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TypeManager.IsKnown(UnifiedAutomation.UaBase.ExpandedNodeId)">
            <summary>
            Determines whether a handle id is a known type id.
            </summary>
            <param name="typeId">The type extended identifier.</param>
            <returns>
              <c>true</c> if the specified type id is known; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TypeManager.IsKnown(UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Determines whether a handle id is a known type id.
            </summary>
            <param name="typeId">The type identifier.</param>
            <returns>
              <c>true</c> if the specified type id is known; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TypeManager.FindSuperType(UnifiedAutomation.UaBase.ExpandedNodeId)">
            <summary>
            Returns the immediate supertype for the type.
            </summary>
            <param name="typeId">The extended type identifier.</param>
            <returns>
            A type identifier of the <paramref name="typeId "/>
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TypeManager.FindSuperType(UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Returns the immediate supertype for the type.
            </summary>
            <param name="typeId">The type identifier.</param>
            <returns>
            The immediate supertype idnetyfier for <paramref name="typeId"/>
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TypeManager.IsTypeOf(UnifiedAutomation.UaBase.ExpandedNodeId,UnifiedAutomation.UaBase.ExpandedNodeId)">
            <summary>
            Determines whether a type is a subtype of another type.
            </summary>
            <param name="subTypeId">The subtype identifier.</param>
            <param name="superTypeId">The supertype identifier.</param>
            <returns>
              <c>true</c> if <paramref name="superTypeId"/> is supertype of <paramref name="subTypeId"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TypeManager.IsTypeOf(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Determines whether a type is a subtype of another type.
            </summary>
            <param name="subTypeId">The subtype identifier.</param>
            <param name="superTypeId">The supertype identyfier.</param>
            <returns>
              <c>true</c> if <paramref name="superTypeId"/> is supertype of <paramref name="subTypeId"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TypeManager.FindReferenceTypeName(UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Returns the handle identifier for the reference type with the specified browse name.
            </summary>
            <param name="referenceTypeId">The reference type id.</param>
            <returns>
            The identifier for the <paramref name="referenceTypeId"/>
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TypeManager.FindReferenceType(UnifiedAutomation.UaBase.QualifiedName)">
            <summary>
            Returns the handle identifier for the reference type with the specified browse name.
            </summary>
            <param name="browseName">Browse name of the reference.</param>
            <returns>
            The identifier for the <paramref name="browseName"/>
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TypeManager.FindDataTypeId(UnifiedAutomation.UaBase.ExpandedNodeId)">
            <summary>
            Returns the data type for the specified encoding.
            </summary>
            <param name="encodingId">The encoding id.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TypeManager.FindDataTypeId(UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Returns the data type for the specified encoding.
            </summary>
            <param name="encodingId">The encoding id.</param>
            <returns>
            The data type for the <paramref name="encodingId"/>
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TypeManager.RegisterType(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Registers the type.
            </summary>
            <param name="subtypeId">The subtype id.</param>
            <param name="superTypeId">The super type id.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TypeManager.UnregisterType(UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Unregisters the type.
            </summary>
            <param name="typeId">The type id.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TypeManager.RegisterReferenceType(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.QualifiedName)">
            <summary>
            Registers the type of the reference.
            </summary>
            <param name="referenceTypeId">The reference type id.</param>
            <param name="referenceTypeName">Name of the reference type.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TypeManager.UnregisterReferenceType(UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Unregisters the type of the reference.
            </summary>
            <param name="referenceTypeId">The reference type id.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TypeManager.RegisterEncoding(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Registers the encoding.
            </summary>
            <param name="encodingId">The encoding id.</param>
            <param name="dataTypeId">The data type id.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TypeManager.UnregisterEncoding(UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Unregisters the type.
            </summary>
            <param name="encodingId">The encoding id.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TypeManager.RegisterFullyInstantiatedType(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.FullyInstantiatedType)">
            <summary>
            Registers a fully instantiated type.
            </summary>
            <param name="typeId">The type id.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TypeManager.UnregisterFullyInstantiatedType(UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Unregisters a fully instantiated type.
            </summary>
            <param name="typeId">The type id.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TypeManager.FindFullyInstantiatedType(UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Finds a fully instantiated type.
            </summary>
            <param name="typeId">The type id.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.FullyInstantiatedType">
            <summary>
            A fully instantiated type.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.FullyInstantiatedInstance">
            <summary>
            An instance belonging to a fully instantiated type.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.FullyInstantiatedReference">
            <summary>
            A reference belonging to a fully instantiated type.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.CrossReferenceManager">
            <summary>
            Manages the cross references for a node manager.
            </summary>
            <remarks>
            A cross reference is a reference between nodes managed by difference node managers.
            The CrossReferenceManager manages these references for a single node manager.
            An 'IncomingReference' is a reference from a node another node manager.
            An 'OutgoingReference' is a reference from a node in this node manager to a node in another node manager.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.CrossReferenceManager.#ctor(UnifiedAutomation.UaServer.ServerManager,UnifiedAutomation.UaServer.INodeManager)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.CrossReferenceManager"/> class.
            </summary>
            <param name="server">The server.</param>
            <param name="nodeManager">The node manager.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.CrossReferenceManager.AddCrossReference(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.INodeManager)">
            <summary>
            Adds the cross reference.
            </summary>
            <param name="sourceNodeId">The source node id.</param>
            <param name="manager">The manager.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.CrossReferenceManager.RemoveCrossReference(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.INodeManager)">
            <summary>
            Removes the cross reference.
            </summary>
            <param name="sourceNodeId">The source node id.</param>
            <param name="manager">The manager.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.CrossReferenceManager.AddIncomingReferences(UnifiedAutomation.UaServer.BrowseHandle,System.Collections.Generic.IList{UnifiedAutomation.UaBase.ReferenceNode})">
            <summary>
            Adds the incoming references.
            </summary>
            <param name="target">The target.</param>
            <param name="references">The references.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.CrossReferenceManager.RemoveIncomingReferences(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Removes the incoming references.
            </summary>
            <param name="targetId">The target id.</param>
            <param name="sourceId">The source id.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.CrossReferenceManager.GetOutgoingReferences(UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Gets the incoming references for the source.
            </summary>
            <param name="sourceNodeId">The source node id.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.CrossReferenceManager.GetIncomingReferences(UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Gets the incoming references for the source.
            </summary>
            <param name="sourceNodeId">The source node id.</param>
            <returns></returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.RootNodeManager">
            <summary>
            The root node manager for a server.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RootNodeManager.#ctor(UnifiedAutomation.UaServer.ServerManager)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.RootNodeManager"/> class.
            </summary>
            <param name="server">The server.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RootNodeManager.Dispose">
            <summary>
            Frees any unmanaged resources.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RootNodeManager.Dispose(System.Boolean)">
            <summary>
            An overrideable version of the Dispose.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RootNodeManager.Startup">
            <summary>
            Called when the node manager is started.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RootNodeManager.Shutdown">
            <summary>
            Called when the node manager is stopped.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RootNodeManager.SessionOpened(UnifiedAutomation.UaServer.Session)">
            <summary>
            Called when a new session is created.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RootNodeManager.SessionActivated(UnifiedAutomation.UaServer.Session)">
            <summary>
            Called when a session is activated.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RootNodeManager.SessionClosed(UnifiedAutomation.UaServer.Session)">
            <summary>
            Called when a new session is closed.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RootNodeManager.GetBrowseHandle(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.ViewHandle,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.BrowseHandle@)">
            <summary>
            Gets the browse handle for the specified node.
            </summary>
            <param name="context">The request context.</param>
            <param name="view">The view.</param>
            <param name="nodeId">The node id.</param>
            <param name="handle">The handle.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RootNodeManager.GetViewHandle(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.ViewDescription,UnifiedAutomation.UaServer.ViewHandle@)">
            <summary>
            Gets the view handle for the specified view.
            </summary>
            <param name="context">The request context.</param>
            <param name="view">The view.</param>
            <param name="handle">The handle.</param>
            <returns>
            Good if successful; An error code otherwise.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RootNodeManager.GetNodeHandle(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,System.UInt32,UnifiedAutomation.UaServer.NodeAttributeHandle@)">
            <summary>
            Gets the node handle for the specified node.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodeId">The node id.</param>
            <param name="attributeId">The attribute id.</param>
            <param name="handle">The handle.</param>
            <returns>
            Good if successful; An error code otherwise.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RootNodeManager.GetNotifierHandle(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.NotifierHandle@)">
            <summary>
            Gets the notifier handle for the specified notifier.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodeId">The node id.</param>
            <param name="handle">The handle.</param>
            <returns>
            Good if successful; An error code otherwise.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RootNodeManager.GetMethodHandle(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.MethodHandle@)">
            <summary>
            Gets the notifier handle for the specified notifier.
            </summary>
            <param name="context">The request context.</param>
            <param name="objectId">The object id.</param>
            <param name="methodId">The method id.</param>
            <param name="handle">The handle.</param>
            <returns>
            Good if successful; An error code otherwise.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RootNodeManager.GetHistoryDataHandle(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.HistoryDataHandle@)">
            <summary>
            Gets the history data handle for the specified variable.
            </summary>
            <param name="context">The request context.</param>
            <param name="variableId">The variable id.</param>
            <param name="handle">The handle.</param>
            <returns>
            Good if successful; An error code otherwise.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RootNodeManager.GetHistoryEventHandle(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.HistoryEventHandle@)">
            <summary>
            Gets the history events handle for the specified notifier.
            </summary>
            <param name="context">The request context.</param>
            <param name="notifierId">The notifier id.</param>
            <param name="handle">The handle.</param>
            <returns>
            Good if successful; An error code otherwise.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RootNodeManager.BeginBrowse(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.BrowseOperationHandle,UnifiedAutomation.UaServer.ContinuationPoint,System.Boolean,System.Delegate,System.Object)">
            <summary>
            Begins the browse.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodeToBrowse">The node to browse.</param>
            <param name="continuationPoint">The continuation point.</param>
            <param name="releaseContinuationPoint">if set to <c>true</c> [release continuation point].</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <returns>
            Good if successful; An error code otherwise.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RootNodeManager.BeginTranslate(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.BrowseOperationHandle,UnifiedAutomation.UaBase.RelativePath,System.UInt32,System.Delegate,System.Object)">
            <summary>
            Begins the translate browse paths.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodeToBrowse">The node to browse.</param>
            <param name="relativePath">The relative path.</param>
            <param name="index">The index.</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <returns>
            Good if successful; An error code otherwise.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RootNodeManager.AddCrossReference(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.INodeManager)">
            <summary>
            Adds the cross reference.
            </summary>
            <param name="sourceNodeId">The source node id.</param>
            <param name="manager">The manager.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RootNodeManager.RemoveCrossReference(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.INodeManager)">
            <summary>
            Removes the cross reference.
            </summary>
            <param name="sourceNodeId">The source node id.</param>
            <param name="manager">The manager.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RootNodeManager.IsReferenceInView(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.ViewHandle,UnifiedAutomation.UaServer.BrowseHandle,UnifiedAutomation.UaBase.NodeId,System.Boolean,UnifiedAutomation.UaBase.ExpandedNodeId)">
            <summary>
            Determines whether the reference is in the specified view.
            </summary>
            <param name="context">The request context.</param>
            <param name="view">The view.</param>
            <param name="sourceHandle">The source handle.</param>
            <param name="referenceTypeId">The reference type id.</param>
            <param name="isInverse">if set to <c>true</c> then the reference is an inverse reference.</param>
            <param name="targetId">The target id.</param>
            <returns>
            <c>true</c> if the reference is in the view; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RootNodeManager.LinkModelToNode(UnifiedAutomation.UaBase.NodeId,System.Object,System.Object,UnifiedAutomation.UaBase.IModelMapper,System.Double)">
            <summary>
            Links an object to a node in the address space.
            </summary>
            <param name="rootId">The root id.</param>
            <param name="instance">The instance.</param>
            <param name="syncLock">The sync lock.</param>
            <param name="mapper">The mapper.</param>
            <param name="minimumSamplingInterval">The minimum sampling interval.</param>
            <returns>
            A handle that can be used to unlink the node.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RootNodeManager.UnlinkModelFromNode(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.ModelHandle)">
            <summary>
            Unlinks a object from a node in the address space.
            </summary>
            <param name="rootId">The root id.</param>
            <param name="handle">The handle.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RootNodeManager.AddNode(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.AddNodeSettings,UnifiedAutomation.UaBase.NodeId@)">
            <summary>
            Adds a new node.
            </summary>
            <param name="context">The request context.</param>
            <param name="settings">The settings.</param>
            <param name="assignedNodeId">The assigned node id.</param>
            <returns>
            Good if successful; Otherwise an error code.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RootNodeManager.DeleteNode(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,System.Boolean)">
            <summary>
            Deletes a node.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodeId">The node id.</param>
            <param name="deleteTargetReferences">if set to <c>true</c> [delete target references].</param>
            <returns>
            Good if successful; Otherwise an error code.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RootNodeManager.AddReference(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,System.Boolean,UnifiedAutomation.UaBase.ExpandedNodeId,System.Boolean)">
            <summary>
            Adds a reference.
            </summary>
            <param name="context">The request context.</param>
            <param name="sourceNodeId">The source node id.</param>
            <param name="referenceTypeId">The reference type id.</param>
            <param name="isInverse">if set to <c>true</c> then the reference is a inverse reference.</param>
            <param name="targetNodeId">The target node id.</param>
            <param name="addBiDirectional">if set to <c>true</c> then the reverse reference is added as well.</param>
            <returns>
            Good if successful; Otherwise an error code.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RootNodeManager.DeleteReference(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,System.Boolean,UnifiedAutomation.UaBase.ExpandedNodeId,System.Boolean)">
            <summary>
            Deletes a reference.
            </summary>
            <param name="context">The request context.</param>
            <param name="sourceNodeId">The source node id.</param>
            <param name="referenceTypeId">The reference type id.</param>
            <param name="isInverse">if set to <c>true</c> then the reference is a inverse reference.</param>
            <param name="targetNodeId">The target node id.</param>
            <param name="deleteBiDirectional">if set to <c>true</c> then the reverse reference is deleted as well.</param>
            <returns>
            Good if successful; Otherwise an error code.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RootNodeManager.BeginEventTransaction(UnifiedAutomation.UaServer.RequestContext,System.UInt32,UnifiedAutomation.UaServer.TransactionType,System.Delegate,System.Object,UnifiedAutomation.UaServer.TransactionHandle@)">
            <summary>
            Begins the transaction.
            </summary>
            <param name="context">The request context.</param>
            <param name="totalItemCountHint">The total item count hint.</param>
            <param name="transactionType">Type of the transaction.</param>
            <param name="callback">The callback to raise when an opereation completes.</param>
            <param name="callbackData">The callback data.</param>
            <param name="handle">The transaction handle.</param>
            <returns>
            Good if the transaction could be created, an error code otherwise.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RootNodeManager.FinishEventTransaction(UnifiedAutomation.UaServer.TransactionHandle)">
            <summary>
            Finishes the transaction.
            </summary>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RootNodeManager.BeginStartEventMonitoring(UnifiedAutomation.UaServer.NotifierOperationHandle,UnifiedAutomation.UaBase.MonitoredItemCreateRequest,System.UInt32,UnifiedAutomation.UaServer.EventNotificationEventHandler)">
            <summary>
            Starts monitoring a notifier for events.
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <param name="settings">The settings.</param>
            <param name="monitoredItemId">The monitored item id.</param>
            <param name="callback">The callback.</param>
            <returns>
            Good if the monitored item can be created, an error code otherwise.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RootNodeManager.BeginModifyEventMonitoring(UnifiedAutomation.UaServer.MonitoredItemOperationHandle,UnifiedAutomation.UaBase.MonitoredItemModifyRequest)">
            <summary>
            Modifies the monitoring for an item.
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <param name="settings">The settings.</param>
            <returns>
            Good if the monitored item can be modified, an error code otherwise.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RootNodeManager.BeginStopEventMonitoring(UnifiedAutomation.UaServer.MonitoredItemOperationHandle)">
            <summary>
            Stops monitoring an item.
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <returns>
            Good if the monitored item can be modified, an error code otherwise.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RootNodeManager.BeginSetEventMonitoringMode(UnifiedAutomation.UaServer.MonitoredItemOperationHandle,UnifiedAutomation.UaBase.MonitoringMode,UnifiedAutomation.UaBase.MonitoringParameters)">
            <summary>
            Changes the monitoring mode for an item.
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <param name="monitoringMode">The monitoring mode.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            Good if the monitored item can be modified, an error code otherwise.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RootNodeManager.EventMonitoringStarted(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.MonitoredItemHandle,UnifiedAutomation.UaBase.MonitoringParameters,UnifiedAutomation.UaServer.EventNotificationEventHandler)">
            <summary>
            Called when monitoring starts for a notifier from another IEventManager higher in the hierarchy.
            </summary>
            <param name="context">The context.</param>
            <param name="notifierId">The id for the notifier in the other IEventManager.</param>
            <param name="itemHandle">The item handle.</param>
            <param name="parameters">The parameters.</param>
            <param name="callback">The callback to use when events occur.</param>
            <exception cref="T:System.ArgumentNullException">notifierId</exception>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RootNodeManager.EventMonitoringModified(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.MonitoredItemHandle,UnifiedAutomation.UaBase.MonitoringParameters)">
            <summary>
            Called when monitoring changes for a notifier from another IEventManager higher in the hierarchy.
            </summary>
            <param name="context">The context.</param>
            <param name="notifierId">The id for the notifier in the other IEventManager.</param>
            <param name="itemHandle">The item handle.</param>
            <param name="parameters">The parameters.</param>
            <exception cref="T:System.ArgumentNullException">notifierId</exception>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RootNodeManager.EventMonitoringStopped(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.MonitoredItemHandle)">
            <summary>
            Called when monitoring stops for a notifier from another IEventManager higher in the hierarchy.
            </summary>
            <param name="context">The context.</param>
            <param name="notifierId">The id for the notifier in the other IEventManager.</param>
            <param name="itemHandle">The item handle.</param>
            <exception cref="T:System.ArgumentNullException">notifierId</exception>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RootNodeManager.ReportEvent(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Reports an event for the notifier id.
            </summary>
            <param name="notifierId">The notifier id.</param>
            <param name="e">The event.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RootNodeManager.ConditionRefresh(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.MonitoredItemHandle,UnifiedAutomation.UaServer.EventNotificationEventHandler)">
            <summary>
            Called when the condition refresh is called for a notifier higher in the hierarchy.
            </summary>
            <param name="context">The context.</param>
            <param name="notifierId">The id for the notifier.</param>
            <param name="itemHandle">The item handle.</param>
            <param name="callback">The callback to call with the current state of all conditions.</param>
            <exception cref="T:System.ArgumentNullException">notifierId</exception>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RootNodeManager.AddNotifier(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.IEventManager)">
            <summary>
            Adds a link to a notifier.
            </summary>
            <param name="notifierId">The notifier id.</param>
            <param name="manager">The manager.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RootNodeManager.RemoveNotifier(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.IEventManager)">
            <summary>
            Removes a link to a notifier.
            </summary>
            <param name="notifierId">The notifier id.</param>
            <param name="manager">The manager.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.RootNodeManager.CoreNodeManager">
            <summary>
            Gets the core node manager.
            </summary>
            <value>
            The core node manager.
            </value>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RootNodeManager.FindNodeManager(System.UInt16)">
            <summary>
            Finds the node manager responsible for the specified namespace.
            </summary>
            <param name="namespaceIndex">Index of the namespace.</param>
            <returns>The matching node manager.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RootNodeManager.AddNodeManager(UnifiedAutomation.UaServer.BaseNodeManager)">
            <summary>
            Adds a node manager.
            </summary>
            <param name="nodeManager">The node manager.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RootNodeManager.AddNodeManager(System.String,UnifiedAutomation.UaServer.INodeManager)">
            <summary>
            Adds q node manager.
            </summary>
            <param name="namespaceUri">The namespace URI.</param>
            <param name="nodeManager">The node manager.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.RequestContext">
             <summary>
            
             </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RequestContext.#ctor(UnifiedAutomation.UaServer.ServerManager,System.String[],UnifiedAutomation.UaServer.UserIdentity,UnifiedAutomation.UaServer.ServiceType)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.RequestContext"/> class.
            </summary>
            <param name="server">The server.</param>
            <param name="preferredLocales">The preferred locales.</param>
            <param name="identity">The identity.</param>
            <param name="requestType">Type of the request.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RequestContext.#ctor(UnifiedAutomation.UaServer.ServerManager,UnifiedAutomation.UaBase.RequestHeader,UnifiedAutomation.UaServer.ServiceType)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.RequestContext"/> class.
            </summary>
            <param name="server">The server.</param>
            <param name="requestHeader">The request header.</param>
            <param name="requestType">Type of the request.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RequestContext.#ctor(UnifiedAutomation.UaServer.Session,UnifiedAutomation.UaBase.RequestHeader,UnifiedAutomation.UaServer.ServiceType)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.RequestContext"/> class.
            </summary>
            <param name="session">The session.</param>
            <param name="requestHeader">The request header.</param>
            <param name="requestType">Type of the request.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RequestContext.Initialize(UnifiedAutomation.UaBase.RequestHeader,UnifiedAutomation.UaServer.ServiceType)">
            <summary>
            Initializes the specified request header.
            </summary>
            <param name="requestHeader">The request header.</param>
            <param name="requestType">Type of the request.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.RequestContext.ChannelContext">
            <summary>
            Gets the channel context.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.RequestContext.SecurityPolicyUri">
            <summary>
            Gets the security policy URI.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.RequestContext.RequestType">
            <summary>
            Gets the type of the request.
            </summary>
            <value>
            The type of the request.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.RequestContext.IsDefaultServerContext">
            <summary>
            Gets a value indicating whether this instance is default server context.
            </summary>
            <value>
            <c>true</c> if this instance is default server context; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.RequestContext.Session">
            <summary>
            Gets the session.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.RequestContext.SessionId">
            <summary>
            Gets the session id.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.RequestContext.UserIdentity">
            <summary>
            Gets the user identity.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.RequestContext.ScopeIds">
            <summary>
            Gets the user identity.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.RequestContext.SecurityMode">
            <summary>
            The security mode associated with the context.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.RequestContext.PreferredLocales">
            <summary>
            Gets the preferred locales.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.RequestContext.DiagnosticsMasks">
            <summary>
            Gets the diagnostics masks.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.RequestContext.DiagnosticsStrings">
            <summary>
            Gets the diagnostics strings.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.RequestContext.AuditEntryId">
            <summary>
            Gets the audit entry id.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.RequestContext.ClientHandle">
            <summary>
            Gets the client handle.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.RequestContext.UserData">
            <summary>
            Gets or sets the user data.
            </summary>
            <value>
            The user data.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.RequestContext.OperationDeadline">
            <summary>
            Gets the operation deadline.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.RequestContext.OperationStatus">
            <summary>
            Gets or sets the operation status.
            </summary>
            <value>
            The operation status.
            </value>
        </member>
        <member name="M:UnifiedAutomation.UaServer.RequestContext.IsOperationAborted">
            <summary>
            Determines whether is operation has aborted.
            </summary>
            <returns>
              <c>true</c> if the operation has aborted; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:UnifiedAutomation.UaServer.RequestContext.Incoming">
            <summary>
            Gets or sets the request (used to cancel the request).
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ResourceManager">
            <summary>
            An object that manages access to localized resources.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ResourceManager.#ctor(UnifiedAutomation.UaBase.ApplicationInstance)">
            <summary>
            Initializes the resource manager with the server instance that owns it.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ResourceManager.Dispose">
            <summary>
            May be called by the application to clean up resources.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ResourceManager.Dispose(System.Boolean)">
            <summary>
            Cleans up all resources held by the object.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ResourceManager.Translate(System.Collections.Generic.IList{System.String},System.String,System.String,System.Object[])">
            <summary>
            Translates the text and then formats it with the arguments provided.
            </summary>
            <param name="preferredLocales">The list of preferred locales</param>
            <param name="key">The key used to look up the translation</param>
            <param name="text">The text to translate</param>
            <param name="args">The format argumente</param>
            <returns>
            The translated text
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ResourceManager.Translate(System.Collections.Generic.IList{System.String},UnifiedAutomation.UaBase.LocalizedText)">
            <summary>
            Translates the LocalizedText using the information in the TranslationInfo property.
            </summary>
            <param name="preferredLocales">The preferred locales.</param>
            <param name="defaultText">The default text.</param>
            <returns></returns>
            <returns>
            The translated text
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ResourceManager.Translate(System.Collections.Generic.IList{System.String},UnifiedAutomation.UaBase.StatusCode)">
            <summary>
            Translates the specified preferred locales.
            </summary>
            <param name="preferredLocales">The preferred locales.</param>
            <param name="result">The result.</param>
            <returns>
            The translated status code
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ResourceManager.GetAvailableLocales">
            <summary>
            Returns the locales supported by the resource manager.
            </summary>
            <returns>The available locales</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ResourceManager.Add(System.String,System.String,System.String)">
            <summary>
            Adds a translation to the resource manager.
            </summary>
            <param name="key">The key.</param>
            <param name="locale">The locale.</param>
            <param name="text">The text.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ResourceManager.Add(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Adds the translations to the resource manager.
            </summary>
            <param name="locale">The locale.</param>
            <param name="translations">The translations.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ResourceManager.Add(System.UInt32,System.String,System.String)">
            <summary>
            Adds the translations to the resource manager.
            </summary>
            <param name="statusCode">The status code.</param>
            <param name="locale">The locale.</param>
            <param name="text">The text.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ResourceManager.Add(System.Xml.XmlQualifiedName,System.String,System.String)">
            <summary>
            Adds the translations to the resource manager.
            </summary>
            <param name="symbolicId">The symbolic id.</param>
            <param name="locale">The locale.</param>
            <param name="text">The text.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ResourceManager.LoadDefaultText">
            <summary>
            Uses reflection to load default text for standard StatusCodes.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ResourceManager.TranslationTable">
            <summary>
            Stores the translations for a locale.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ResourceManager.GetTable(System.String)">
            <summary>
            Finds the translation table for the locale. Creates a new table if it does not exist.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ResourceManager.FindBestTranslation(System.Collections.Generic.IList{System.String},System.String,System.Globalization.CultureInfo@)">
            <summary>
            Finds the best translation for the requested locales.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ResourceManager.TranslateStatusCode(System.Collections.Generic.IList{System.String},UnifiedAutomation.UaBase.StatusCode)">
            <summary>
            Translates a status code.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ResourceManager.TranslateSymbolicId(System.Collections.Generic.IList{System.String},System.String,System.String)">
            <summary>
            Translates a symbolic id.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ServerManager">
            \ingroup UaServerApi
            <summary>
            An implementation of a server.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.Dispose(System.Boolean)">
            <summary>
            An overrideable version of the Dispose.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.OnServerStarting(UnifiedAutomation.UaBase.ApplicationInstance)">
            <summary>
            Called before the server starts.
            </summary>
            <param name="application">The application.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.Configure(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.Model.TraceObjectModel,System.String,System.UInt32,System.Byte,System.Boolean)">
            <summary>
            Called to change the trace configuration for the server.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.SetTraceLevel(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.Model.TraceObjectModel,System.Boolean,UnifiedAutomation.UaServer.Model.TraceLevel)">
            <summary>
            Called to enable or disable tracing for the server.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.RegisterAggregate(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.QualifiedName,UnifiedAutomation.UaServer.AggregatorFactory)">
            <summary>
            Registers the aggregate (saves the factory and creates the objects in the addrres space).
            </summary>
            <param name="aggregateId">The aggregate id.</param>
            <param name="aggregateName">Name of the aggregate.</param>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.OnRegisterAggregates">
            <summary>
            Called to register any aggregates during server initialization.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.OnServerStopping">
            <summary>
            Called before the server stops.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.Stop(System.UInt32,UnifiedAutomation.UaBase.LocalizedText,System.Boolean)">
            <summary>
            Stops the server.
            </summary>
            <param name="secondsTillShutdown">The seconds till shutdown.</param>
            <param name="shutdownReason">The shutdown reason.</param>
            <param name="restart">if set to <c>true</c> [restart].</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.Start(UnifiedAutomation.UaBase.ApplicationInstance)">
            <summary>
            Starts the server (called from a dedicated host process).
            </summary>
            <param name="application">The application.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.Stop">
            <summary>
            Stops the server and releases all resources.
            </summary>
        </member>
        <member name="E:UnifiedAutomation.UaServer.ServerManager.ServerStopped">
            <summary>
            Occurs when the server is stopped.
            </summary>
        </member>
        <member name="E:UnifiedAutomation.UaServer.ServerManager.ServerStarted">
            <summary>
            Occurs when the server is started.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerManager.NamespaceUris">
            <summary>
            Gets the namespace uris.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerManager.TypeManager">
            <summary>
            Gets the type manager.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerManager.FilterManager">
            <summary>
            Gets the filter manager.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerManager.ScopeMapper">
            <summary>
            Gets the ScopeMapper used for importing nodes with a NodeAccessInfo;
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerManager.AggregateManager">
            <summary>
            Gets the aggregate manager.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerManager.SubscriptionManager">
            <summary>
            Gets the subscription manager.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerManager.IsRunning">
            <summary>
            Gets a value indicating whether this instance is running.
            </summary>
            <value>
            <c>true</c> if this instance is running; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerManager.IsRestartInProgress">
            <summary>
            Gets a value indicating whether a restart is in progress.
            </summary>
            <value>
            <c>true</c> if this instance is restartings; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerManager.IsAuditEnabled">
            <summary>
            Gets a value indicating whether auditing is enabled
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerManager.DefaultRequestContext">
            <summary>
            Gets the server context.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerManager.DiagnosticsLock">
            <summary>
            A lock which must be acquired before accessing the diagnostics.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerManager.ServerDiagnostics">
            <summary>
            The diagnostics associated with the server.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerManager.CertificateGroups">
            <summary>
            The certificate groups supported by the server.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerManager.OpcUaNodeSetAssembly">
            <summary>
            Gets or sets the assembly which has the Opc.Ua.NodeSet2 file as an embedded resource.
            </summary>
            <remarks>
            If this property is set, the Opc.Ua.NodeSet2 file from the assembly is used for the
            address space. This property should only be set for prototyping which requires an updated
            version of the namespace "http://opcfoundation.org/UA/".
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.DispatchRequest(UnifiedAutomation.UaBase.IEndpointIncomingRequest)">
            <summary>
            Processes the request.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerManager.SessionManager">
            <summary>
            Gets the session manager.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerManager.ResourceManager">
            <summary>
            Gets the resource manager.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerManager.RootNodeManager">
            <summary>
            Gets the root node manager.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerManager.CoreNodeManager">
            <summary>
            Gets the core node manager.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.SetGetHistoryEventHandleOverride(UnifiedAutomation.UaServer.GetHistoryEventHandleEventHandler)">
            <summary>
            Sets a delegate used to override the GetHistoryEventHandle method for the CoreNodeManager.
            </summary>
            <param name="handler">The handler.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerManager.NextUniqueId">
            <summary>
            Gets the next unique id.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerManager.InternalClient">
            <summary>
            Gets the internal client object.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.ValidateDataMonitoringRequest(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.NodeAttributeHandle,UnifiedAutomation.UaBase.ReadValueId,UnifiedAutomation.UaBase.MonitoringParameters,UnifiedAutomation.UaServer.NodeMetadata)">
            <summary>
            Validates the data monitoring request.
            </summary>
            <param name="context">The request context.</param>
            <param name="nodeHandle">The node handle.</param>
            <param name="itemToMonitor">The item to monitor.</param>
            <param name="parameters">The parameters.</param>
            <param name="metadata">The metadata.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.FindServers(UnifiedAutomation.UaBase.RequestHeader,System.String,UnifiedAutomation.UaBase.StringCollection,UnifiedAutomation.UaBase.StringCollection,UnifiedAutomation.UaBase.ApplicationDescriptionCollection@)">
            <summary>
            Invokes the FindServers service.
            </summary>
            <param name="requestHeader">The common request parameters. The authenticationToken is
            always omitted. The authenticationToken shall be ignored if it is provided.</param>
            <param name="endpointUrl">The network address that the Client used to access the Discovery
            Endpoint. The Server uses this information for diagnostics and to determine what URLs to
            return in the response. The Server should return a suitable default URL if it does not
            recognize the HostName in the URL.</param>
            <param name="localeIds">List of locales to use. The server should return the ServerName
            using one of locales specified. If the server supports more than one of the requested
            locales then the server shall use the locale that appears first in this list. If the
            server does not support any of the requested locales it chooses an appropriate default
            locale. The server chooses an appropriate default locale if this list is empty.</param>
            <param name="serverUris">List of servers to return. All known servers are returned if
            the list is empty.</param>
            <param name="servers">List of Servers that meet criteria specified in the request. This
            list is empty if no servers meet the criteria.</param>
            <returns>
            Returns a description for the ResponseHeader DataType, the return type is <seealso cref="T:UnifiedAutomation.UaBase.ResponseHeader"/>
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.GetEndpoints(UnifiedAutomation.UaBase.RequestHeader,System.String,UnifiedAutomation.UaBase.StringCollection,UnifiedAutomation.UaBase.StringCollection,UnifiedAutomation.UaBase.EndpointDescriptionCollection@)">
            <summary>
            Invokes the GetEndpoints service.
            </summary>
            <param name="requestHeader">The common request parameters. The authenticationToken is
            always omitted. The authenticationToken shall be ignored if it is provided.</param>
            <param name="endpointUrl">The network address that the Client used to access the
            Discovery Endpoint. The Server uses this information for diagnostics and to determine
            what URLs to return in the response. The Server should return a suitable default URL,
            if it does not recognize the HostName in the URL.</param>
            <param name="localeIds">List of locales to use. Specifies the locale to use when
            returning human readable strings.</param>
            <param name="profileUris">List of Transport Profile that the returned Endpoints shall
            support. All Endpoints are returned if the list is empty.</param>
            <param name="endpoints">The endpoints.List of Endpoints that meet criteria specified in
            the request. This list is empty if no Endpoints meet the criteria.</param>
            <returns>
            Returns a description for the ResponseHeader DataType
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.CreateSession(UnifiedAutomation.UaBase.RequestHeader,UnifiedAutomation.UaBase.ApplicationDescription,System.String,System.String,System.String,System.Byte[],System.Byte[],System.Double,System.UInt32,UnifiedAutomation.UaBase.NodeId@,UnifiedAutomation.UaBase.NodeId@,System.Double@,System.Byte[]@,System.Byte[]@,UnifiedAutomation.UaBase.EndpointDescriptionCollection@,UnifiedAutomation.UaBase.SignedSoftwareCertificateCollection@,UnifiedAutomation.UaBase.SignatureData@,System.UInt32@)">
            \internal
            <summary>
            Invokes the CreateSession service.
            </summary>
            <param name="requestHeader">The common request parameters. The authenticationToken is
            always omitted.</param>
            <param name="clientDescription">Information that describes the Client application.</param>
            <param name="serverUri">This value is only specified if the EndpointDescription has a
            gatewayServerUri. This value is the applicationUri from the EndpointDescription which
            is the applicationUri for the underlying Server.</param>
            <param name="endpointUrl">The network address that the Client used to access the Session
            Endpoint. The HostName portion of the URL should be one of the HostNames for the
            application that are specified in the Server’s ApplicationInstanceCertificate. The Server
            shall raise an AuditUrlMismatchEventType event, if the URL does not match the Server‟s
            HostNames. The Server uses this information for diagnostics and to determine the set of
            EndpointDescriptions to return in the response.</param>
            <param name="sessionName">Human readable string that identifies the Session. The Server
            makes this name and the sessionId visible in its AddressSpace for diagnostic purposes.
            The Client should provide a name that is unique for the instance of the Client. If this
            parameter is not specified, the Server shall assign a value.</param>
            <param name="clientNonce">A random number that should never be used in any other request.
            This number shall have a minimum length of 32 bytes. Profiles may increase the required
            length. The Server shall use this value to prove possession of its application instance
            Certificate in the response.</param>
            <param name="clientCertificate">The application instance Certificate issued to the Client.
            If the securityPolicyUri is None, the Client shall not send an ApplicationInstanceCertificate
            and the Server shall ignore the ApplicationInstanceCertificate.</param>
            <param name="requestedSessionTimeout">Requested maximum number of milliseconds that a
            Session should remain open without activity. If the Client fails to issue a Service
            request within this interval, then the Server shall automatically terminate the Client
            Session.</param>
            <param name="maxResponseMessageSize">The maximum size, in bytes, for the body of any
            response message. The Server should return a Bad_ResponseTooLarge service fault if a
            response message exceeds this limit. The value zero indicates that this parameter is
            not used.</param>
            <param name="sessionId">A unique NodeId assigned by the Server to the Session. This
            identifier is used to access the diagnostics information for the Session in the Server
            address space. It is also used in the audit logs and any events that report information
            related to the Session.</param>
            <param name="authenticationToken">A unique identifier assigned by the Server to the
            Session. This identifier shall be passed in the RequestHeader of each request and is
            used with the SecureChannelId to determine whether a Client has access to the Session.
            This identifier shall not be reused in a way that the Client or the Server has a chance
            of confusing them with a previous or existing Session.</param>
            <param name="revisedSessionTimeout">Actual maximum number of milliseconds that a Session
            shall remain open without activity. The Server should attempt to honour the Client
            request for this parameter, but may negotiate this value up or down to meet its own
            constraints.</param>
            <param name="serverNonce">A random number that should never be used in any other request.
            This number shall have a minimum length of 32 bytes. The Client shall use this value to
            prove possession of its application instance Certificate in the ActivateSession request.
            This value may also be used to prove possession of the userIdentityToken it specified in
            the ActivateSession request.</param>
            <param name="serverCertificate">The application instance Certificate issued to the Server.
            A Server shall prove possession by using the private key to sign the Nonce provided by
            the Client in the request. The Client shall verify that this Certificate is the same as
            the one it used to create the SecureChannel. If the securityPolicyUri is NONE and none
            of the UserTokenPolicies requires encryption, the Server shall not send an
            ApplicationInstanceCertificate and the Client shall ignore the
            ApplicationInstanceCertificate.</param>
            <param name="serverEndpoints">List of Endpoints that the server supports. The Server
            shall return a set of EndpointDescriptions available for the serverUri specified in the
            request. The Client shall verify this list with the list from a Discovery Endpoint, if
            it used a Discovery Endpoint to fetch the EndpointDescriptions. It is recommended that
            Servers only include the endpointUrl, securityMode, securityPolicyUri, userIdentityTokens,
            transportProfileUri and securityLevel with all other parameters set to null. Only the
            recommended parameters shall be verified by the client.</param>
            <param name="serverSoftwareCertificates">This parameter is deprecated and the array shall
            be empty.</param>
            <param name="serverSignature">This is a signature generated with the private key
            associated with the serverCertificate. This parameter is calculated by appending the
            clientNonce to the clientCertificate and signing the resulting sequence of bytes. The
            SignatureAlgorithm shall be the AsymmetricSignatureAlgorithm specified in the
            SecurityPolicy for the Endpoint.</param>
            <param name="maxRequestMessageSize">The maximum size, in bytes, for the body of any
            request message. The Client Communication Stack should return a Bad_RequestTooLarge
            error to the application if a request message exceeds this limit. The value zero
            indicates that this parameter is not used.</param>
            <returns>The common response parameters.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.ActivateSession(UnifiedAutomation.UaBase.RequestHeader,UnifiedAutomation.UaBase.SignatureData,UnifiedAutomation.UaBase.SignedSoftwareCertificateCollection,UnifiedAutomation.UaBase.StringCollection,UnifiedAutomation.UaBase.ExtensionObject,UnifiedAutomation.UaBase.SignatureData,System.Byte[]@,UnifiedAutomation.UaBase.StatusCodeCollection@,UnifiedAutomation.UaBase.DiagnosticInfoCollection@)">
            \internal
            <summary>
            Invokes the ActivateSession service.
            </summary>
            <param name="requestHeader">The request header.</param>
            <param name="clientSignature">This is a signature generated with the private key
            associated with the clientCertificate. The SignatureAlgorithm shall be the
            AsymmetricSignatureAlgorithm specified in the SecurityPolicy for the Endpoint.</param>
            <param name="clientSoftwareCertificates">These are the SoftwareCertificates which have
            been issued to the Client application. The productUri contained in the
            SoftwareCertificates shall match the productUri in the ApplicationDescription passed by
            the Client in the CreateSession requests. Certificates without matching productUri should
            be ignored. Servers may reject connections from Clients if they are not satisfied with
            the SoftwareCertificates provided by the Client. This parameter only needs to be
            specified in the first ActivateSession request after CreateSession. It shall always be
            omitted if the maxRequestMessageSize returned from the Server in the CreateSession
            response is less than one megabyte.</param>
            <param name="localeIds">List of locale ids in priority order for localized strings.
            The first LocaleId in the list has the highest priority. If the Server returns a
            localized string to the Client, the Server shall return the translation with the highest
            priority that it can. If it does not have a translation for any of the locales identified
            in this list, then it shall return the string value that it has and include the locale id
            with the string. If the Client fails to specify at least one locale id, the Server shall
            use any that it has. This parameter only needs to be specified during the first call to
            ActivateSession during a single application Session. If it is not specified the Server
            shall keep using the current localeIds for the Session.</param>
            <param name="userIdentityToken">The credentials of the user associated with the Client
            application. The Server uses these credentials to determine whether the Client should be
            allowed to activate a Session and what resources the Client has access to during this
            Session. The EndpointDescription specifies what UserIdentityTokens the Server shall
            accept.</param>
            <param name="userTokenSignature">If the Client specified a user identity token that
            supports digital signatures, then it shall create a signature and pass it as this
            parameter. Otherwise the parameter is omitted. The SignatureAlgorithm depends on the
            identity token type.</param>
            <param name="serverNonce">A random number that should never be used in any other request.
            This number shall have a minimum length of 32 bytes. The Client shall use this value to
            prove possession of its application instance Certificate in the next call to
            ActivateSession request.</param>
            <param name="results">List of validation results for the SoftwareCertificates.</param>
            <param name="diagnosticInfos">List of diagnostic information associated with
            SoftwareCertificate validation errors (see 7.8 for DiagnosticInfo definition). This list
            is empty if diagnostics information was not requested in the request header or if no
            diagnostic information was encountered in processing of the request.</param>
            <returns>
            Returns a description for the ResponseHeader DataType
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.SessionOpened(UnifiedAutomation.UaServer.Session)">
            <summary>
            Called when a new session is created.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.SessionActivated(UnifiedAutomation.UaServer.Session,System.Boolean)">
            <summary>
            Called when a session is activated.
            </summary>
            <param name="session">The session.</param>
            <param name="identityChanged">if set to <c>true</c> [identity changed].</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.SessionClosed(UnifiedAutomation.UaServer.Session,System.Boolean)">
            <summary>
            Called when a new session is closed.
            </summary>
            <param name="session">The session.</param>
            <param name="deleteSubscriptions">if set to <c>true</c> [delete subscriptions].</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.CloseSession(UnifiedAutomation.UaBase.RequestHeader,System.Boolean)">
            \internal
            <summary>
            Invokes the CloseSession service.
            </summary>
            <param name="requestHeader">The common request parameters.</param>
            <param name="deleteSubscriptions">If the value is TRUE, the Server deletes all
            Subscriptions associated with the Session. If the value is FALSE, the Server keeps the
            Subscriptions associated with the Session until they timeout based on their own lifetime.</param>
            <returns>The common response parameters.</returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ServerManager.CloseSessionAsyncRequestData">
            <summary>
            Callback for a asynchronous close session requests.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.SessionExpired(UnifiedAutomation.UaServer.Session)">
            <summary>
            Cleans up an expired session.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.OnCloseSession(System.Object,UnifiedAutomation.UaBase.StatusCode)">
            <summary>
            Called when [close session].
            </summary>
            <param name="data">The data.</param>
            <param name="error">The error.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.BeginBrowse(UnifiedAutomation.UaBase.IEndpointIncomingRequest)">
            <summary>
            Begins the browse.
            </summary>
            <param name="incoming">The incoming.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ServerManager.BrowseAsyncRequestData">
            <summary>
            Callback for a asynchronous browse requests.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.OnBrowseComplete(UnifiedAutomation.UaServer.BrowseOperationHandle,System.Object,UnifiedAutomation.UaBase.BrowseResult,UnifiedAutomation.UaServer.ContinuationPoint,System.Boolean)">
            <summary>
            Called when [browse complete].
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <param name="callbackData">The callback data.</param>
            <param name="browseResult">The browse result.</param>
            <param name="continuationPoint">The continuation point.</param>
            <param name="doNotBlockThread">if set to <c>true</c> then the current thread should not be blocked.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.EndBrowse(UnifiedAutomation.UaServer.ServerManager.BrowseAsyncRequestData,System.Boolean)">
            <summary>
            Ends the browse.
            </summary>
            <param name="data">The data.</param>
            <param name="doNotBlockThread">if set to <c>true</c> then the current thread should not be blocked.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.BeginBrowseNext(UnifiedAutomation.UaBase.IEndpointIncomingRequest)">
            <summary>
            Begins the browse.
            </summary>
            <param name="incoming">The incoming.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ServerManager.BrowseNextAsyncRequestData">
            <summary>
            Callback for a asynchronous browse requests.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.OnBrowseNextComplete(UnifiedAutomation.UaServer.BrowseOperationHandle,System.Object,UnifiedAutomation.UaBase.BrowseResult,UnifiedAutomation.UaServer.ContinuationPoint,System.Boolean)">
            <summary>
            Called when [browse complete].
            </summary>
            <param name="handle">The handle.</param>
            <param name="userData">The user data.</param>
            <param name="browseResult">The browse result.</param>
            <param name="continuationPoint">The continuation point.</param>
            <param name="doNotBlockThread">if set to <c>true</c> then the current thread should not be blocked.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.EndBrowseNext(UnifiedAutomation.UaServer.ServerManager.BrowseNextAsyncRequestData,System.Boolean)">
            <summary>
            Ends the browse.
            </summary>
            <param name="data">The data.</param>
            <param name="doNotBlockThread">if set to <c>true</c> then the current thread should not be blocked.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.BeginTranslate(UnifiedAutomation.UaBase.IEndpointIncomingRequest)">
            <summary>
            Begins the translate browse path.
            </summary>
            <param name="incoming">The incoming.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ServerManager.TranslateAsyncRequestData">
            <summary>
            Callback for a asynchronous browse requests.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.OnTranslateComplete(UnifiedAutomation.UaServer.BrowseOperationHandle,System.Object,UnifiedAutomation.UaBase.BrowsePathResult,System.Boolean)">
            <summary>
            Called when [translate complete].
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <param name="callbackData">The callback data.</param>
            <param name="browseResult">The browse result.</param>
            <param name="doNotBlockThread">if set to <c>true</c> then the current thread should not be blocked.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.EndTranslate(UnifiedAutomation.UaServer.ServerManager.TranslateAsyncRequestData,System.Boolean)">
            <summary>
            Ends the translate.
            </summary>
            <param name="data">The data.</param>
            <param name="doNotBlockThread">if set to <c>true</c> then the current thread should not be blocked.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.RegisterNodes(UnifiedAutomation.UaBase.RequestHeader,UnifiedAutomation.UaBase.NodeIdCollection,UnifiedAutomation.UaBase.NodeIdCollection@)">
            \internal
            <summary>
            Invokes the RegisterNodes service.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.UnregisterNodes(UnifiedAutomation.UaBase.RequestHeader,UnifiedAutomation.UaBase.NodeIdCollection)">
            \internal
            <summary>
            Invokes the UnregisterNodes service.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.Cancel(UnifiedAutomation.UaBase.RequestHeader,System.UInt32,System.UInt32@)">
            \internal
            <summary>
            Invokes the Cancel service.
            </summary>
            <param name="requestHeader">The common request parameters.</param>
            <param name="requestHandle">The requestHandle assigned to one or more requests that
            should be cancelled. All outstanding requests with the matching requestHandle shall
            be cancelled.</param>
            <param name="cancelCount">Number of cancelled requests.</param>
            <returns>The common response parameters.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.BeginRead(UnifiedAutomation.UaBase.IEndpointIncomingRequest)">
            <summary>
            Begins the read.
            </summary>
            <param name="incoming">The incoming.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ServerManager.AsyncRequestData">
            <summary>
            Callback data for a asynchronous requests.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ServerManager.ReadAsyncRequestData">
            <summary>
            Callback data for a asynchronous read requests.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.OnReadComplete(UnifiedAutomation.UaServer.NodeAttributeOperationHandle,System.Object,UnifiedAutomation.UaBase.DataValue,System.Boolean)">
            <summary>
            Called when a read operation completes.
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <param name="userData">The user data.</param>
            <param name="dataValue">The data value.</param>
            <param name="doNotBlockThread">if set to <c>true</c> then the current thread should not be blocked.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.EndRead(UnifiedAutomation.UaServer.ServerManager.ReadAsyncRequestData,System.Boolean)">
            <summary>
            Ends the read.
            </summary>
            <param name="data">The data.</param>
            <param name="doNotBlockThread">if set to <c>true</c> then the current thread should not be blocked.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.BeginWrite(UnifiedAutomation.UaBase.IEndpointIncomingRequest)">
            <summary>
            Begins the write.
            </summary>
            <param name="incoming">The incoming.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ServerManager.WriteAsyncRequestData">
            <summary>
            Callback for a asynchronous read requests.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.OnWriteComplete(UnifiedAutomation.UaServer.NodeAttributeOperationHandle,System.Object,UnifiedAutomation.UaBase.StatusCode,System.Boolean)">
            <summary>
            Called when a read operation completes.
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <param name="userData">The user data.</param>
            <param name="result">The result.</param>
            <param name="doNotBlockThread">if set to <c>true</c> then the current thread should not be blocked.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.EndWrite(UnifiedAutomation.UaServer.ServerManager.WriteAsyncRequestData,System.Boolean)">
            <summary>
            Ends the read.
            </summary>
            <param name="data">The data.</param>
            <param name="doNotBlockThread">if set to <c>true</c> then the current thread should not be blocked.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.BeginCall(UnifiedAutomation.UaBase.IEndpointIncomingRequest)">
            <summary>
            Begins the write.
            </summary>
            <param name="incoming">The incoming.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ServerManager.CallAsyncRequestData">
            <summary>
            Callback for an asynchronous call requests.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.OnCallComplete(UnifiedAutomation.UaServer.MethodOperationHandle,System.Object,UnifiedAutomation.UaBase.CallMethodResult,System.Boolean)">
            <summary>
            Called when a call operation completes.
            </summary>
            <param name="handle">The handle.</param>
            <param name="userData">The user data.</param>
            <param name="result">The result.</param>
            <param name="doNotBlockThread">if set to <c>true</c> then the current thread should not be blocked.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.EndCall(UnifiedAutomation.UaServer.ServerManager.CallAsyncRequestData,System.Boolean)">
            <summary>
            Ends the read.
            </summary>
            <param name="data">The data.</param>
            <param name="doNotBlockThread">if set to <c>true</c> then the current thread should not be blocked.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.BeginHistoryRead(UnifiedAutomation.UaBase.IEndpointIncomingRequest)">
            <summary>
            Begins the read.
            </summary>
            <param name="incoming">The incoming.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.BeginHistoryReadData(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.IEndpointIncomingRequest,UnifiedAutomation.UaBase.HistoryReadRequest,UnifiedAutomation.UaBase.HistoryReadDetails,UnifiedAutomation.UaServer.TransactionType)">
            <summary>
            Begins the read.
            </summary>
            <param name="context">The request context.</param>
            <param name="incoming">The incoming.</param>
            <param name="request">The request.</param>
            <param name="details">The details.</param>
            <param name="transactionType">Type of the transaction.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.BeginHistoryReadEvent(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.IEndpointIncomingRequest,UnifiedAutomation.UaBase.HistoryReadRequest,UnifiedAutomation.UaBase.HistoryReadDetails,UnifiedAutomation.UaServer.TransactionType)">
            <summary>
            Begins the read.
            </summary>
            <param name="context">The request context.</param>
            <param name="incoming">The incoming.</param>
            <param name="request">The request.</param>
            <param name="details">The details.</param>
            <param name="transactionType">Type of the transaction.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ServerManager.HistoryReadAsyncRequestData">
            <summary>
            Callback data for a asynchronous read requests.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.OnHistoryReadDataComplete(UnifiedAutomation.UaServer.HistoryDataOperationHandle,System.Object,UnifiedAutomation.UaBase.HistoryReadResult,System.Boolean)">
            <summary>
            Called when [history read complete].
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.OnHistoryReadEventComplete(UnifiedAutomation.UaServer.HistoryEventOperationHandle,System.Object,UnifiedAutomation.UaBase.HistoryReadResult,System.Boolean)">
            <summary>
            Called when [history read complete].
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.EndHistoryRead(UnifiedAutomation.UaServer.ServerManager.HistoryReadAsyncRequestData,System.Boolean)">
            <summary>
            Ends the read.
            </summary>
            <param name="data">The data.</param>
            <param name="doNotBlockThread">if set to <c>true</c> then the current thread should not be blocked.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.BeginHistoryUpdate(UnifiedAutomation.UaBase.IEndpointIncomingRequest)">
            <summary>
            Begins the history update.
            </summary>
            <param name="incoming">The incoming.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.BeginHistoryUpdateData(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.IEndpointIncomingRequest,UnifiedAutomation.UaBase.HistoryUpdateRequest,UnifiedAutomation.UaServer.TransactionType)">
            <summary>
            Begins the read.
            </summary>
            <param name="context">The request context.</param>
            <param name="incoming">The incoming.</param>
            <param name="request">The request.</param>
            <param name="transactionType">Type of the transaction.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.BeginHistoryUpdateEvent(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.IEndpointIncomingRequest,UnifiedAutomation.UaBase.HistoryUpdateRequest,UnifiedAutomation.UaServer.TransactionType)">
            <summary>
            Begins the read.
            </summary>
            <param name="context">The request context.</param>
            <param name="incoming">The incoming.</param>
            <param name="request">The request.</param>
            <param name="transactionType">Type of the transaction.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ServerManager.HistoryUpdateAsyncRequestData">
            <summary>
            Callback data for a asynchronous read requests.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.OnHistoryUpdateDataComplete(UnifiedAutomation.UaServer.HistoryDataOperationHandle,System.Object,UnifiedAutomation.UaBase.HistoryUpdateResult,System.Boolean)">
            <summary>
            Called when [history read complete].
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.OnHistoryUpdateEventComplete(UnifiedAutomation.UaServer.HistoryEventOperationHandle,System.Object,UnifiedAutomation.UaBase.HistoryUpdateResult,System.Boolean)">
            <summary>
            Called when [history read complete].
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.EndHistoryUpdate(UnifiedAutomation.UaServer.ServerManager.HistoryUpdateAsyncRequestData,System.Boolean)">
            <summary>
            Ends the read.
            </summary>
            <param name="data">The data.</param>
            <param name="doNotBlockThread">if set to <c>true</c> then the current thread should not be blocked.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.CreateSubscription(UnifiedAutomation.UaBase.RequestHeader,System.Double,System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.Byte,System.UInt32@,System.Double@,System.UInt32@,System.UInt32@)">
            \internal
            <summary>
            Invokes the CreateSubscription service.
            </summary>
            <param name="requestHeader">The request header.</param>
            <param name="requestedPublishingInterval">The requested publishing interval.</param>
            <param name="requestedLifetimeCount">The requested lifetime count.</param>
            <param name="requestedMaxKeepAliveCount">The requested max keep alive count.</param>
            <param name="maxNotificationsPerPublish">The max notifications per publish.</param>
            <param name="publishingEnabled">if set to <c>true</c> publishing is enabled.</param>
            <param name="priority">The priority.</param>
            <param name="subscriptionId">The subscription id.</param>
            <param name="revisedPublishingInterval">The revised publishing interval.</param>
            <param name="revisedLifetimeCount">The revised lifetime count.</param>
            <param name="revisedMaxKeepAliveCount">The revised max keep alive count.</param>
            <returns>
            Returns a ResponseHeader object
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.UpdateSubscriptionDiagnostics(UnifiedAutomation.UaServer.RequestContext,System.Nullable{System.Boolean},System.UInt32)">
             <summary>
            
             </summary>
             <param name="context"></param>
             <param name="created"></param>
             <param name="publishingIntervalCount"></param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.SetPublishingMode(UnifiedAutomation.UaBase.RequestHeader,System.Boolean,UnifiedAutomation.UaBase.UInt32Collection,UnifiedAutomation.UaBase.StatusCodeCollection@,UnifiedAutomation.UaBase.DiagnosticInfoCollection@)">
            \internal
            <summary>
            Invokes the SetPublishingMode service.
            </summary>
            <param name="requestHeader"></param>
            <param name="publishingEnabled"></param>
            <param name="subscriptionIds"></param>
            <param name="results"></param>
            <param name="diagnosticInfos"></param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.ModifySubscription(UnifiedAutomation.UaBase.RequestHeader,System.UInt32,System.Double,System.UInt32,System.UInt32,System.UInt32,System.Byte,System.Double@,System.UInt32@,System.UInt32@)">
            \internal
            <summary>
            Modifies the subscription.
            </summary>
            <param name="requestHeader">The request header.</param>
            <param name="subscriptionId">The subscription id.</param>
            <param name="requestedPublishingInterval">The requested publishing interval.</param>
            <param name="requestedLifetimeCount">The requested lifetime count.</param>
            <param name="requestedMaxKeepAliveCount">The requested max keep alive count.</param>
            <param name="maxNotificationsPerPublish">The max notifications per publish.</param>
            <param name="priority">The priority.</param>
            <param name="revisedPublishingInterval">The revised publishing interval.</param>
            <param name="revisedLifetimeCount">The revised lifetime count.</param>
            <param name="revisedMaxKeepAliveCount">The revised max keep alive count.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.DeleteSubscriptions(UnifiedAutomation.UaBase.RequestHeader,UnifiedAutomation.UaBase.UInt32Collection,UnifiedAutomation.UaBase.StatusCodeCollection@,UnifiedAutomation.UaBase.DiagnosticInfoCollection@)">
            \internal
            <summary>
            Invokes the DeleteSubscriptions service.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.TransferSubscriptions(UnifiedAutomation.UaBase.RequestHeader,UnifiedAutomation.UaBase.UInt32Collection,System.Boolean,UnifiedAutomation.UaBase.TransferResultCollection@,UnifiedAutomation.UaBase.DiagnosticInfoCollection@)">
            \internal
            <summary>
            Invokes the TransferSubscriptions service.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.Republish(UnifiedAutomation.UaBase.RequestHeader,System.UInt32,System.UInt32,UnifiedAutomation.UaBase.NotificationMessage@)">
            \internal
            <summary>
            Invokes the Republish service.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.BeginPublish(UnifiedAutomation.UaBase.IEndpointIncomingRequest)">
            <summary>
            Begins the publish.
            </summary>
            <param name="incoming">The incoming.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.EndPublish(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.IEndpointIncomingRequest,UnifiedAutomation.UaBase.StatusCode,System.Object,System.Boolean)">
            <summary>
            Ends the publish.
            </summary>
            <param name="context">The request context.</param>
            <param name="incoming">The incoming.</param>
            <param name="error">The error.</param>
            <param name="callbackData">The callback data.</param>
            <param name="doNotBlockThread">if set to <c>true</c> then the current thread should not be blocked.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.BeginCreateMonitoredItems(UnifiedAutomation.UaBase.IEndpointIncomingRequest)">
            <summary>
            Begins the create monitored items.
            </summary>
            <param name="incoming">The incoming.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ServerManager.CreateMonitoredItemsAsyncRequestData">
            <summary>
            Callback for a asynchronous create monitored item requests.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.OnCreateDataMonitoredItemComplete(UnifiedAutomation.UaServer.NodeAttributeOperationHandle,System.Object,UnifiedAutomation.UaServer.MonitoredItemHandle,UnifiedAutomation.UaServer.DataMonitoringResult,System.Boolean)">
            <summary>
            Called when [create data monitored item complete].
            </summary>
            <param name="nodeHandle">The node handle.</param>
            <param name="callbackData">The callback data.</param>
            <param name="itemHandle">The item handle.</param>
            <param name="result">The result.</param>
            <param name="doNotBlockThread">if set to <c>true</c> then the current thread should not be blocked.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.OnCreateEventMonitoredItemComplete(UnifiedAutomation.UaServer.NotifierOperationHandle,System.Object,UnifiedAutomation.UaServer.MonitoredItemHandle,UnifiedAutomation.UaServer.EventMonitoringResult,System.Boolean)">
            <summary>
            Called when [create event monitored item complete].
            </summary>
            <param name="nodeHandle">The node handle.</param>
            <param name="callbackData">The callback data.</param>
            <param name="itemHandle">The item handle.</param>
            <param name="result">The result.</param>
            <param name="doNotBlockThread">if set to <c>true</c> then the current thread should not be blocked.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.EndCreateMonitoredItems(UnifiedAutomation.UaServer.ServerManager.CreateMonitoredItemsAsyncRequestData,System.Boolean)">
            <summary>
            Ends the create monitored items.
            </summary>
            <param name="data">The data.</param>
            <param name="doNotBlockThread">if set to <c>true</c> then the current thread should not be blocked.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.BeginModifyMonitoredItems(UnifiedAutomation.UaBase.IEndpointIncomingRequest)">
            <summary>
            Begins the Modify monitored items.
            </summary>
            <param name="incoming">The incoming.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ServerManager.ModifyMonitoredItemsAsyncRequestData">
            <summary>
            Callback for a asynchronous read requests.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.OnModifyDataMonitoredItemComplete(UnifiedAutomation.UaServer.MonitoredItemOperationHandle,System.Object,UnifiedAutomation.UaServer.DataMonitoringResult,System.Boolean)">
            <summary>
            Called when [Modify data monitored item complete].
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <param name="callbackData">The callback data.</param>
            <param name="result">The result.</param>
            <param name="doNotBlockThread">if set to <c>true</c> then the current thread should not be blocked.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.OnModifyEventMonitoredItemComplete(UnifiedAutomation.UaServer.MonitoredItemOperationHandle,System.Object,UnifiedAutomation.UaServer.EventMonitoringResult,System.Boolean)">
            <summary>
            Called when [Modify event monitored item complete].
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <param name="callbackData">The callback data.</param>
            <param name="result">The result.</param>
            <param name="doNotBlockThread">if set to <c>true</c> then the current thread should not be blocked.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.EndModifyMonitoredItems(UnifiedAutomation.UaServer.ServerManager.ModifyMonitoredItemsAsyncRequestData,System.Boolean)">
            <summary>
            Ends the Modify monitored items.
            </summary>
            <param name="data">The data.</param>
            <param name="doNotBlockThread">if set to <c>true</c> then the current thread should not be blocked.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.BeginSetMonitoringMode(UnifiedAutomation.UaBase.IEndpointIncomingRequest)">
            <summary>
            Begins the Modify monitored items.
            </summary>
            <param name="incoming">The incoming.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ServerManager.SetMonitoringModeAsyncRequestData">
            <summary>
            Callback for a asynchronous read requests.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.OnSetMonitoringModeComplete(UnifiedAutomation.UaServer.MonitoredItemOperationHandle,System.Object,UnifiedAutomation.UaBase.StatusCode,System.Boolean)">
            <summary>
            Called when [set monitoring mode complete].
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <param name="callbackData">The callback data.</param>
            <param name="result">The result.</param>
            <param name="doNotBlockThread">if set to <c>true</c> then the current thread should not be blocked.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.EndSetMonitoringMode(UnifiedAutomation.UaServer.ServerManager.SetMonitoringModeAsyncRequestData,System.Boolean)">
            <summary>
            Ends the Modify monitored items.
            </summary>
            <param name="data">The data.</param>
            <param name="doNotBlockThread">if set to <c>true</c> then the current thread should not be blocked.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.BeginDeleteMonitoredItems(UnifiedAutomation.UaBase.IEndpointIncomingRequest)">
            <summary>
            Begins the Modify monitored items.
            </summary>
            <param name="incoming">The incoming.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ServerManager.DeleteMonitoredItemsAsyncRequestData">
            <summary>
            Callback for a asynchronous read requests.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.OnDeleteMonitoredItemsComplete(UnifiedAutomation.UaServer.MonitoredItemOperationHandle,System.Object,UnifiedAutomation.UaBase.StatusCode,System.Boolean)">
            <summary>
            Called when [set monitoring mode complete].
            </summary>
            <param name="operationHandle">The operation handle.</param>
            <param name="callbackData">The callback data.</param>
            <param name="result">The result.</param>
            <param name="doNotBlockThread">if set to <c>true</c> then the current thread should not be blocked.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.EndDeleteMonitoredItems(UnifiedAutomation.UaServer.ServerManager.DeleteMonitoredItemsAsyncRequestData,System.Boolean)">
            <summary>
            Ends the Modify monitored items.
            </summary>
            <param name="data">The data.</param>
            <param name="doNotBlockThread">if set to <c>true</c> then the current thread should not be blocked.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.SetTriggering(UnifiedAutomation.UaBase.RequestHeader,System.UInt32,System.UInt32,UnifiedAutomation.UaBase.UInt32Collection,UnifiedAutomation.UaBase.UInt32Collection,UnifiedAutomation.UaBase.StatusCodeCollection@,UnifiedAutomation.UaBase.DiagnosticInfoCollection@,UnifiedAutomation.UaBase.StatusCodeCollection@,UnifiedAutomation.UaBase.DiagnosticInfoCollection@)">
            \internal
            <summary>
            Invokes the SetTriggering service.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.AddNodes(UnifiedAutomation.UaBase.RequestHeader,UnifiedAutomation.UaBase.AddNodesItemCollection,UnifiedAutomation.UaBase.AddNodesResultCollection@,UnifiedAutomation.UaBase.DiagnosticInfoCollection@)">
            \internal
            <summary>
            Invokes the AddNodes service.
            </summary>
            <param name="requestHeader">The common request parameters.</param>
            <param name="nodesToAdd">The nodes to add</param>
            <param name="results">List of results for the Nodes to add. The size and order of
            the list matches the size and order of the nodesToAdd request parameter.</param>
            <param name="diagnosticInfos">List of diagnostic information for the Nodes to add.
            The size and order of the list matches the size and order of the nodesToAdd request
            parameter. This list is empty if diagnostics information was not requested in the
            request header or if no diagnostic information was encountered in processing of the
            request.</param>
            <returns>The common response parameters</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.DeleteNodes(UnifiedAutomation.UaBase.RequestHeader,UnifiedAutomation.UaBase.DeleteNodesItemCollection,UnifiedAutomation.UaBase.StatusCodeCollection@,UnifiedAutomation.UaBase.DiagnosticInfoCollection@)">
            \internal
            <summary>
            Invokes the DeleteNodes service.
            </summary>
            <param name="requestHeader"></param>
            <param name="nodesToDelete"></param>
            <param name="results"></param>
            <param name="diagnosticInfos"></param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.AddReferences(UnifiedAutomation.UaBase.RequestHeader,UnifiedAutomation.UaBase.AddReferencesItemCollection,UnifiedAutomation.UaBase.StatusCodeCollection@,UnifiedAutomation.UaBase.DiagnosticInfoCollection@)">
            \internal
            <summary>
            Invokes the AddReferences service.
            </summary>
            <param name="requestHeader">The common request parameters.</param>
            <param name="referencesToAdd">The references to add</param>
            <param name="results">List of StatusCodes for the References to add. The size and order
            of the list matches the size and order of the referencesToAdd request parameter.</param>
            <param name="diagnosticInfos">List of diagnostic information for the References to add.
            The size and order of the list matches the size and order of the referencesToAdd request
            parameter. This list is empty if diagnostics information was not requested in the request
            header or if no diagnostic information was encountered in processing of the request.
            </param>
            <returns>The common response parameters.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.DeleteReferences(UnifiedAutomation.UaBase.RequestHeader,UnifiedAutomation.UaBase.DeleteReferencesItemCollection,UnifiedAutomation.UaBase.StatusCodeCollection@,UnifiedAutomation.UaBase.DiagnosticInfoCollection@)">
            \internal
            <summary>
            Invokes the DeleteReferences service.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.GetQueryHandle(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.ViewHandle,UnifiedAutomation.UaServer.QueryHandle@)">
            <summary>
            Creates a query handle for use in query operation.
            </summary>
            <param name="context">The request context.</param>
            <param name="viewHandle">The view being queried.</param>
            <param name="handle">The handle for the query.</param>
            <returns>The query handle.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.BeginQueryFirst(UnifiedAutomation.UaBase.IEndpointIncomingRequest)">
            <summary>
            Invokes the QueryFirst service.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.CreateScopeMapper">
            <summary>
            Creates the ScopeMapper that is used when importing NodeSet XML files containing
            NodeAccessInfo defined by UnifiedAutomation XML schema.
            </summary>
            <returns></returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ServerManager.QueryAsyncRequestData">
            <summary>
            Callback for a asynchronous query requests.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.OnQueryFirstComplete(UnifiedAutomation.UaServer.QueryHandle,System.Object,UnifiedAutomation.UaBase.QueryDataSetCollection,UnifiedAutomation.UaServer.QueryContinuationPoint,UnifiedAutomation.UaBase.ParsingResultCollection,UnifiedAutomation.UaBase.ContentFilterResult,System.Boolean)">
            <summary>
            Called when the query completes.
            </summary>
            <param name="operationHandle">The handle associated with the operation.</param>
            <param name="callbackData">The callback data associated with the request.</param>
            <param name="queryDataSets">The datasets that meet the query criteria.</param>
            <param name="continuationPoint">A continuation point if the query is not complete.</param>
            <param name="parsingResults">Any errors parsing the NodeTypes passed in the request. NULL for continued queries.</param>
            <param name="filterResult">Any errors with the ContentFilter passed in the request, NULL for continued queries.</param>
            <param name="doNotBlockThread">True if the current thread must not be blocked; false otherwise.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.BeginQueryNext(UnifiedAutomation.UaBase.IEndpointIncomingRequest)">
            <summary>
            Invokes the QueryNext service.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.OnQueryNextComplete(UnifiedAutomation.UaServer.QueryHandle,System.Object,UnifiedAutomation.UaBase.QueryDataSetCollection,UnifiedAutomation.UaServer.QueryContinuationPoint,UnifiedAutomation.UaBase.ParsingResultCollection,UnifiedAutomation.UaBase.ContentFilterResult,System.Boolean)">
            <summary>
            Called when the query completes.
            </summary>
            <param name="operationHandle">The handle associated with the operation.</param>
            <param name="callbackData">The callback data associated with the request.</param>
            <param name="queryDataSets">The datasets that meet the query criteria.</param>
            <param name="continuationPoint">A continuation point if the query is not complete.</param>
            <param name="parsingResults">Any errors parsing the NodeTypes passed in the request. NULL for continued queries.</param>
            <param name="filterResult">Any errors with the ContentFilter passed in the request, NULL for continued queries.</param>
            <param name="doNotBlockThread">True if the current thread must not be blocked; false otherwise.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.ReportEvent(UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Reports the event to the Server notifier.
            </summary>
            <param name="e">The event to report.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.ReportEvent(UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Reports the event.
            </summary>
            <param name="notifierId">The notifier which is the target for the event.</param>
            <param name="e">The event to report.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.OnRootNodeManagerStarted(UnifiedAutomation.UaServer.RootNodeManager)">
            <summary>
            Called when the root node manager starts.
            </summary>
            <param name="nodeManager">The node manager.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.OnSessionManagerStarted(UnifiedAutomation.UaServer.SessionManager)">
            <summary>
            Called when the session manager starts.
            </summary>
            <param name="sessionManager">The session manager.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.OnSubscriptionManagerStarted(UnifiedAutomation.UaServer.SubscriptionManager)">
            <summary>
            Called when the subscription manager starts.
            </summary>
            <param name="subscriptionManager">The subscription manager.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.ValidateRequest(UnifiedAutomation.UaBase.RequestHeader,UnifiedAutomation.UaBase.IEndpointIncomingRequest,UnifiedAutomation.UaServer.ServiceType)">
            <summary>
            Verifies that the request header is valid.
            </summary>
            <param name="requestHeader">The request header.</param>
            <param name="incoming">The incoming request for async operations that can be cancelled.</param>
            <param name="requestType">Type of the request.</param>
            <returns>A context that is passed into methods used to process the request.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.TranslateException(UnifiedAutomation.UaBase.DiagnosticsMasks,System.Collections.Generic.IList{System.String},System.Exception)">
            <summary>
            Translates an exception.
            </summary>
            <param name="diagnosticsMasks">The fields to return.</param>
            <param name="preferredLocales">The preferred locales.</param>
            <param name="e">The exception.</param>
            <returns>
            The translated exception as a status code.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.OnAsyncRequestComplete(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.IEndpointIncomingRequest,System.Boolean)">
            <summary>
            Called when an aysnchrnous request completes.
            </summary>
            <param name="context">The request context.</param>
            <param name="incoming">The incoming.</param>
            <param name="doNotBlockThread">if set to <c>true</c> then the current thread should not be blocked.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.OnAsyncRequestError(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.IEndpointIncomingRequest,System.Boolean,System.Exception)">
            <summary>
            Called when an asynchronous request has an error during processing.
            </summary>
            <param name="context">The request context.</param>
            <param name="incoming">The incoming.</param>
            <param name="doNotBlockThread">if set to <c>true</c> then the current thread should not be blocked.</param>
            <param name="e">The exeception.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.OnRequestComplete(UnifiedAutomation.UaServer.RequestContext)">
            <summary>
            Called when the request completes.
            </summary>
            <param name="context">The request context.</param>
            <returns>The header to return to the client.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.OnRequestError(UnifiedAutomation.UaServer.RequestContext,System.Exception)">
            <summary>
            Called when an asynchronous request encounters an error.
            </summary>
            <param name="context">The request context.</param>
            <param name="e">The exception.</param>
            <returns>The header to return to the client.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.IsSecurityError(System.Exception)">
            <summary>
            Returns true if the error is a security error.
            </summary>
            <param name="e">The exception.</param>
            <returns>
              <c>true</c> if the error is a one of the security errors, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.UpdateDiagnostics(UnifiedAutomation.UaServer.RequestContext,System.Collections.Generic.IList{UnifiedAutomation.UaBase.StatusCode})">
            <summary>
            Updates the diagnostics.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.GetMonitoredItems(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.ServerModel,System.UInt32,System.UInt32[]@,System.UInt32[]@)">
            <summary>
            Returns the server/client handles for the subscription.
            </summary>
            <param name="context">THe context used to invoke the method.</param>
            <param name="model">The object which the method is being called on.</param>
            <param name="subscriptionId">The identifier for the subscription.</param>
            <param name="serverHandles">The server handles for all items in the subscription.</param>
            <param name="clientHandles">The associated client handle for each entry in the server handle array.</param>
            <returns>Good if success; an error code otherwise.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.RequestServerStateChange(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.ServerModel,UnifiedAutomation.UaBase.ServerState,System.DateTime,System.UInt32,UnifiedAutomation.UaBase.LocalizedText,System.Boolean)">
            <summary>
            Requests that the server change state.
            </summary>
            <param name="context">The context for the request.</param>
            <param name="model">The object which owns the method being called.</param>
            <param name="state">The target state for the server.</param>
            <param name="estimatedReturnTime">The estimated time for when clients can connect to the server after the state change.</param>
            <param name="secondsTillShutdown">The number of seconds until shutdown.</param>
            <param name="reason">The reason for the state change.</param>
            <param name="restart">Whether the server should restart after the shutdown.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.ChangeServerState(UnifiedAutomation.UaBase.ServerState,System.DateTime)">
            <summary>
            Called when the state of the Server has been changed as a result of a client action.
            </summary>
            <param name="state">The new state.</param>
            <param name="estimatedReturnTime">When the Server should return to the Running state.</param>
            <returns>Good if successful; An error otherwise.</returns>
            <remarks>
            This method can be overridden to allow for custom application logic that applies the state change.
            The default behavoir simply updates the appropriate variables in the Server address space.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.ResendData(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.ServerModel,System.UInt32)">
            <summary>
            Requests that all cached values be resent for the specified subscription.
            </summary>
            <param name="context">The context for the request.</param>
            <param name="model">The object which owns the method being called.</param>
            <param name="subscriptionId">The identifier for the subscription.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.SetSubscriptionDurable(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.ServerModel,System.UInt32,System.UInt32,System.UInt32@)">
            <summary>
            Requests that the subscription be made durable which means all queued values are saved to persistent storage.
            </summary>
            <param name="context">The context for the request.</param>
            <param name="model">The object which owns the method being called.</param>
            <param name="subscriptionId">The identifier for the subscription.</param>
            <param name="lifetimeInHours">The lifetime in hours for data saved by the subscription.</param>
            <param name="revisedLifetimeInHours">The revised lifetime in hours for data saved by the subscription.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.ApplyChanges(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.ServerConfigurationModel)">
            <summary>
            Applies any changes to the security settings.
            </summary>
            <param name="context">The context for the request.</param>
            <param name="model">The object which owns the method being called.</param>
            <returns>StatusCode.Good if the call succeeds; otherwise an error.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.UpdateCertificate(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.ServerConfigurationModel,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,System.Byte[],System.Byte[][],System.String,System.Byte[],System.Boolean@)">
            <summary>
            Updates the the application certificate.
            </summary>
            <param name="context">The context for the request.</param>
            <param name="model">The object which owns the method being called.</param>
            <param name="certificateGroupId">The certificate group that is being updated.</param>
            <param name="certificateTypeId">Type of the certificate allowed by the certificate group that is being updated.</param>
            <param name="certificate">The certificate.</param>
            <param name="issuerCertificates">The issuer certificates need to validate the certificate.</param>
            <param name="privateKeyFormat">The private key format.</param>
            <param name="privateKey">The private key (optional).</param>
            <param name="applyChangesRequired">if set to <c>true</c> a restart is required.</param>
            <returns>StatusCode.Good if the call succeeds; otherwise an error.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.CreateSigningRequest(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.ServerConfigurationModel,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.NodeId,System.String,System.Boolean,System.Byte[],System.Byte[]@)">
            <summary>
            Creates a certificate signing request.
            </summary>
            <param name="context">The context for the request.</param>
            <param name="model">The object which owns the method being called.</param>
            <param name="certificateGroupId">The certificate group which owns the certificate being updated.</param>
            <param name="certificateTypeId">Type of the certificate within the group.</param>
            <param name="subjectName">The subject name to put in the certficate..</param>
            <param name="regeneratePrivateKey">if set to <c>true</c> a new private key should be generated first.</param>
            <param name="nonce">The nonce that can be used when generating a private key.</param>
            <param name="certificateRequest">The certificate request.</param>
            <returns>StatusCode.Good if the call succeeds; otherwise an error.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.GetRejectedList(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.ServerConfigurationModel,System.Byte[][]@)">
            <summary>
            Gets the list of rejected certificates.
            </summary>
            <param name="context">The context for the request.</param>
            <param name="model">The object which owns the method being called.</param>
            <param name="certificates">The list of rejected certificates.</param>
            <returns>StatusCode.Good if the call succeeds; otherwise an error.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.OnTrustListWrite(System.Object,UnifiedAutomation.UaServer.WriteTrustListEventArgs)">
            <summary>
            Handles a request to update the application trust lists.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:UnifiedAutomation.UaServer.WriteTrustListEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.OnTrustListRead(System.Object,UnifiedAutomation.UaServer.ReadTrustListEventArgs)">
            <summary>
            Handles a request to read the application trust lists.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:UnifiedAutomation.UaServer.ReadTrustListEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.OnTrustListAddCertificate(System.Object,UnifiedAutomation.UaServer.CertificateAddedEventArgs)">
            <summary>
            Called when a certificate is added to a trust list.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:UnifiedAutomation.UaServer.RemoveCertificateEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.OnTrustListRemoveCertificate(System.Object,UnifiedAutomation.UaServer.RemoveCertificateEventArgs)">
            <summary>
            Called when a certificate is removed from a trust list.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:UnifiedAutomation.UaServer.RemoveCertificateEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerManager.HasAdminAccess(UnifiedAutomation.UaServer.RequestContext)">
            <summary>
            Determines whether the request context has administrator access.
            </summary>
            <param name="context">The request context.</param>
            <returns>TRUE if the context has adminitrator access; FALSE otherwise.</returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ServerContext">
             <summary>
            
             </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ServerContext.#ctor(UnifiedAutomation.UaServer.ServerManager)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.ServerContext"/> class.
            </summary>
            <param name="server">The server.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerContext.Server">
            <summary>
            Gets the server.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerContext.NamespaceUris">
            <summary>
            Gets the namespace uris.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerContext.ServerUris">
            <summary>
            Gets the server uris.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ServerContext.TypeTable">
            <summary>
            Gets the type table.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ServiceType">
            <summary>
            The set of all service request types (used for collecting diagnostics and checking permissions).
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.ServiceType.Unknown">
            <summary>
            The request type is not known.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.ServiceType.FindServers">
             <summary>
            
             </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.ServiceType.GetEndpoints">
             <summary>
            
             </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.ServiceType.CreateSession">
             <summary>
            
             </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.ServiceType.ActivateSession">
             <summary>
            
             </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.ServiceType.CloseSession">
             <summary>
            
             </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.ServiceType.Cancel">
             <summary>
            
             </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.ServiceType.Read">
             <summary>
            
             </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.ServiceType.HistoryRead">
             <summary>
            
             </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.ServiceType.Write">
             <summary>
            
             </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.ServiceType.HistoryUpdate">
             <summary>
            
             </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.ServiceType.Call">
             <summary>
            
             </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.ServiceType.CreateMonitoredItems">
             <summary>
            
             </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.ServiceType.ModifyMonitoredItems">
             <summary>
            
             </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.ServiceType.SetMonitoringMode">
             <summary>
            
             </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.ServiceType.SetTriggering">
             <summary>
            
             </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.ServiceType.DeleteMonitoredItems">
             <summary>
            
             </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.ServiceType.CreateSubscription">
             <summary>
            
             </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.ServiceType.ModifySubscription">
             <summary>
            
             </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.ServiceType.SetPublishingMode">
             <summary>
            
             </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.ServiceType.Publish">
             <summary>
            
             </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.ServiceType.Republish">
             <summary>
            
             </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.ServiceType.TransferSubscriptions">
             <summary>
            
             </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.ServiceType.DeleteSubscriptions">
             <summary>
            
             </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.ServiceType.AddNodes">
             <summary>
            
             </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.ServiceType.AddReferences">
             <summary>
            
             </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.ServiceType.DeleteNodes">
             <summary>
            
             </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.ServiceType.DeleteReferences">
             <summary>
            
             </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.ServiceType.Browse">
             <summary>
            
             </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.ServiceType.BrowseNext">
             <summary>
            
             </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.ServiceType.TranslateBrowsePathsToNodeIds">
             <summary>
            
             </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.ServiceType.QueryFirst">
             <summary>
            
             </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.ServiceType.QueryNext">
             <summary>
            
             </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.ServiceType.RegisterNodes">
             <summary>
            
             </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.ServiceType.UnregisterNodes">
             <summary>
            
             </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.Session">
            <summary>
            A generic session manager object for a server.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Session.#ctor(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.ICertificate,UnifiedAutomation.UaBase.NodeId,System.Byte[],System.String,UnifiedAutomation.UaBase.ApplicationDescription,System.String,UnifiedAutomation.UaBase.ICertificate,System.Double,System.UInt32,System.Double,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes the session.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Session.ReportAuditCreateSessionEvent(UnifiedAutomation.UaServer.RequestContext)">
            <summary>
            Reports an audit create session event.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Session.ReportAuditActivateSessionEvent(UnifiedAutomation.UaServer.RequestContext)">
            <summary>
            Reports an audit activate session event.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Session.ReportAuditCloseSessionEvent(UnifiedAutomation.UaServer.RequestContext)">
            <summary>
            Reports an audit activate session event.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Session.Dispose">
            <summary>
            Frees any unmanaged resources.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Session.Dispose(System.Boolean)">
            <summary>
            An overrideable version of the Dispose.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.Session.Server">
            <summary>
            Gets the server.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.Session.Id">
            <summary>
            The identifier assigned to the session when it was created.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.Session.SessionScopeId">
            <summary>
            The ScopeId used for Session and Subscription diagnostics nodes.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.Session.Identity">
            <summary>
            The user identity provided by the client.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.Session.EffectiveIdentity">
            <summary>
            The application defined mapping for user identity provided by the client.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.Session.IdentityToken">
            <summary>
            The user identity token provided by the client.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.Session.DiagnosticsLock">
            <summary>
            A lock which must be acquired before accessing the diagnostics.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.Session.SessionDiagnostics">
            <summary>
            The diagnostics associated with the session.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.Session.SubscriptionDiagnosticsArrayNodeId">
            <summary>
            Gets the subscription diagnostics array node id.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.Session.SessionName">
            <summary>
            Gets the SessionName.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.Session.ClientCertificate">
            <summary>
            The application instance certificate associated with the client.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.Session.PreferredLocales">
            <summary>
            The locales requested when the session was created.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Session.CheckIfExpired(System.UInt32)">
            <summary>
            Check if the session timeout has elapsed since the last communication from the client.
            </summary>
            <param name="minSessionTimeout">The timeout to use if the session has not been activated.</param>
            <returns>TRUE if the session has expired; FALSE otherwise.</returns>
        </member>
        <member name="P:UnifiedAutomation.UaServer.Session.IsClosed">
            <summary>
            Whether the session has been closed.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.Session.Activated">
            <summary>
            Whether the session has been activated.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Session.ValidateRequest(UnifiedAutomation.UaBase.RequestHeader,UnifiedAutomation.UaServer.ServiceType)">
            <summary>
            Validates the request.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Session.RequestStarted(UnifiedAutomation.UaServer.RequestContext)">
            <summary>
            Saves a request that has started.
            </summary>
            <param name="context">The request context.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Session.RequestComplete(UnifiedAutomation.UaServer.RequestContext)">
            <summary>
            Removes a request once it completes.
            </summary>
            <param name="context">The request context.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Session.CancelRequests(System.UInt32)">
            <summary>
            Cancels the requests.
            </summary>
            <param name="requestHandle">The request handle.</param>
            <returns>The number of requests cancelled.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Session.SystemClockChanged">
            <summary>
            Called if the system clock appears to have changed.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Session.IsSecureChannelValid(System.String)">
            <summary>
            Checks if the secure channel is currently valid.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Session.UpdateLocaleIds(UnifiedAutomation.UaBase.StringCollection)">
            <summary>
            Updates the requested locale ids.
            </summary>
            <returns>true if the new locale ids are different from the old locale ids.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Session.ValidateBeforeActivate(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.SignatureData,System.Collections.Generic.List{UnifiedAutomation.UaBase.SignedSoftwareCertificate},UnifiedAutomation.UaBase.ExtensionObject,UnifiedAutomation.UaBase.SignatureData,UnifiedAutomation.UaBase.StringCollection,System.Byte[],UnifiedAutomation.UaBase.UserIdentityToken@,UnifiedAutomation.UaBase.UserTokenPolicy@)">
            <summary>
            Activates the session and binds it to the current secure channel.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Session.Activate(UnifiedAutomation.UaServer.RequestContext,System.Collections.Generic.List{UnifiedAutomation.UaBase.SignedSoftwareCertificate},UnifiedAutomation.UaBase.UserIdentityToken,UnifiedAutomation.UaServer.UserIdentity,UnifiedAutomation.UaServer.UserIdentity,UnifiedAutomation.UaBase.StringCollection,System.Byte[])">
            <summary>
            Activates the session and binds it to the current secure channel.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Session.Close">
            <summary>
            Closes a session and removes itself from the address space.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Session.SaveContinuationPoint(UnifiedAutomation.UaServer.ContinuationPoint)">
            <summary>
            Saves a continuation point for a session.
            </summary>
            <remarks>
            If the session has too many continuation points the oldest one is dropped.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Session.RestoreContinuationPoint(System.Byte[])">
            <summary>
            Restores a continuation point for a session.
            </summary>
            <remarks>
            The caller is responsible for disposing the continuation point returned.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Session.SaveQueryContinuationPoint(UnifiedAutomation.UaServer.QueryContinuationPoint)">
            <summary>
            Saves a continuation point for a session.
            </summary>
            <remarks>
            If the session has too many continuation points the oldest one is dropped.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Session.RestoreQueryContinuationPoint(System.Byte[])">
            <summary>
            Restores a continuation point for a session.
            </summary>
            <remarks>
            The caller is responsible for disposing the continuation point returned.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Session.SaveHistoryContinuationPoint(UnifiedAutomation.UaServer.HistoryContinuationPoint)">
            <summary>
            Saves a continuation point used for historical reads.
            </summary>
            <param name="continuationPoint">The continuation point.</param>
            <remarks>
            If the continuationPoint implements IDisposable it will be disposed when
            the Session is closed or discarded.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Session.RestoreHistoryContinuationPoint(System.Byte[])">
            <summary>
            Restores a previously saves history continuation point.
            </summary>
            <param name="continuationPoint">The identifier for the continuation point.</param>
            <returns>The save continuation point. null if not found.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Session.RegisterNode(UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Registers the node.
            </summary>
            <param name="nodeId">The node id.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Session.FindRegisteredNode(UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Finds the registered node.
            </summary>
            <param name="nodeId">The node id.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Session.UnregisterNode(UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Unregisters the node.
            </summary>
            <param name="nodeId">The node id.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Session.ValidateUserIdentityToken(UnifiedAutomation.UaBase.ExtensionObject,UnifiedAutomation.UaBase.SignatureData,UnifiedAutomation.UaBase.UserTokenPolicy@)">
            <summary>
            Validates the identity token supplied by the client.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Session.UpdateUserIdentity(UnifiedAutomation.UaBase.UserIdentityToken,UnifiedAutomation.UaServer.UserIdentity,UnifiedAutomation.UaServer.UserIdentity)">
            <summary>
            Updates the user identity.
            </summary>
            <returns>true if the new identity is different from the old identity.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Session.UpdateDiagnosticCounters(UnifiedAutomation.UaServer.ServiceType,System.Boolean,System.Boolean)">
            <summary>
            Updates the diagnostic counters associated with the request.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.RegisteredNode">
            <summary>
            The state of a registered node.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.RegisteredNode.RegisteredNodeId">
            <summary>
            Gets or sets the registered node id.
            </summary>
            <value>
            The registered node id.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.RegisteredNode.ActualNodeId">
            <summary>
            Gets or sets the actual node id.
            </summary>
            <value>
            The actual node id.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.RegisteredNode.BrowseHandle">
            <summary>
            Gets or sets the browse handle.
            </summary>
            <value>
            The browse handle.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.RegisteredNode.NodeHandle">
            <summary>
            Gets or sets the node handle.
            </summary>
            <value>
            The node handle.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.RegisteredNode.NotifierHandle">
            <summary>
            Gets or sets the notifier handle.
            </summary>
            <value>
            The notifier handle.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.RegisteredNode.HistoryDataHandle">
            <summary>
            Gets or sets the notifier handle.
            </summary>
            <value>
            The notifier handle.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.RegisteredNode.HistoryEventHandle">
            <summary>
            Gets or sets the notifier handle.
            </summary>
            <value>
            The notifier handle.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.SessionManager">
            <summary>
            A generic session manager object for a server.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SessionManager.#ctor(UnifiedAutomation.UaServer.ServerManager,UnifiedAutomation.UaServer.SessionLimits)">
            <summary>
            Initializes the manager with its configuration.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SessionManager.Dispose">
            <summary>
            Frees any unmanaged resources.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SessionManager.Dispose(System.Boolean)">
            <summary>
            An overrideable version of the Dispose.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionManager.SessionLimits">
            <summary>
            Gets the session limits (must not be modified by the called).
            </summary>
            <value>
            The session limits.
            </value>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SessionManager.Startup">
            <summary>
            Starts the session manager.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SessionManager.Shutdown">
            <summary>
            Stops the session manager and closes all sessions.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SessionManager.CreateSession(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.ICertificate,System.String,System.Byte[],UnifiedAutomation.UaBase.ApplicationDescription,System.String,UnifiedAutomation.UaBase.ICertificate,System.Double,System.UInt32,UnifiedAutomation.UaBase.NodeId@,UnifiedAutomation.UaBase.NodeId@,System.Byte[]@,System.Double@)">
            <summary>
            Creates a new session.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SessionManager.ActivateSession(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.NodeId,UnifiedAutomation.UaBase.SignatureData,System.Collections.Generic.List{UnifiedAutomation.UaBase.SignedSoftwareCertificate},UnifiedAutomation.UaBase.ExtensionObject,UnifiedAutomation.UaBase.SignatureData,UnifiedAutomation.UaBase.StringCollection,System.Byte[]@)">
            <summary>
            Activates an existing session
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SessionManager.CloseSession(UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Closes the specifed session.
            </summary>
            <remarks>
            This method should not throw an exception if the session no longer exists.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SessionManager.ValidateRequest(UnifiedAutomation.UaBase.RequestHeader,UnifiedAutomation.UaServer.ServiceType)">
            <summary>
            Validates request header and returns a request context.
            </summary>
            <remarks>
            This method verifies that the session id valid and that it uses secure channel id
            associated with with current thread. It also verifies that the timestamp is not too
            and that the sequence number is not out of order (update requests only).
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SessionManager.CreateSession(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.ICertificate,UnifiedAutomation.UaBase.NodeId,System.Byte[],System.String,UnifiedAutomation.UaBase.ApplicationDescription,System.String,UnifiedAutomation.UaBase.ICertificate,System.Double,System.UInt32)">
            <summary>
            Creates a new instance of a session.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SessionManager.RaiseSessionEvent(UnifiedAutomation.UaServer.Session,UnifiedAutomation.UaServer.SessionEventReason)">
            <summary>
            Raises an event related to a session.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SessionManager.DoSessionCleanup(System.Object)">
            <summary>
            Periodically checks if the sessions have timed out.
            </summary>
        </member>
        <member name="E:UnifiedAutomation.UaServer.SessionManager.SessionCreated">
            <summary cref="E:UnifiedAutomation.UaServer.ISessionManager.SessionCreated" />
        </member>
        <member name="E:UnifiedAutomation.UaServer.SessionManager.SessionActivated">
            <summary cref="E:UnifiedAutomation.UaServer.ISessionManager.SessionActivated" />
        </member>
        <member name="E:UnifiedAutomation.UaServer.SessionManager.SessionClosing">
            <summary cref="E:UnifiedAutomation.UaServer.ISessionManager.SessionClosing" />
        </member>
        <member name="E:UnifiedAutomation.UaServer.SessionManager.ImpersonateUser">
            <summary>
            Callback to validate UserIdentitoken passed in ActivateSession.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SessionManager.GetSessions(UnifiedAutomation.UaServer.RequestContext)">
            <summary>
            Returns all of the sessions known to the session manager.
            </summary>
            <param name="context">The request context.</param>
            <returns>
            A list of the sessions.
            </returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ISessionManager">
            <summary>
            Allows application components to receive notifications when changes to sessions occur.
            </summary>
            <remarks>
            Sinks that receive these events must not block the thread.
            </remarks>
        </member>
        <member name="E:UnifiedAutomation.UaServer.ISessionManager.SessionCreated">
            <summary>
            Raised after a new session is created.
            </summary>
        </member>
        <member name="E:UnifiedAutomation.UaServer.ISessionManager.SessionActivated">
            <summary>
            Raised whenever a session is activated and the user identity or preferred locales changed.
            </summary>
        </member>
        <member name="E:UnifiedAutomation.UaServer.ISessionManager.SessionClosing">
            <summary>
            Raised before a session is closed.
            </summary>
        </member>
        <member name="E:UnifiedAutomation.UaServer.ISessionManager.ImpersonateUser">
            <summary>
            Raised before the user identity for a session is changed.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ISessionManager.GetSessions(UnifiedAutomation.UaServer.RequestContext)">
            <summary>
            Returns all of the sessions known to the session manager.
            </summary>
            <returns>A list of the sessions.</returns>
        </member>
        <member name="T:UnifiedAutomation.UaServer.SessionEventReason">
            <summary>
            The possible reasons for a session related eventg.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.SessionEventReason.Created">
            <summary>
            A new session was created.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.SessionEventReason.Impersonating">
            <summary>
            A session is being activated with a new user identity.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.SessionEventReason.Activated">
            <summary>
            A session was activated and the user identity or preferred locales changed.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.SessionEventReason.Closing">
            <summary>
            A session is about to be closed.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.SessionEventHandler">
            <summary>
            The delegate for functions used to receive session related events.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ImpersonateEventArgs">
            <summary>
            A class which provides the event arguments for session related event.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.ImpersonateEventArgs.#ctor(UnifiedAutomation.UaBase.UserIdentityToken,UnifiedAutomation.UaBase.UserTokenPolicy)">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ImpersonateEventArgs.NewIdentity">
            <summary>
            The new user identity for the session.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ImpersonateEventArgs.UserTokenPolicy">
            <summary>
            The user token policy selected by the client.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ImpersonateEventArgs.Identity">
            <summary>
            An application defined handle that can be used for access control operations.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ImpersonateEventArgs.EffectiveIdentity">
            <summary>
            An application defined handle that can be used for access control operations.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.ImpersonateEventArgs.IdentityValidationError">
            <summary>
            Set to indicate that an error occurred validating the identity and that it should be rejected.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ImpersonateEventHandler">
            <summary>
            The delegate for functions used to receive impersonation events.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.SessionLimits">
            <summary>
            A class that stores the limits used by sessions.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SessionLimits.#ctor(UnifiedAutomation.UaBase.ApplicationInstance)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.SessionLimits"/> class.
            </summary>
            <param name="application">The application.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionLimits.MaxRequestAge">
            <summary>
            Gets or sets the max request age (min
            </summary>
            <value>
            The max request age.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionLimits.MaxSessionCount">
            <summary>
            Gets or sets the max session count.
            </summary>
            <value>
            The max session count.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionLimits.MaxSessionTimeout">
            <summary>
            Gets or sets the max session timeout.
            </summary>
            <value>
            The max session timeout.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionLimits.MinSessionTimeout">
            <summary>
            Gets or sets the min session timeout.
            </summary>
            <value>
            The min session timeout.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionLimits.MinNonceLength">
            <summary>
            Gets or sets the length of the min nonce.
            </summary>
            <value>
            The length of the min nonce.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionLimits.DisableNonceLengthCheck">
            <summary>
            Gets or sets a value indicating whether the length of the nonce provided by the client is checked.
            </summary>
            <value>
            <c>true</c> if the length of the nonce provided by the client is not checked; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionLimits.MaxNodesPerBrowse">
            <summary>
            Gets or sets the max nodes per browse.
            </summary>
            <value>
            The max nodes per browse.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionLimits.MaxNodesPerTranslateBrowsePathsToNodeIds">
            <summary>
            Gets or sets the max nodes per translate browse paths to node ids.
            </summary>
            <value>
            The max nodes per translate browse paths to node ids.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionLimits.MaxNodesPerRead">
            <summary>
            Gets or sets the max nodes per read.
            </summary>
            <value>
            The max nodes per read.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionLimits.MaxNodesPerWrite">
            <summary>
            Gets or sets the max nodes per write.
            </summary>
            <value>
            The max nodes per write.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionLimits.MaxNodesPerMethodCall">
            <summary>
            Gets or sets the max nodes per method call.
            </summary>
            <value>
            The max nodes per method call.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionLimits.MaxNodesPerHistoryDataRead">
            <summary>
            Gets or sets the max nodes per history data read.
            </summary>
            <value>
            The max nodes per history data read.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionLimits.MaxNodesPerHistoryDataUpdate">
            <summary>
            Gets or sets the max nodes per history data update.
            </summary>
            <value>
            The max nodes per history data update.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionLimits.MaxNodesPerHistoryEventRead">
            <summary>
            Gets or sets the max nodes per history event read.
            </summary>
            <value>
            The max nodes per history event read.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionLimits.MaxNodesPerHistoryEventUpdate">
            <summary>
            Gets or sets the max nodes per history event update.
            </summary>
            <value>
            The max nodes per history event update.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionLimits.MaxMonitoredItemsPerCall">
            <summary>
            Gets or sets the max monitored items per call.
            </summary>
            <value>
            The max monitored items per call.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionLimits.MaxNodesPerNodeManagement">
            <summary>
            Gets or sets the max nodes per node management.
            </summary>
            <value>
            The max nodes per node management.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionLimits.MaxNodesPerRegisterNodes">
            <summary>
            Gets or sets the max nodes per register nodes.
            </summary>
            <value>
            The max nodes per register nodes.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionLimits.MaxBrowseContinuationPoints">
            <summary>
            Gets or sets the max browse continuation points.
            </summary>
            <value>
            The max browse continuation points.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionLimits.MaxHistoryContinuationPoints">
            <summary>
            Gets or sets the max history continuation points.
            </summary>
            <value>
            The max history continuation points.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionLimits.MaxQueryContinuationPoints">
            <summary>
            Gets or sets the max query continuation points.
            </summary>
            <value>
            The max query continuation points.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionLimits.MaxHistoryDataValuesPerRead">
            <summary>
            Gets or sets the maximum number of history data values per read response.
            </summary>
            <value>
            The maximum number of history data values per read response.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SessionLimits.MaxHistoryEventsPerRead">
            <summary>
            Gets or sets the maximum number of history event per read response.
            </summary>
            <value>
            The maximum number of history event per read response.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.MonitoredItem">
            <summary>
            A monitored item for a subscription.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.MonitoredItem.#ctor(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.TimestampsToReturn,UnifiedAutomation.UaBase.MonitoringMode,System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.MonitoredItem"/> class.
            </summary>
            <param name="context">The request context.</param>
            <param name="timestampsToReturn">The timestamps to return.</param>
            <param name="monitoringMode">The monitoring mode.</param>
            <param name="clientHandle">The client handle.</param>
            <param name="queueSize">Size of the queue.</param>
            <param name="discardOldest">if set to <c>true</c> [discard oldest].</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.MonitoredItem.Id">
            <summary>
            Gets the item id.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.MonitoredItem.ItemHandle">
            <summary>
            Gets the item handle.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.MonitoredItem.IsEventItem">
            <summary>
            A flag indicating that the item is monitoring events.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.MonitoredItem.ClientHandle">
            <summary>
            Gets the client handle.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.MonitoredItem.MonitoringMode">
            <summary>
            Gets the monitoring mode.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.MonitoredItem.GetMonitoringParameters">
            <summary>
            Gets the monitoring parameters.
            </summary>
            <returns></returns>
        </member>
        <member name="P:UnifiedAutomation.UaServer.MonitoredItem.IsReadyToPublish">
            <summary>
            Returns true if the item is ready to publish.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.MonitoredItem.Deleted">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:UnifiedAutomation.UaServer.MonitoredItem"/> is deleted.
            </summary>
            <value>
              <c>true</c> if deleted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:UnifiedAutomation.UaServer.MonitoredItem.SetTriggered">
            <summary>
            Sets a flag indicating that the item has been triggered and should publish.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.MonitoredItem.TriggeredItems">
            <summary>
            Gets or sets the triggered items for the item.
            </summary>
            <value>
            The triggered items.
            </value>
            <remarks>
            The caller must ensure access to the collection is thread safe.
            </remarks>
        </member>
        <member name="M:UnifiedAutomation.UaServer.MonitoredItem.SetMonitoringMode(UnifiedAutomation.UaBase.MonitoringMode)">
            <summary>
            Changes the monitoring mode for the item.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.MonitoredItem.Publish(UnifiedAutomation.UaServer.RequestContext,System.Collections.Generic.Queue{UnifiedAutomation.UaBase.MonitoredItemNotification})">
            <summary>
            Publishes all available data change notifications.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.MonitoredItem.Publish(UnifiedAutomation.UaServer.RequestContext,System.Collections.Generic.Queue{UnifiedAutomation.UaBase.EventFieldList})">
            <summary>
            Publishes all available event notifications.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.MonitoredItem.OnDataChanged(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MonitoredItemHandle,UnifiedAutomation.UaBase.DataValue,System.Boolean)">
            <summary>
            Called when [data changed].
            </summary>
            <param name="context">The request context.</param>
            <param name="itemHandle">The item handle.</param>
            <param name="dataValue">The data value.</param>
            <param name="doNotBlockThread">if set to <c>true</c> then the current thread should not be blocked.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.MonitoredItem.OnEvent(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MonitoredItemHandle,UnifiedAutomation.UaServer.GenericEvent,System.Boolean)">
            <summary>
            Called when [event changed].
            </summary>
            <param name="context">The request context.</param>
            <param name="itemHandle">The item handle.</param>
            <param name="e">The event.</param>
            <param name="doNotBlockThread">if set to <c>true</c> then the current thread should not be blocked.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.MonitoredItem.Publish(UnifiedAutomation.UaServer.RequestContext,System.Collections.Generic.Queue{UnifiedAutomation.UaBase.MonitoredItemNotification},UnifiedAutomation.UaBase.DataValue)">
            <summary>
            Publishes a single data change notifications.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.MonitoredItem.IncrementSampleTime">
            <summary>
            Increments the sample time to the next interval.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.MonitoredItem.RequeueLastValue">
            <summary>
            Requeues the last value.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.MonitoredItem.QueueValue(UnifiedAutomation.UaBase.DataValue)">
            <summary>
            Updates the queue with a data value or an error.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.MonitoredItem.QueueEvent(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.GenericEvent,System.Boolean)">
            <summary>
            Updates the queue with an event.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.MonitoredItem.GetEventFields(UnifiedAutomation.UaBase.EventFilter,UnifiedAutomation.UaServer.GenericEvent)">
            <summary>
            Fetches the event fields from the event.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.MonitoredItem.AddValueToQueue(UnifiedAutomation.UaBase.DataValue)">
            <summary>
            Adds a value to the queue.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.MonitoredItem.ApplyFilter(UnifiedAutomation.UaBase.DataValue)">
            <summary>
            Applies the filter to value to determine if the new value should be kept.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.MonitoredItem.ValueChanged(UnifiedAutomation.UaBase.DataValue,UnifiedAutomation.UaBase.DataValue,UnifiedAutomation.UaBase.DataChangeFilter,System.Double)">
            <summary>
            Applies the filter to value to determine if the new value should be kept.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.MonitoredItem.Equals(System.Object,System.Object,UnifiedAutomation.UaBase.DeadbandType,System.Double,System.Double)">
            <summary>
            Checks if the two values are equal.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.MonitoredItem.ExceedsDeadband(System.Object,System.Object,UnifiedAutomation.UaBase.DeadbandType,System.Double,System.Double)">
            <summary>
            Returns true if the deadband was exceeded.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.MonitoredItem.ExceedsDeadband(System.Double,System.Double,UnifiedAutomation.UaBase.DeadbandType,System.Double,System.Double)">
            <summary>
            Returns true if the deadband was exceeded.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.MonitoredItem.CreationComplete(UnifiedAutomation.UaServer.MonitoredItemHandle,System.Threading.WaitCallback,System.Object,UnifiedAutomation.UaServer.DataMonitoringResult)">
            <summary>
            Called when the monitored item has been created successfully.
            </summary>
            <param name="itemHandle">The item handle.</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.MonitoredItem.CreationComplete(UnifiedAutomation.UaServer.MonitoredItemHandle,System.Threading.WaitCallback,System.Object,UnifiedAutomation.UaServer.EventMonitoringResult)">
            <summary>
            Called when the monitored item has been created successfully.
            </summary>
            <param name="itemHandle">The item handle.</param>
            <param name="callback">The callback.</param>
            <param name="callbackData">The callback data.</param>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.MonitoredItem.ModificationComplete(UnifiedAutomation.UaBase.TimestampsToReturn,UnifiedAutomation.UaServer.DataMonitoringResult)">
            <summary>
            Called when an item was successfully modified.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.MonitoredItem.ModificationComplete(UnifiedAutomation.UaServer.EventMonitoringResult)">
            <summary>
            Called when an item was successfully modified.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.MonitoredItem.SetFilter(UnifiedAutomation.UaBase.MonitoringFilter,System.Object)">
            <summary>
            Sets the filter.
            </summary>
            <param name="filter">The filter.</param>
            <param name="filterData">The filter data.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.MonitoredItem.SetSamplingInterval(System.Double)">
            <summary>
            Updates the sampling interval for an item.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.MonitoredItem.InitializeQueue">
            <summary>
            Clears and re-initializes the queue if the monitoring parameters changed.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.MonitoredItemQueue">
            <summary>
            Provides a queue for data changes.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.MonitoredItemQueue.#ctor">
            <summary>
            Creates an empty queue.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.MonitoredItemQueue.QueueSize">
            <summary>
            Gets the current queue size.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.MonitoredItemQueue.ItemsInQueue">
            <summary>
            Gets number of elements actually contained in value queue.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.MonitoredItemQueue.SetSamplingInterval(System.Double)">
            <summary>
            Sets the sampling interval used when queuing values.
            </summary>
            <param name="samplingInterval">The new sampling interval.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.MonitoredItemQueue.SetQueueSize(System.UInt32,System.Boolean,UnifiedAutomation.UaBase.DataValue)">
            <summary>
            Sets the queue size.
            </summary>
            <param name="queueSize">The new queue size.</param>
            <param name="discardOldest">Whether to discard the oldest values if the queue overflows.</param>
            <param name="lastValue">The last value.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.MonitoredItemQueue.QueueValue(UnifiedAutomation.UaBase.DataValue)">
            <summary>
            Adds the value to the queue.
            </summary>
            <param name="value">The value to queue.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.MonitoredItemQueue.Publish(UnifiedAutomation.UaBase.DataValue@)">
            <summary>
            Publishes the oldest value in the queue.
            </summary>
            <param name="value">The value.</param>
            <returns>
            True if a value was found. False if the queue is empty.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.MonitoredItemQueue.Enqueue(UnifiedAutomation.UaBase.DataValue)">
            <summary>
            Adds the value to the queue. Discards values if the queue is full.
            </summary>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.MonitoredItemQueue.Dequeue(UnifiedAutomation.UaBase.DataValue@)">
            <summary>
            Removes a value and an error from the queue.
            </summary>
            <param name="value">The value removed from the queue.</param>
            <returns>
            True if a value was found. False if the queue is empty.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.MonitoredItemQueue.SetOverflowBit(UnifiedAutomation.UaBase.DataValue@)">
            <summary>
            Sets the overflow bit in the value and error.
            </summary>
            <param name="value">The value to update.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.PublishingState">
            <summary>
            The current publishing state for a subcription.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.PublishingState.Idle">
            <summary>
            The subscription is not ready to publish.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.PublishingState.NotificationsAvailable">
            <summary>
            The subscription has notifications that are ready to publish.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.PublishingState.WaitingForPublish">
            <summary>
            The has already indicated that it is waiting for a publish request.
            </summary>
        </member>
        <member name="F:UnifiedAutomation.UaServer.PublishingState.Expired">
            <summary>
            The subscription has expired.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.SessionPublishQueue">
            <summary>
            Manages the publish queues for a session.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SessionPublishQueue.#ctor(UnifiedAutomation.UaServer.ServerManager,UnifiedAutomation.UaServer.Session,System.UInt32)">
            <summary>
            Creates a new queue.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SessionPublishQueue.Dispose">
            <summary>
            Frees any unmanaged resources.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SessionPublishQueue.Dispose(System.Boolean)">
            <summary>
            An overrideable version of the Dispose.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SessionPublishQueue.Close">
            <summary>
            Clears the queues because the session is closing.
            </summary>
            <returns>The list of subscriptions in the queue.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SessionPublishQueue.Add(UnifiedAutomation.UaServer.Subscription)">
            <summary>
            Adds a subscription from the publish queue.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SessionPublishQueue.Remove(UnifiedAutomation.UaServer.Subscription)">
            <summary>
            Removes a subscription from the publish queue.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SessionPublishQueue.SubscriptionStatusChange(UnifiedAutomation.UaServer.Subscription,UnifiedAutomation.UaBase.StatusCode)">
            <summary>
            Subscriptions the status change.
            </summary>
            <param name="subscription">The subscription.</param>
            <param name="status">The status.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SessionPublishQueue.NextStatusChange(System.UInt32@)">
            <summary>
            Nexts the status change on the queue.
            </summary>
            <param name="subscriptionId">The subscription id.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SessionPublishQueue.Acknowledge(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.SubscriptionAcknowledgementCollection,UnifiedAutomation.UaBase.StatusCodeCollection@)">
            <summary>
            Processes acknowledgements for previously published messages.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SessionPublishQueue.Publish(UnifiedAutomation.UaServer.RequestContext,System.Boolean,UnifiedAutomation.UaBase.IEndpointIncomingRequest)">
            <summary>
            Returns a subscription that is ready to publish.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SessionPublishQueue.CompletePublish(System.Boolean,UnifiedAutomation.UaBase.StatusCode,System.Object)">
            <summary>
            Completes the publish.
            </summary>
            <param name="requeue">if set to <c>true</c> the request must be requeued.</param>
            <param name="error">The error.</param>
            <param name="callbackData">The callback data.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SessionPublishQueue.PublishCompleted(UnifiedAutomation.UaServer.Subscription,System.Boolean)">
            <summary>
            Adds a subscription back into the queue because it has more notifications to publish.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SessionPublishQueue.PublishTimerExpired">
            <summary>
            Checks the state of the subscriptions.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SessionPublishQueue.AssignSubscriptionToRequest(UnifiedAutomation.UaServer.SessionPublishQueue.QueuedSubscription)">
            <summary>
            Checks the state of the subscriptions.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.SessionPublishQueue.QueuedRequest">
            <summary>
            A request queued while waiting for a subscription.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.SessionPublishQueue.QueuedSubscription">
            <summary>
            Stores a subscription that has notifications ready to be sent back to the client.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SessionPublishQueue.EndPublish(UnifiedAutomation.UaServer.SessionPublishQueue.QueuedRequest,UnifiedAutomation.UaBase.StatusCode)">
            <summary>
            Ends the publish.
            </summary>
            <param name="request">The request.</param>
            <param name="error">The error.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SessionPublishQueue.DoEndPublish(System.Object,UnifiedAutomation.UaBase.StatusCode)">
            <summary>
            Does the end publish.
            </summary>
            <param name="state">The state.</param>
            <param name="error">The error.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SessionPublishQueue.TraceState(System.String,System.Object[])">
            <summary>
            Dumps the current state of the session queue.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.Subscription">
            <summary>
            Manages a subscription created by a client.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Subscription.#ctor(UnifiedAutomation.UaServer.ServerManager,UnifiedAutomation.UaServer.Session,UnifiedAutomation.UaServer.SubscriptionLimits,System.UInt32,System.Double,System.UInt32,System.UInt32,System.UInt32,System.Byte,System.Boolean)">
            <summary>
            Initializes the object.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Subscription.Dispose">
            <summary>
            Frees any unmanaged resources.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Subscription.Dispose(System.Boolean)">
            <summary>
            An overrideable version of the Dispose.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.Subscription.Session">
            <summary>
            The session that owns the monitored item.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.Subscription.Id">
            <summary>
            The unique identifier assigned to the subscription.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.Subscription.SessionId">
            <summary>
            The identifier for the session that owns the subscription.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.Subscription.DiagnosticsLock">
            <summary>
            Gets the lock that must be acquired before accessing the contents of the Diagnostics property.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.Subscription.Diagnostics">
            <summary>
            Gets the current diagnostics for the subscription.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.Subscription.PublishingInterval">
            <summary>
            The publishing rate for the subscription.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.Subscription.MonitoredItemCount">
            <summary>
            The number of monitored items.
            </summary>
        </member>
        <member name="P:UnifiedAutomation.UaServer.Subscription.Priority">
            <summary>
            The priority assigned to the subscription.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Subscription.Delete(UnifiedAutomation.UaServer.RequestContext)">
            <summary>
            Deletes the subscription.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Subscription.OnDeleteMonitoredItemsComplete(UnifiedAutomation.UaServer.MonitoredItemOperationHandle,System.Object,UnifiedAutomation.UaBase.StatusCode,System.Boolean)">
            <summary>
            Called when the delete monitoring mode complete.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Subscription.PublishTimerExpired">
            <summary>
            Checks if the subscription is ready to publish.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Subscription.SessionClosed">
            <summary>
            Tells the subscription that the owning session is being closed.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Subscription.ResendData(UnifiedAutomation.UaServer.RequestContext)">
            <summary>
            Resends the cached values for all monitored items.
            </summary>
            <param name="context">The request context.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Subscription.Transfer(UnifiedAutomation.UaServer.RequestContext,System.Boolean)">
            <summary>
            Transfers a subscription to a new session.
            </summary>
            <param name="context">The request context.</param>
            <param name="sendInitialValues">Whether to resend the cached values for all monitored items.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Subscription.ResetKeepaliveCount">
            <summary>
            Resets the keepalive counter.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Subscription.ResetLifetimeCount">
            <summary>
            Resets the lifetime count.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Subscription.Acknowledge(UnifiedAutomation.UaServer.RequestContext,System.UInt32)">
            <summary>
            Removes a message from the message queue.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Subscription.Publish(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.UInt32Collection@,System.Boolean@)">
            <summary>
            Returns all available notifications.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Subscription.PublishTimeout">
            <summary>
            Indicates that the subscription has expired.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Subscription.NewStatusMessage(UnifiedAutomation.UaBase.StatusCode)">
            <summary>
            Publishes a timeout status message.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Subscription.InnerPublish(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.UInt32Collection@,System.Boolean@)">
            <summary>
            Returns all available notifications.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Subscription.ConstructMessage(UnifiedAutomation.UaServer.RequestContext,System.Collections.Generic.Queue{UnifiedAutomation.UaBase.EventFieldList},System.Collections.Generic.Queue{UnifiedAutomation.UaBase.MonitoredItemNotification},System.Int32@)">
            <summary>
            Construct a message from the queues.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Subscription.Republish(UnifiedAutomation.UaServer.RequestContext,System.UInt32)">
            <summary>
            Returns a cached notification message.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Subscription.Modify(UnifiedAutomation.UaServer.RequestContext,System.Double,System.UInt32,System.UInt32,System.UInt32,System.Byte)">
            <summary>
            Updates the publishing parameters for the subscription.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Subscription.SetPublishingMode(UnifiedAutomation.UaServer.RequestContext,System.Boolean)">
            <summary>
            Enables/disables publishing for the subscription.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Subscription.SetTriggering(UnifiedAutomation.UaServer.RequestContext,System.UInt32,UnifiedAutomation.UaBase.UInt32Collection,UnifiedAutomation.UaBase.UInt32Collection,UnifiedAutomation.UaBase.StatusCodeCollection@,UnifiedAutomation.UaBase.StatusCodeCollection@)">
            <summary>
            Updates the triggers for the monitored item.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Subscription.OnReadyToPublish(System.Object)">
            <summary>
            Called when [ready to publish].
            </summary>
            <param name="userData">The user data.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Subscription.GetMonitoredItem(System.UInt32)">
            <summary>
            Gets the monitored item.
            </summary>
            <param name="monitoredItemId">The monitored item id.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Subscription.CreateDataMonitoredItem(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.TimestampsToReturn,UnifiedAutomation.UaServer.NodeAttributeOperationHandle,System.UInt32,UnifiedAutomation.UaBase.MonitoredItemCreateRequest)">
            <summary>
            Creates the data monitored item.
            </summary>
            <param name="context">The request context.</param>
            <param name="timestampsToReturn">The timestamps to return.</param>
            <param name="nodeHandle">The node handle.</param>
            <param name="monitoredItemId">The monitored item id.</param>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Subscription.AdjustQueueSize(UnifiedAutomation.UaBase.MonitoringParameters)">
            <summary>
            Adjusts the size of the queue.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Subscription.CreateDataMonitoredItemComplete(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MonitoredItemHandle,UnifiedAutomation.UaServer.DataMonitoringResult)">
            <summary>
            Creates the data monitored item complete.
            </summary>
            <param name="context">The request context.</param>
            <param name="itemHandle">The item handle.</param>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Subscription.ModifyDataMonitoredItem(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.TimestampsToReturn,UnifiedAutomation.UaServer.MonitoredItemOperationHandle,UnifiedAutomation.UaBase.MonitoredItemModifyRequest)">
            <summary>
            Modifies the data monitored item.
            </summary>
            <param name="context">The request context.</param>
            <param name="timestampsToReturn">The timestamps to return.</param>
            <param name="itemHandle">The item handle.</param>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Subscription.ModifyDataMonitoredItemComplete(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MonitoredItemOperationHandle,UnifiedAutomation.UaBase.TimestampsToReturn,UnifiedAutomation.UaServer.DataMonitoringResult)">
            <summary>
            Modifies the data monitored item complete.
            </summary>
            <param name="context">The request context.</param>
            <param name="itemHandle">The item handle.</param>
            <param name="timestampsToReturn">The timestamps to return.</param>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Subscription.SetMonitoringMode(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MonitoredItemOperationHandle,UnifiedAutomation.UaBase.MonitoringMode)">
            <summary>
            Sets the monitoring mode.
            </summary>
            <param name="context">The request context.</param>
            <param name="itemHandle">The item handle.</param>
            <param name="monitoringMode">The monitoring mode.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Subscription.SetMonitoringModeComplete(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MonitoredItemOperationHandle,UnifiedAutomation.UaBase.StatusCode)">
            <summary>
            Modifies the data monitored item complete.
            </summary>
            <param name="context">The request context.</param>
            <param name="itemHandle">The item handle.</param>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Subscription.DeleteMonitoredItem(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MonitoredItemOperationHandle)">
            <summary>
            Deletes the monitored item.
            </summary>
            <param name="context">The request context.</param>
            <param name="itemHandle">The item handle.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Subscription.DeleteMonitoredItemComplete(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MonitoredItemOperationHandle,UnifiedAutomation.UaBase.StatusCode)">
            <summary>
            Deletes the monitored item complete.
            </summary>
            <param name="context">The request context.</param>
            <param name="itemHandle">The item handle.</param>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Subscription.CreateEventMonitoredItem(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.NotifierOperationHandle,System.UInt32,UnifiedAutomation.UaBase.MonitoredItemCreateRequest)">
            <summary>
            Creates the event monitored item.
            </summary>
            <param name="context">The request context.</param>
            <param name="notifierHandle">The notifier handle.</param>
            <param name="monitoredItemId">The monitored item id.</param>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Subscription.CreateEventMonitoredItemComplete(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MonitoredItemHandle,UnifiedAutomation.UaServer.EventMonitoringResult)">
            <summary>
            Creates the event monitored item complete.
            </summary>
            <param name="context">The request context.</param>
            <param name="itemHandle">The item handle.</param>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Subscription.ModifyEventMonitoredItem(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MonitoredItemOperationHandle,UnifiedAutomation.UaBase.MonitoredItemModifyRequest)">
            <summary>
            Creates the event monitored item.
            </summary>
            <param name="context">The request context.</param>
            <param name="itemHandle">The item handle.</param>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Subscription.ModifyEventMonitoredItemComplete(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.MonitoredItemOperationHandle,UnifiedAutomation.UaServer.EventMonitoringResult)">
            <summary>
            Creates the event monitored item complete.
            </summary>
            <param name="context">The request context.</param>
            <param name="itemHandle">The item handle.</param>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Subscription.ValidateConditionRefresh(UnifiedAutomation.UaServer.RequestContext)">
            <summary>
            Verifies that a condition refresh operation is permitted.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Subscription.ValidateConditionRefresh2(UnifiedAutomation.UaServer.RequestContext,System.UInt32)">
            <summary>
            Verifies that a condition refresh 2 operation is permitted.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Subscription.ConditionRefresh(UnifiedAutomation.UaServer.RequestContext)">
            <summary>
            Refreshes the conditions.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Subscription.ConditionRefresh2(UnifiedAutomation.UaServer.RequestContext,System.UInt32)">
            <summary>
            Refreshes the conditions.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Subscription.GetMonitoredItems(System.UInt32[]@,System.UInt32[]@)">
            <summary>
            Gets the monitored items for the subscription.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Subscription.VerifySession(UnifiedAutomation.UaServer.RequestContext)">
            <summary>
            Throws an exception if the session is not the owner.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.Subscription.TraceState(System.String)">
            <summary>
            Dumps the current state of the session queue.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.SubscriptionLimits">
            <summary>
            A class that stores the limits used by subscriptions.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SubscriptionLimits.#ctor(UnifiedAutomation.UaBase.ApplicationInstance)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.SessionLimits"/> class.
            </summary>
            <param name="application">The application.</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SubscriptionLimits.MaxNotificationsPerPublish">
            <summary>
            Gets or sets the max notifications per publish.
            </summary>
            <value>
            The max notifications per publish.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SubscriptionLimits.MaxPublishRequestCount">
            <summary>
            Gets or sets the max publish request count.
            </summary>
            <value>
            The max publish request count.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SubscriptionLimits.MaxSubscriptionCount">
            <summary>
            Gets or sets the max subscription count.
            </summary>
            <value>
            The max subscription count.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SubscriptionLimits.MaxSubscriptionsPerSession">
            <summary>
            Gets or sets the max number of subscriptions per session.
            </summary>
            <value>
            The max number of subscriptions per sessiont.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SubscriptionLimits.MaxPublishingInterval">
            <summary>
            Gets or sets the max publishing interval.
            </summary>
            <value>
            The max publishing interval.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SubscriptionLimits.MinPublishingInterval">
            <summary>
            Gets or sets the min publishing interval.
            </summary>
            <value>
            The min publishing interval.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SubscriptionLimits.PublishingIntervalResolution">
            <summary>
            Gets or sets the publishing interval resolution.
            </summary>
            <value>
            The publishing interval resolution.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SubscriptionLimits.MaxKeepAliveInterval">
            <summary>
            Gets or sets the max keep alive interval.
            </summary>
            <value>
            The max keep alive interval.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SubscriptionLimits.MinKeepAliveInterval">
            <summary>
            Gets or sets the min keep alive interval.
            </summary>
            <value>
            The min keep alive interval.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SubscriptionLimits.MaxLifetime">
            <summary>
            Gets or sets the max lifetime.
            </summary>
            <value>
            The max lifetime.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SubscriptionLimits.MinLifetime">
            <summary>
            Gets or sets the min lifetime.
            </summary>
            <value>
            The min lifetime.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SubscriptionLimits.MaxMessageQueueSize">
            <summary>
            Gets or sets the size of the max message queue.
            </summary>
            <value>
            The size of the max message queue.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SubscriptionLimits.MaxDataValueQueueSize">
            <summary>
            Gets or sets the size of the max data value queue.
            </summary>
            <value>
            The size of the max data value queue.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SubscriptionLimits.MinEventQueueSize">
            <summary>
            Gets or sets the size of the min event queue.
            </summary>
            <value>
            The size of the min event queue.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.SubscriptionLimits.MaxEventQueueSize">
            <summary>
            Gets or sets the size of the max event queue.
            </summary>
            <value>
            The size of the max event queue.
            </value>
        </member>
        <member name="T:UnifiedAutomation.UaServer.SubscriptionManager">
            <summary>
            A generic session manager object for a server.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SubscriptionManager.#ctor(UnifiedAutomation.UaServer.ServerManager)">
            <summary>
            Initializes the manager with its configuration.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SubscriptionManager.Dispose">
            <summary>
            Frees any unmanaged resources.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SubscriptionManager.Dispose(System.Boolean)">
            <summary>
            An overrideable version of the Dispose.
            </summary>
        </member>
        <member name="E:UnifiedAutomation.UaServer.SubscriptionManager.SubscriptionCreated">
            <summary>
            Raised after a new subscription is created.
            </summary>
        </member>
        <member name="E:UnifiedAutomation.UaServer.SubscriptionManager.SubscriptionDeleted">
            <summary>
            Raised before a subscription is deleted.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SubscriptionManager.GetSubscriptions(UnifiedAutomation.UaBase.NodeId)">
            <summary>
            Returns all of the subscriptions known to the subscription manager.
            </summary>
            <returns>A list of the subscriptions.</returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SubscriptionManager.RaiseSubscriptionEvent(UnifiedAutomation.UaServer.Subscription,System.Boolean)">
            <summary>
            Raises an event related to a subscription.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SubscriptionManager.Startup">
            <summary>
            Starts up the manager makes it ready to create subscriptions.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SubscriptionManager.Shutdown">
            <summary>
            Closes all subscriptions and rejects any new requests.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SubscriptionManager.SessionOpened(UnifiedAutomation.UaServer.Session)">
            <summary>
            Called when a new session is created.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SubscriptionManager.SessionActivated(UnifiedAutomation.UaServer.Session,System.Boolean)">
            <summary>
            Called when a session is activated.
            </summary>
            <param name="session">The session.</param>
            <param name="identityChanged">if set to <c>true</c> [identity changed].</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SubscriptionManager.SessionClosed(UnifiedAutomation.UaServer.Session,System.Boolean)">
            <summary>
            Called when a new session is closed.
            </summary>
            <param name="session">The session.</param>
            <param name="deleteSubscriptions">if set to <c>true</c> [delete subscriptions].</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SubscriptionManager.ConditionRefresh(UnifiedAutomation.UaServer.RequestContext,System.UInt32)">
            <summary>
            Refreshes the conditions for the specified subscription.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SubscriptionManager.ConditionRefresh2(UnifiedAutomation.UaServer.RequestContext,System.UInt32,System.UInt32)">
            <summary>
            Refreshes the conditions for the specified subscription.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SubscriptionManager.ResendData(UnifiedAutomation.UaServer.RequestContext,System.UInt32)">
            <summary>
            Requests that all cached values for a subscription be resent.
            </summary>
            <param name="context">The request context.</param>
            <param name="subscriptionId">The id for the subscription to resend.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SubscriptionManager.DoConditionRefresh(System.Object,UnifiedAutomation.UaBase.StatusCode)">
            <summary>
            Completes a refresh conditions request.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SubscriptionManager.DoConditionRefresh2(System.Object,UnifiedAutomation.UaBase.StatusCode)">
            <summary>
            Completes a refresh conditions request.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SubscriptionManager.DeleteSubscription(UnifiedAutomation.UaServer.RequestContext,System.UInt32)">
            <summary>
            Deletes the specified subscription.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SubscriptionManager.UpdateCurrentMonitoredItemsCount(UnifiedAutomation.UaBase.SessionDiagnosticsDataType,System.Int32)">
            <summary>
            Updates the current monitored item count for the session.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SubscriptionManager.GetPublishingIntervalCount">
            <summary>
            Gets the total number of publishing intervals in use.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SubscriptionManager.CreateSubscription(UnifiedAutomation.UaServer.RequestContext,System.Double,System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.Byte,System.UInt32@,System.Double@,System.UInt32@,System.UInt32@)">
            <summary>
            Creates a new subscription.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SubscriptionManager.DeleteSubscriptions(UnifiedAutomation.UaServer.RequestContext,System.Collections.Generic.List{System.UInt32},UnifiedAutomation.UaBase.StatusCodeCollection@)">
            <summary>
            Deletes group of subscriptions.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SubscriptionManager.Publish(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.SubscriptionAcknowledgementCollection,UnifiedAutomation.UaBase.IEndpointIncomingRequest)">
            <summary>
            Publishes a subscription.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SubscriptionManager.CompletePublish(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaBase.IEndpointIncomingRequest,UnifiedAutomation.UaBase.StatusCode,System.Object)">
            <summary>
            Completes the publish.
            </summary>
            <param name="context">The request context.</param>
            <param name="incoming">The incoming.</param>
            <param name="error">The error.</param>
            <param name="callbackData">The callback data.</param>
            <returns>
            True if successful. False if the request has been requeued.
            </returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SubscriptionManager.GetNextMessage(UnifiedAutomation.UaServer.RequestContext,UnifiedAutomation.UaServer.SessionPublishQueue,UnifiedAutomation.UaBase.IEndpointIncomingRequest,System.UInt32@,UnifiedAutomation.UaBase.UInt32Collection@,System.Boolean@)">
            <summary>
            Publishes a subscription.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SubscriptionManager.ModifySubscription(UnifiedAutomation.UaServer.RequestContext,System.UInt32,System.Double,System.UInt32,System.UInt32,System.UInt32,System.Byte,System.Double@,System.UInt32@,System.UInt32@)">
            <summary>
            Modifies an existing subscription.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SubscriptionManager.SetPublishingMode(UnifiedAutomation.UaServer.RequestContext,System.Boolean,System.Collections.Generic.List{System.UInt32},UnifiedAutomation.UaBase.StatusCodeCollection@)">
            <summary>
            Sets the publishing mode for a set of subscriptions.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SubscriptionManager.TransferSubscriptions(UnifiedAutomation.UaServer.RequestContext,System.Collections.Generic.List{System.UInt32},System.Boolean,UnifiedAutomation.UaBase.TransferResultCollection@)">
            <summary>
            Attaches a groups a subscriptions to a different sesssion.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SubscriptionManager.Republish(UnifiedAutomation.UaServer.RequestContext,System.UInt32,System.UInt32)">
            <summary>
            Republishes a previously published notification message.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SubscriptionManager.SetTriggering(UnifiedAutomation.UaServer.RequestContext,System.UInt32,System.UInt32,UnifiedAutomation.UaBase.UInt32Collection,UnifiedAutomation.UaBase.UInt32Collection,UnifiedAutomation.UaBase.StatusCodeCollection@,UnifiedAutomation.UaBase.StatusCodeCollection@)">
            <summary>
            Updates the triggers for the monitored item.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SubscriptionManager.GetSubscription(UnifiedAutomation.UaServer.RequestContext,System.UInt32)">
            <summary>
            Gets the subcription.
            </summary>
            <param name="context">The request context.</param>
            <param name="subscriptionId">The subscription id.</param>
            <returns></returns>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SubscriptionManager.CalculatePublishingInterval(System.Double)">
            <summary>
            Calculates the publishing interval.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SubscriptionManager.CalculateKeepAliveCount(System.Double,System.UInt32)">
            <summary>
            Calculates the keep alive count.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SubscriptionManager.CalculateLifetimeCount(System.Double,System.UInt32,System.UInt32)">
            <summary>
            Calculates the lifetime count.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SubscriptionManager.CalculateMaxNotificationsPerPublish(System.UInt32)">
            <summary>
            Calculates the maximum number of notifications per publish.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SubscriptionManager.CreateSubscription(UnifiedAutomation.UaServer.RequestContext,System.UInt32,System.Double,System.UInt32,System.UInt32,System.UInt32,System.Byte,System.Boolean)">
            <summary>
            Creates a new instance of a subscription.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SubscriptionManager.PublishSubscriptions(System.Object)">
            <summary>
            Periodically checks if the sessions have timed out.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SubscriptionManager.CleanupSubscriptions(UnifiedAutomation.UaServer.ServerManager,System.Collections.Generic.IList{UnifiedAutomation.UaServer.Subscription})">
            <summary>
            Cleanups the subscriptions.
            </summary>
            <param name="server">The server.</param>
            <param name="subscriptionsToDelete">The subscriptions to delete.</param>
        </member>
        <member name="M:UnifiedAutomation.UaServer.SubscriptionManager.CleanupSubscriptions(System.Object,UnifiedAutomation.UaBase.StatusCode)">
            <summary>
            Deletes any expired subscriptions.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.ISubscriptionManager">
            <summary>
            Provides access to the subscription manager within the server.
            </summary>
            <remarks>
            Sinks that receive these events must not block the thread.
            </remarks>
        </member>
        <member name="E:UnifiedAutomation.UaServer.ISubscriptionManager.SubscriptionCreated">
            <summary>
            Raised after a new subscription is created.
            </summary>
        </member>
        <member name="E:UnifiedAutomation.UaServer.ISubscriptionManager.SubscriptionDeleted">
            <summary>
            Raised before a subscription is deleted.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.SubscriptionEventHandler">
            <summary>
            The delegate for functions used to receive subscription related events.
            </summary>
            <param name="subscription">The subscription that was affected.</param>
            <param name="deleted">True if the subscription was deleted.</param>
        </member>
        <member name="T:UnifiedAutomation.UaServer.TraceServerModuleInfo">
            <summary>
            The metadata for the UnifiedAutomation.Server trace object.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TraceServerModuleInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.TraceServerModuleInfo"/> class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.TraceServer">
            <summary>
            The trace class used by the UnifiedAutomation.UaClient namespace.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.TraceServerInternalModuleInfo">
            <summary>
            The metadata for the UnifiedAutomation.Server trace object.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.TraceServerInternalModuleInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.TraceServerInternalModuleInfo"/> class.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.TraceServerInternal">
            <summary>
            The trace class used by the UnifiedAutomation.UaClient namespace.
            </summary>
        </member>
        <member name="T:UnifiedAutomation.UaServer.UserIdentity">
            <summary>
            A user identity.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.UserIdentity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.UserIdentity"/> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.UserIdentity.#ctor(UnifiedAutomation.UaBase.UserIdentityToken)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.UserIdentity"/> class.
            </summary>
        </member>
        <member name="M:UnifiedAutomation.UaServer.UserIdentity.#ctor(UnifiedAutomation.UaBase.UserIdentityToken,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:UnifiedAutomation.UaServer.UserIdentity"/> class.
            </summary>
            <param name="token">The token.</param>
            <param name="isAdministrator">if set to <c>true</c> [is administrator].</param>
        </member>
        <member name="P:UnifiedAutomation.UaServer.UserIdentity.TokenType">
            <summary>
            Gets or sets the type of the identity.
            </summary>
            <value>
            The type of the identity.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.UserIdentity.DisplayName">
            <summary>
            Gets or sets the name of the user.
            </summary>
            <value>
            The name of the user.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.UserIdentity.UserName">
            <summary>
            Gets or sets the name of the user.
            </summary>
            <value>
            The name of the user.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.UserIdentity.Password">
            <summary>
            Gets or sets the password.
            </summary>
            <value>
            The password.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.UserIdentity.IsAdministrator">
            <summary>
            Gets or sets a value indicating whether this user is an administrator.
            </summary>
            <value>
              <c>true</c> if this user is administrator; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.UserIdentity.Certificate">
            <summary>
            Gets or sets the certificate.
            </summary>
            <value>
            The certificate.
            </value>
        </member>
        <member name="P:UnifiedAutomation.UaServer.UserIdentity.ScopeIds">
            <summary>
            The groups assigned to the user that determines what permissions it has.
            </summary>
            <remarks>
            1 is the builin administrator group.
            Any other number has meaning specific to a server.
            </remarks>
        </member>
        <member name="P:UnifiedAutomation.UaServer.UserIdentity.WindowsIdentity">
            <summary>
            Gets or sets the windows identity.
            </summary>
            <value>
            The windows identity.
            </value>
        </member>
        <member name="M:UnifiedAutomation.UaServer.UserIdentity.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
              </exception>
        </member>
        <member name="M:UnifiedAutomation.UaServer.UserIdentity.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
    </members>
</doc>
